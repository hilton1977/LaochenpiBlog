{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/MySQL.jpg","path":"images/MySQL.jpg","modified":0,"renderable":0},{"_id":"source/images/MySqlReplication.jpg","path":"images/MySqlReplication.jpg","modified":0,"renderable":0},{"_id":"source/images/RabbitMQ.jpg","path":"images/RabbitMQ.jpg","modified":0,"renderable":0},{"_id":"source/images/SpringCloud.jpg","path":"images/SpringCloud.jpg","modified":0,"renderable":0},{"_id":"source/images/docker-images.png","path":"images/docker-images.png","modified":0,"renderable":0},{"_id":"source/images/es.jpg","path":"images/es.jpg","modified":0,"renderable":0},{"_id":"source/images/hexo.jpg","path":"images/hexo.jpg","modified":0,"renderable":0},{"_id":"source/images/error.jpg","path":"images/error.jpg","modified":0,"renderable":0},{"_id":"source/images/linux-1.jpg","path":"images/linux-1.jpg","modified":0,"renderable":0},{"_id":"source/images/masterStatus.png","path":"images/masterStatus.png","modified":0,"renderable":0},{"_id":"source/images/passwd.png","path":"images/passwd.png","modified":0,"renderable":0},{"_id":"source/images/redis-caching-avalanche-solution.png","path":"images/redis-caching-avalanche-solution.png","modified":0,"renderable":0},{"_id":"source/images/redis-caching-avalanche.png","path":"images/redis-caching-avalanche.png","modified":0,"renderable":0},{"_id":"source/images/consul.png","path":"images/consul.png","modified":0,"renderable":0},{"_id":"source/images/redis.jpg","path":"images/redis.jpg","modified":0,"renderable":0},{"_id":"source/images/redis-caching-penetration.png","path":"images/redis-caching-penetration.png","modified":0,"renderable":0},{"_id":"source/images/ssh-key.jpg","path":"images/ssh-key.jpg","modified":0,"renderable":0},{"_id":"source/images/winsw.png","path":"images/winsw.png","modified":0,"renderable":0},{"_id":"source/images/JVM-1.8-after.png","path":"images/JVM-1.8-after.png","modified":0,"renderable":0},{"_id":"source/images/JVM-1.8-before.png","path":"images/JVM-1.8-before.png","modified":0,"renderable":0},{"_id":"source/images/docker-search.png","path":"images/docker-search.png","modified":0,"renderable":0},{"_id":"source/images/eureka.png","path":"images/eureka.png","modified":0,"renderable":0},{"_id":"source/images/RabbitMQ-Admin.png","path":"images/RabbitMQ-Admin.png","modified":0,"renderable":0},{"_id":"source/images/nginx.png","path":"images/nginx.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-hueman/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/css/images/back.jpg","path":"css/images/back.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/css/images/logo.jpg","path":"css/images/logo.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/styles.css","path":"libs/titillium-web/styles.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/css/images/timg.jpg","path":"css/images/timg.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/jquery/3.3.1/jquery.min.js","path":"libs/jquery/3.3.1/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"74161b596d943086f214656cb45bb1807aacfa99","modified":1535008822833},{"_id":"themes/hexo-theme-hueman/LICENSE","hash":"f0c7cd0dcb6f00b98393878068ff3e6bf5f321f1","modified":1535008822874},{"_id":"themes/hexo-theme-hueman/_config.yml","hash":"c5eb45bf7100da4a367c2d190f20b03181c185ba","modified":1553652976140},{"_id":"themes/hexo-theme-hueman/README.md","hash":"e40d2179c43b418e7763306e1fee45062fac0c57","modified":1535008822875},{"_id":"themes/hexo-theme-hueman/package.json","hash":"f42b4135eaceb5ae70f55e8b6199cfa3651d43e0","modified":1535008822985},{"_id":"source/_posts/CentOs-Firewalld-脚本.md","hash":"2663fa4952b78f95670cbbccd184e15b03278e25","modified":1553652976126},{"_id":"source/_posts/ArrayList源码阅读.md","hash":"19ec9f1f5b56b8ba20f04e3233e7468a888e6b0b","modified":1553652954685},{"_id":"source/_posts/Docker环境搭建.md","hash":"483c42824964d34791076201725eb85bfa2bcc3f","modified":1553652976222},{"_id":"source/_posts/JVM基础概念.md","hash":"d9849102bb728a60eb400cb386541a52647d6068","modified":1553652954688},{"_id":"source/_posts/Hexo部署到VPS自动发布.md","hash":"5d110a6d72e823b041e1b97fd1a4828e67c55f41","modified":1553652976127},{"_id":"source/_posts/Linux-关机重启命令.md","hash":"13dd9c21376a3301e5bccac3b26c31b2d8968dd9","modified":1553652976128},{"_id":"source/_posts/Linxu搭建SS.md","hash":"484fb0d87a177d70137ee001375453d68ffb9108","modified":1553652976129},{"_id":"source/_posts/Logstah同步Es.md","hash":"c6e218eab6120e86454498c098f0190203a53dde","modified":1553652976131},{"_id":"source/_posts/Python 第三方库 PIL.md","hash":"082227f78a74ade7ad2d49017ae2179f3db9890a","modified":1553652976133},{"_id":"source/_posts/Linux-文件权限管理.md","hash":"c512bed039a8420ce0202ec9d299b7cb1b95e446","modified":1553652976216},{"_id":"source/_posts/RabbitMq 消息队列中间件.md","hash":"c950663bf9dc692868a88ea19f1f0486eb7c620b","modified":1553652976134},{"_id":"source/_posts/Redis持久化.md","hash":"859109918b7179f8063634bd40f88516baeebf7e","modified":1553652976135},{"_id":"source/_posts/Redis缓存场景.md","hash":"fdfa415b37ec196c473971917c3c823bfd6eca0d","modified":1553652976136},{"_id":"source/_posts/SprintCloud微服务-Eureka.md","hash":"63e1f99d1c788ca544747458041935fced08f61f","modified":1553652976137},{"_id":"source/_posts/Log4j-学习笔记.md","hash":"875a677d52675252eab68d90a074d2969add5457","modified":1553652976130},{"_id":"source/_posts/Winsw把java项目做成服务.md","hash":"9058a0d33cb759244407e71b57d30f092b087e5f","modified":1553652976138},{"_id":"source/_posts/hexo.md","hash":"7bceb78a975b08392133368bf2a23028eed826d1","modified":1553652976139},{"_id":"source/_posts/Mysql安装记录.md","hash":"7697598a613e251fb6fba6d5d18a9becf0b6d2f3","modified":1553652976132},{"_id":"source/images/MySQL.jpg","hash":"fff50281e60b58530d67ed29ff6696ee752f1b55","modified":1553484849464},{"_id":"source/images/MySqlReplication.jpg","hash":"ce0b3b602474c849aa64b530c6dd1668aa677cb8","modified":1553581434847},{"_id":"source/images/RabbitMQ.jpg","hash":"fb3d3d2b56e5487e70edd8df28eac779f20dd4ce","modified":1553063863285},{"_id":"source/images/SpringCloud.jpg","hash":"9dc17f37ec633e3924450ce87b16f7003bbe2204","modified":1553584870307},{"_id":"source/images/docker-images.png","hash":"23732ca93c0eec031226216062e3a72b1cc0c07d","modified":1553652954694},{"_id":"source/images/es.jpg","hash":"ec173dd17b92482a3add21848631a577eac4cb6b","modified":1535008822855},{"_id":"source/images/hexo.jpg","hash":"53d70fa809156ad0bbbd593005dc9b0e11ffb05b","modified":1535008822862},{"_id":"source/images/error.jpg","hash":"a423ac4b5065916bf22d6e6761503f0ff7167f5a","modified":1535008822854},{"_id":"source/images/linux-1.jpg","hash":"8fba9c79726876b502d7a2544bd75d77bdab4b66","modified":1535008822864},{"_id":"source/images/masterStatus.png","hash":"616e89d8ee88413c67246a6cfc37f0adf06fda6a","modified":1553567648084},{"_id":"source/images/passwd.png","hash":"5bee0ab4f8077522994224981dd289ff169d1d55","modified":1535008822867},{"_id":"source/images/redis-caching-avalanche-solution.png","hash":"40a7dcfdd8f032d3063b54ddb98c68d921d21eaf","modified":1553047215137},{"_id":"source/images/redis-caching-avalanche.png","hash":"3104a3ade8b0a852a0122ac18f89a4dd0aa42156","modified":1553046310792},{"_id":"source/images/consul.png","hash":"fe605415a3e4dcf90f03c1f8b9e5da911aa709b9","modified":1535008822852},{"_id":"source/images/redis.jpg","hash":"7fe35e8d18a533e09fc9eed85940a21d684c39c6","modified":1550801593701},{"_id":"source/images/redis-caching-penetration.png","hash":"84d3860ce4ce59e842ac00f7d3a3741e4fdcd2ac","modified":1553047614426},{"_id":"source/images/ssh-key.jpg","hash":"dbab22e4d3a5d2bc8d4dcb04a061a9e3c6688078","modified":1535008822869},{"_id":"source/images/winsw.png","hash":"73f25204b528210daca1d1dcbcb281d2fde1b161","modified":1535008822870},{"_id":"themes/hexo-theme-hueman/languages/ca.yml","hash":"d88625a06b434db3b0ed37b0d5f64ee31e91c077","modified":1535008822879},{"_id":"themes/hexo-theme-hueman/languages/en.yml","hash":"3a93280606196c642eca66b58b149bf648d71724","modified":1535008822880},{"_id":"themes/hexo-theme-hueman/languages/fr.yml","hash":"ed73fdd6adc49631eec1a163397e5adbaa91cd9e","modified":1535008822883},{"_id":"themes/hexo-theme-hueman/languages/es.yml","hash":"92bbf2ebd70a08d5011e5c8c31597f2dd1ea9901","modified":1535008822881},{"_id":"themes/hexo-theme-hueman/languages/hu.yml","hash":"1a503b6667515a4027850d3c645d34fa2b496411","modified":1535008822884},{"_id":"themes/hexo-theme-hueman/languages/ja.yml","hash":"64389f836e1965a55e85e57384b6b7276020f769","modified":1535008822888},{"_id":"themes/hexo-theme-hueman/languages/pt-BR.yml","hash":"4caa8df5aba98b23672bbe7d70674f5f67744b95","modified":1535008822891},{"_id":"themes/hexo-theme-hueman/languages/ko.yml","hash":"e8dbf0a133dab72ea0ae5b98663f7086a83d4771","modified":1535008822889},{"_id":"themes/hexo-theme-hueman/languages/ru.yml","hash":"fb81066411e37a2472797d4d40a7c409d768d34a","modified":1535008822892},{"_id":"themes/hexo-theme-hueman/languages/id.yml","hash":"dfd5d4ddf4797385093a8a569b71b18aa902e0c2","modified":1535008822886},{"_id":"themes/hexo-theme-hueman/languages/tr.yml","hash":"e28af4a5b366e116bbbfcd21b45c9c6996f6bfe7","modified":1535008822894},{"_id":"themes/hexo-theme-hueman/languages/vi.yml","hash":"4f5d30e07dc3b32a605ffe2a546365157353836d","modified":1535008822895},{"_id":"themes/hexo-theme-hueman/languages/zh-CN.yml","hash":"9f3b3b3a81d8965fb66b3b6028e566355f814d2d","modified":1535008822897},{"_id":"themes/hexo-theme-hueman/scripts/excerpt.js","hash":"61118ffd53158c6620010f6362752745f8372469","modified":1535008822988},{"_id":"themes/hexo-theme-hueman/scripts/meta.js","hash":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1535008822989},{"_id":"themes/hexo-theme-hueman/scripts/thumbnail.js","hash":"1fe763bf492813dd51276d48dd61a1855b40a53e","modified":1535008822990},{"_id":"themes/hexo-theme-hueman/layout/category.ejs","hash":"de99b00563d7c7b00cc7fd4e74e77c171891fbdc","modified":1535008822902},{"_id":"themes/hexo-theme-hueman/languages/zh-TW.yml","hash":"a674d2d5b946e2f7e1441b13e1b41a95999b02da","modified":1535008822898},{"_id":"themes/hexo-theme-hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1535008822900},{"_id":"themes/hexo-theme-hueman/layout/index.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1535008822942},{"_id":"themes/hexo-theme-hueman/layout/layout.ejs","hash":"4376f9a13a19551ec72aa41b824c635f0a847c55","modified":1535008822943},{"_id":"themes/hexo-theme-hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1535008822945},{"_id":"themes/hexo-theme-hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1535008822953},{"_id":"themes/hexo-theme-hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1535008822972},{"_id":"source/images/JVM-1.8-after.png","hash":"dda2bfe438c8055100d16d9d7a132b43706e605d","modified":1553652954692},{"_id":"source/images/JVM-1.8-before.png","hash":"ad04409d1de7cdbb01b3fc6a8b7368ef80f5d80b","modified":1553652954693},{"_id":"source/images/docker-search.png","hash":"23d7971b5359c1280605d587b8b1ee7d4a46c8bb","modified":1553652954697},{"_id":"source/images/eureka.png","hash":"546dd33c3b546e35b5bc519950f8395cfcc59517","modified":1535008822859},{"_id":"source/images/RabbitMQ-Admin.png","hash":"83de51e7b0ff0dd4217360229f97684206965052","modified":1553072171981},{"_id":"source/images/nginx.png","hash":"e34f6e159e47ca3f2230ea8b4f71af80492ecdf2","modified":1535008822865},{"_id":"themes/hexo-theme-hueman/layout/comment/changyan.ejs","hash":"e61355aa3dd818cf0aa0c6d0456f5953236a3635","modified":1535008822904},{"_id":"themes/hexo-theme-hueman/layout/comment/counter.ejs","hash":"9b6eaf3c6da487012483a6d930d0b50ac4f1a307","modified":1535008822906},{"_id":"themes/hexo-theme-hueman/layout/comment/disqus.ejs","hash":"84988da295ab8c509e24299c2c857d707cf78f77","modified":1535008822907},{"_id":"themes/hexo-theme-hueman/layout/comment/facebook.ejs","hash":"6a53104fc01fd4a7a34b46c2828e76d02cacb0dd","modified":1535008822909},{"_id":"themes/hexo-theme-hueman/layout/comment/isso.ejs","hash":"b8da0b50fad39ed39f6674c30112fc0b53acd07b","modified":1535008822911},{"_id":"themes/hexo-theme-hueman/layout/comment/index.ejs","hash":"abcd299083a456e92ca91707b92b0da0eead325f","modified":1535008822910},{"_id":"themes/hexo-theme-hueman/layout/comment/livere.ejs","hash":"c9b4aabc26a632d0e0377e6f52e0b3e1f1d93027","modified":1535008822913},{"_id":"themes/hexo-theme-hueman/layout/comment/scripts.ejs","hash":"47e8e1001dde153c1528812420335f8484d9e50d","modified":1535008822914},{"_id":"themes/hexo-theme-hueman/layout/comment/youyan.ejs","hash":"e5f5561a26343013e57a1f5c049c4f22f878d013","modified":1535008822917},{"_id":"themes/hexo-theme-hueman/layout/comment/valine.ejs","hash":"5ebbe64d73c91a08b3fdbe71f6cbd69c05b0feef","modified":1535008822916},{"_id":"themes/hexo-theme-hueman/layout/common/archive.ejs","hash":"424647122986c501165b36a512cb48c392142f51","modified":1535008822920},{"_id":"themes/hexo-theme-hueman/layout/common/article.ejs","hash":"035d3042d536829a6b7eba3cb5a03694425c75c3","modified":1535008822921},{"_id":"themes/hexo-theme-hueman/layout/common/footer.ejs","hash":"1a18f070934ca300a4ae9672f975b6f9aa83b2f0","modified":1535008822924},{"_id":"themes/hexo-theme-hueman/layout/common/content-title.ejs","hash":"1e787b40398f6da1db9505c39bbe6fa70e096cdc","modified":1535008822922},{"_id":"themes/hexo-theme-hueman/layout/common/scripts.ejs","hash":"271ad89a94bbced9f3f7377c145d86b62df0fee9","modified":1535008822936},{"_id":"themes/hexo-theme-hueman/layout/common/header.ejs","hash":"a27f027fc60d49ca84381a08c7102aa7d3118ec4","modified":1535008822927},{"_id":"themes/hexo-theme-hueman/layout/common/head.ejs","hash":"8724ca0222477f216a3be73bb1235f28da63cd09","modified":1535008822925},{"_id":"themes/hexo-theme-hueman/layout/common/sidebar.ejs","hash":"d9f3f3a9d5b02306d0c40eca6ac8b6450f760e36","modified":1535008822938},{"_id":"themes/hexo-theme-hueman/layout/common/thumbnail.ejs","hash":"24cafe46466aa4b0b0f93e0028e5c977771ea3e5","modified":1535008822940},{"_id":"themes/hexo-theme-hueman/layout/common/summary.ejs","hash":"41a612220b2994d9c7f6345c13237de38f10c08f","modified":1535008822939},{"_id":"themes/hexo-theme-hueman/layout/plugin/baidu-analytics.ejs","hash":"dc075c744e866c3cea8460439953fa2a073d6475","modified":1535008822946},{"_id":"themes/hexo-theme-hueman/layout/plugin/google-analytics.ejs","hash":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1535008822947},{"_id":"themes/hexo-theme-hueman/layout/pwa/index.ejs","hash":"0ca08d5a308a82fbf372821c4f0fdef0df98af78","modified":1535008822955},{"_id":"themes/hexo-theme-hueman/layout/plugin/statcounter.ejs","hash":"e2fe080dc8f62cba6791bef3d4ecb6454024f2c4","modified":1535008822951},{"_id":"themes/hexo-theme-hueman/layout/plugin/scripts.ejs","hash":"6db533bb9d86cccdb1a855818d9c24bd8f268195","modified":1535008822950},{"_id":"themes/hexo-theme-hueman/layout/search/baidu.ejs","hash":"46515988503a8b8dd07d0cf3ccabf519b4fad2d1","modified":1535008822957},{"_id":"themes/hexo-theme-hueman/layout/search/index.ejs","hash":"1b232e45234638a08cdc34d33cd7378636649822","modified":1535008822959},{"_id":"themes/hexo-theme-hueman/layout/search/insight.ejs","hash":"21ec59e4534ac2417d6b215b6cfe3825245ad340","modified":1535008822960},{"_id":"themes/hexo-theme-hueman/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1535008822962},{"_id":"themes/hexo-theme-hueman/layout/share/addtoany.ejs","hash":"b79f714da69c121729a136df0c94c09a85966d44","modified":1535008822965},{"_id":"themes/hexo-theme-hueman/layout/share/index.ejs","hash":"a0d5e32c68e1e6d3f2f954420bbb48675736b895","modified":1535008822969},{"_id":"themes/hexo-theme-hueman/layout/share/default.ejs","hash":"9a12d26f8d01557f69ca403a4b6f96fab7b45bd7","modified":1535008822968},{"_id":"themes/hexo-theme-hueman/layout/share/bdshare.ejs","hash":"015715441fc4075e8c8d8c51f523634c19296bc7","modified":1535008822966},{"_id":"themes/hexo-theme-hueman/layout/widget/archive.ejs","hash":"4bf2c1433166017450a3e7d265570b34d59195eb","modified":1535008822974},{"_id":"themes/hexo-theme-hueman/layout/widget/catalog.ejs","hash":"02c7fe79b53e34f8aa3854c4c205ecfd7caffd6c","modified":1535008822975},{"_id":"themes/hexo-theme-hueman/layout/widget/category.ejs","hash":"4f39c49773590a8c854aab6c09623afb1de865b5","modified":1535008822977},{"_id":"themes/hexo-theme-hueman/layout/share/jiathis.ejs","hash":"038b7d02aa765f6eb222c23356246ee3594b2965","modified":1535008822970},{"_id":"themes/hexo-theme-hueman/layout/widget/links.ejs","hash":"a979a257a0e8720de8c052233840c1ddde95ea37","modified":1535008822978},{"_id":"themes/hexo-theme-hueman/layout/widget/tag.ejs","hash":"49c61ba1e57a76ab03053ef1b885ddeaa121c7ce","modified":1535008822983},{"_id":"themes/hexo-theme-hueman/layout/widget/recent_posts.ejs","hash":"dd092bbf28104482210b4c4a734e551f7536f525","modified":1535008822979},{"_id":"themes/hexo-theme-hueman/layout/widget/tagcloud.ejs","hash":"744f0a0a9249745c7afd8abb0faba2cdb5b6811c","modified":1535008822984},{"_id":"themes/hexo-theme-hueman/layout/widget/sticky_posts.ejs","hash":"c62a9abcf3d0f2941346f433510eb9bd843ee8c1","modified":1535008822981},{"_id":"themes/hexo-theme-hueman/layout/common/post/date.ejs","hash":"79c2a591274f863a78dcadaaf63f087ad7b9e7e1","modified":1535008822929},{"_id":"themes/hexo-theme-hueman/layout/common/post/gallery.ejs","hash":"1ccdc66206e84668fa1f0d2440a8ed983aa321fd","modified":1535008822930},{"_id":"themes/hexo-theme-hueman/layout/common/post/title.ejs","hash":"e164edee924be00641013f0fd4e53f55b51f90a8","modified":1535008822935},{"_id":"themes/hexo-theme-hueman/layout/common/post/tag.ejs","hash":"7df16851b35da0ea09f7323bdbfb977198823f4c","modified":1535008822933},{"_id":"themes/hexo-theme-hueman/layout/common/post/nav.ejs","hash":"f7a755a93abed84337f2519eae788f20a88c4bf3","modified":1535008822932},{"_id":"themes/hexo-theme-hueman/source/js/main.js","hash":"81684d2313285f2329465c59e82cc392c8f6a6e9","modified":1535008823130},{"_id":"themes/hexo-theme-hueman/source/js/insight.js","hash":"154c023c13d913984e9f70e22affea1ee8abe444","modified":1535008823128},{"_id":"themes/hexo-theme-hueman/source/css/_responsive.styl","hash":"0e41183083909fa8d0b9cd6d7ebc5bcacded1b8f","modified":1535008823111},{"_id":"themes/hexo-theme-hueman/source/css/style.styl","hash":"99623727296205ab418b220529a17bdd18ffa56c","modified":1535008823126},{"_id":"themes/hexo-theme-hueman/source/css/_variables.styl","hash":"40f0d8077f369f89c9d3fab5e4b9971716bef56e","modified":1535013752204},{"_id":"themes/hexo-theme-hueman/source/css/_extend.styl","hash":"8476764f75db59f94fbabebc5ddbf8fd4523c453","modified":1535008822993},{"_id":"themes/hexo-theme-hueman/source/css/_partial/assets.styl","hash":"c42627622550f02395087c53a1a193f162fded65","modified":1535008823100},{"_id":"themes/hexo-theme-hueman/source/css/_partial/comment.styl","hash":"850f1f84987159da6fa2efdfa95cc82d0a2e59cd","modified":1535008823102},{"_id":"themes/hexo-theme-hueman/source/css/_partial/article.styl","hash":"a7bbcc00efe9770b6bfad44cbd40a9619b9c5f9a","modified":1535012759403},{"_id":"themes/hexo-theme-hueman/source/css/_partial/archive.styl","hash":"46aa36ef93ee77bfa97adad6ab2530a1057a1596","modified":1535008823097},{"_id":"themes/hexo-theme-hueman/source/css/_partial/header.styl","hash":"64e4b94f1e88d795c8866d261856680ca6faee2a","modified":1535008823105},{"_id":"themes/hexo-theme-hueman/source/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1535008823116},{"_id":"themes/hexo-theme-hueman/source/css/_partial/sidebar.styl","hash":"7533eddd2aba59663d21b14d248e485e3ca173d2","modified":1535008823109},{"_id":"themes/hexo-theme-hueman/source/css/_partial/footer.styl","hash":"c5ab092de0661c344cb5176580443f126d6e31cc","modified":1535008823103},{"_id":"themes/hexo-theme-hueman/source/css/_partial/nav.styl","hash":"b2941a6a171d2bfb3000be71664c04cc2a2c5964","modified":1535008823108},{"_id":"themes/hexo-theme-hueman/source/css/images/back.jpg","hash":"428badf50cc229537dbfc4ebd949be7284607f1b","modified":1535008823115},{"_id":"themes/hexo-theme-hueman/source/css/images/logo.jpg","hash":"254b1dfbcd7c314d8bccd5eb8d3876c7a20d6e22","modified":1535008823118},{"_id":"themes/hexo-theme-hueman/source/css/_partial/insight.styl","hash":"b29d88a9411f06974aa67381a3f3f39fb3b69feb","modified":1535008823106},{"_id":"themes/hexo-theme-hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1535008823123},{"_id":"themes/hexo-theme-hueman/source/libs/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1535008823159},{"_id":"themes/hexo-theme-hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1535008823119},{"_id":"themes/hexo-theme-hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1535008823122},{"_id":"themes/hexo-theme-hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1535008823120},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/styles.css","hash":"5780e94a2a38ffa02322edaa780cb58c3199efa7","modified":1535008823234},{"_id":"themes/hexo-theme-hueman/source/libs/source-code-pro/styles.css","hash":"6335d719343cca455152ad71a1aaed9868339236","modified":1535008823222},{"_id":"themes/hexo-theme-hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1535008823157},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1535008822995},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/arta.styl","hash":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1535008823000},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1535008822999},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1535008823002},{"_id":"themes/hexo-theme-hueman/source/css/images/timg.jpg","hash":"44069a1543c939d3207c65e850943ffeae8027a7","modified":1535008823125},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1535008823009},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1535008823006},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1535008823012},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1535008823007},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1535008823014},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1535008823013},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1535008823017},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1535008823016},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1535008823020},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1535008823010},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1535008823021},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1535008823018},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1535008823027},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1535008823028},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1535008823025},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1535008823024},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1535008823031},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1535008823035},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1535008823022},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1535008823029},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1535008823003},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1535008823036},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1535008823039},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1535008823041},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1535008823032},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1535008823044},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1535008823043},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1535008823046},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1535008823038},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1535008823050},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1535008823033},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1535008823051},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1535008823052},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1535008822997},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/index.styl","hash":"84a4e1f8a84232eb241ed678364e3c79a3015b54","modified":1535008823055},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1535008823060},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1535008823057},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1535008823059},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1535008823063},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1535008823047},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1535008823062},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1535008823066},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1535008823070},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1535008823048},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1535008823065},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1535008823004},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1535008823071},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1535008823071},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1535008823078},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1535008823072},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1535008823075},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1535008823079},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1535008823077},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1535008823054},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1535008823081},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1535008823082},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1535008823089},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1535008823083},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1535008823088},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1535008823091},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1535008823085},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1535008823086},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1535008823095},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1535008823092},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1535008823094},{"_id":"themes/hexo-theme-hueman/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1535008823073},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/css/font-awesome.css","hash":"bf188c224998b995d0119cfd18fade22e53f573c","modified":1535008823134},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1535008823179},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1535008823177},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1535008823180},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1535008823164},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1535008823181},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lg-transitions.css","hash":"2866c3f1eda31ed34485ff3511bcfb706d78ac56","modified":1535008823166},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"10c9630e41bb8d6bb7f75a3bfe8cdb33451ed7ba","modified":1535008823162},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1535008823168},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1535008823163},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1535008823173},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1535008823174},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/css/font-awesome.min.css","hash":"bd7c2763e15e568bdccc85e38432d79f65f8d9a1","modified":1535008823136},{"_id":"themes/hexo-theme-hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1535008823219},{"_id":"themes/hexo-theme-hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1535008823220},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lightgallery.css","hash":"d26b528a13ee1ef245bdb0aa3db149be3fe9cba6","modified":1535008823171},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1535008823225},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1535008823226},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1535008823228},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1535008823232},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1535008823170},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1535008823231},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1535008823187},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1535008823184},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1535008823185},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-autoplay.js","hash":"ba52bd55c0ab647e277c42b0e48a0ac25cbd3099","modified":1535008823190},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-fullscreen.js","hash":"6369e9704550f4207fa798dc6018da1d259fd318","modified":1535008823193},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"a5c468d260e3a8e68c9026aa2b5f31ce1860b8bf","modified":1535008823195},{"_id":"themes/hexo-theme-hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1535008823229},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-pager.js","hash":"562f883ba3a5e8ea570fd5d0c40afe527938c026","modified":1535008823200},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-hash.js","hash":"8a026dc31f912cbd3b8a110bb87984b372661f65","modified":1535008823197},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"44203a1490749aff6aba9784868b6c888d3fb86e","modified":1535008823192},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-share.js","hash":"b000585441e9bff2f5b7c538d623b698d48049a6","modified":1535008823203},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-pager.min.js","hash":"ec662f97ed5a15c2bd8cf87d5c93cd9a6b4df07a","modified":1535008823201},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"e570807e2786a0acb393c1195c820a660312fffe","modified":1535008823207},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-thumbnail.js","hash":"99fe3cc63161f0d678360a939fbd54c5d1c11eeb","modified":1535008823205},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-zoom.js","hash":"69a127964e508699f5f13467dd1b58fbf04bcca9","modified":1535008823212},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-video.min.js","hash":"050e7684bfbb133bed5375938fe0021f1fa88f7f","modified":1535008823210},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-share.min.js","hash":"afe725882964c87a148ac6ab54955cb0da0974c4","modified":1535008823204},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-zoom.min.js","hash":"8daabc26ceadc43741904b99db7e01bfababbd04","modified":1535008823213},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lightgallery.js","hash":"6d424527be45ff4deedd198e195fdeb74f1c6567","modified":1535008823215},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lightgallery.min.js","hash":"dc9c6447d3574fcba3868c35bb48e0bed9be6b7e","modified":1535008823216},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1535008823188},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-hash.min.js","hash":"fbdbcb46ae9fd668ba5e4dce5635c040359e3359","modified":1535008823198},{"_id":"themes/hexo-theme-hueman/source/libs/lightgallery/js/lg-video.js","hash":"11c8509a3e398cb8c2a32ff559ccdda6d9d71740","modified":1535008823209},{"_id":"themes/hexo-theme-hueman/source/libs/jquery/3.3.1/jquery.min.js","hash":"0c3192b500a4fd550e483cf77a49806a5872185b","modified":1535008823155},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1535008823139},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1535008823141},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1535008823151},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1535008823150},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1535008823148},{"_id":"themes/hexo-theme-hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1535008823145},{"_id":"public/content.json","hash":"3ea7815b9ebb6dac46cc97b08523cc5185bb5702","modified":1553653844589},{"_id":"public/2019/03/25/Mysql安装记录/index.html","hash":"c3a7d2b001fe26bd50a38c6bf523e3ceaa407b74","modified":1553653845459},{"_id":"public/2019/03/21/JVM基础概念/index.html","hash":"de5d3f9c5b2df01115a7b1ae762596bd1df45397","modified":1553653845459},{"_id":"public/2019/03/20/RabbitMq 消息队列中间件/index.html","hash":"55ba4d3546a817d8167bd221e6b16bc0a9b529dc","modified":1553653845459},{"_id":"public/2019/02/22/Redis持久化/index.html","hash":"2d41625d7d6141f1d9ce0bde235be334d5d596d4","modified":1553653845459},{"_id":"public/2019/02/22/Redis缓存场景/index.html","hash":"14031645e1c62890b398eb2e8f24d8aa4a79bf56","modified":1553653845459},{"_id":"public/2019/03/18/ArrayList源码阅读/index.html","hash":"e9624d07c23b40f6aa84eee1c1115d97e1f8bb43","modified":1553653845459},{"_id":"public/2018/07/26/Hexo部署到VPS自动发布/index.html","hash":"53e9348b3c03d5533d8b8768313b3067907bea38","modified":1553653845459},{"_id":"public/2018/08/01/SprintCloud微服务-Eureka/index.html","hash":"317c91faef715dd0fe7e014a52d02fbeac0e3d2b","modified":1553653845460},{"_id":"public/2018/07/25/Linux-关机重启命令/index.html","hash":"e4f544d74483e82b2c3807761f39c8d6b90568b7","modified":1553653845460},{"_id":"public/2018/08/20/Docker环境搭建/index.html","hash":"f272be30c3496ae2394b847d7427b90ce6ec4838","modified":1553653845460},{"_id":"public/2018/07/25/Linux-文件权限管理/index.html","hash":"570461c638c68b33bfaf5bbe0622d87471fc1bfa","modified":1553653845460},{"_id":"public/2018/07/20/Log4j-学习笔记/index.html","hash":"6154fd13a10cb1c1eccf56457c4931842c10e800","modified":1553653845460},{"_id":"public/2018/07/19/CentOs-Firewalld-脚本/index.html","hash":"fb8c6b3bf33646c9249824dc9b6c55a5b7c29bb6","modified":1553653845460},{"_id":"public/2018/05/25/Python 第三方库 PIL/index.html","hash":"792bb9491672c7a86015875e45ee3aa0e0a43c6a","modified":1553653845460},{"_id":"public/2018/05/25/Logstah同步Es/index.html","hash":"a28d026e4220f86c080e50155e32fec0c8251abc","modified":1553653845460},{"_id":"public/2018/05/24/hexo/index.html","hash":"abba55984fabbc806da3896a64ed67c81584cf83","modified":1553653845460},{"_id":"public/2018/07/13/Linxu搭建SS/index.html","hash":"8102cf0b0e4096f94b23bdd3a61b45507718c0bd","modified":1553653845460},{"_id":"public/2018/08/16/Winsw把java项目做成服务/index.html","hash":"7c099b24feb2e2801230d94ccda4f33bc00143fd","modified":1553653845460},{"_id":"public/categories/Linux/index.html","hash":"8cc75cbe49d18cf41a6ae70e2d07e412aefe8c31","modified":1553653845460},{"_id":"public/categories/Java/index.html","hash":"0d63e76ad527b9023303651f1327d69a78a9fa6d","modified":1553653845460},{"_id":"public/categories/技术/index.html","hash":"47777b79ab13b147e42f7bd2abd0d2f78b829d81","modified":1553653845460},{"_id":"public/categories/Python/index.html","hash":"c00b91e55a5460a9d8c88040862187a46032b82a","modified":1553653845460},{"_id":"public/categories/Spring/index.html","hash":"a751d302ecf4640db5435739d35cadb2b2f6f327","modified":1553653845460},{"_id":"public/categories/NoSql/index.html","hash":"9197d0b18557fb06a87d1b7628499a1d474b4111","modified":1553653845461},{"_id":"public/archives/index.html","hash":"b3a09a54762ca9ea609e39772e57b1a5ab9f0c01","modified":1553653845461},{"_id":"public/categories/数据库/index.html","hash":"ef2a1e10cfbb43778de363c555cca99998ec05e4","modified":1553653845461},{"_id":"public/archives/page/2/index.html","hash":"eca545d548d4133828aa3b7b12b83028c9200bc6","modified":1553653845461},{"_id":"public/archives/2018/index.html","hash":"2f73219d4ca9735ab59244a43cf36342a528164e","modified":1553653845461},{"_id":"public/archives/2018/page/2/index.html","hash":"91e277be853673b78d918eba9e7eeeac2354a6a5","modified":1553653845461},{"_id":"public/archives/2019/index.html","hash":"54fc5bca5f2dfcbc576456d3fc414e571c855f1f","modified":1553653845461},{"_id":"public/archives/2019/02/index.html","hash":"60cb2ad8b3b78c4e12938dd6f93af7d113255657","modified":1553653845461},{"_id":"public/archives/2018/08/index.html","hash":"3cc1efa86a211d99d110acc55528c31da9fc7eeb","modified":1553653845461},{"_id":"public/archives/2018/07/index.html","hash":"24596263330bbdb6ef15672ca557fc6a23983b65","modified":1553653845461},{"_id":"public/index.html","hash":"2b69da865cfff53b59e745ddc591dd41d0b39035","modified":1553653845461},{"_id":"public/archives/2019/03/index.html","hash":"0d9e14231b6c2107b8ce8635f9eddc4920d4aafc","modified":1553653845461},{"_id":"public/archives/2018/05/index.html","hash":"e450cd05a599bbbb99dc9f18f59e593b60c89068","modified":1553653845461},{"_id":"public/page/2/index.html","hash":"ffff237162876b33fabb4f192230275dc78ce899","modified":1553653845461},{"_id":"public/tags/Linux/index.html","hash":"ce0295c0073a52c87009f4c54e0af3a44a767cff","modified":1553653845461},{"_id":"public/tags/Java基础-源码/index.html","hash":"c635b86b7a09fce18fe3f1ff4e1dfa696b1576ab","modified":1553653845461},{"_id":"public/tags/Java/index.html","hash":"5c409c55abdb273738dea048a068bca757e134f4","modified":1553653845461},{"_id":"public/tags/Python/index.html","hash":"1a9030017687f21efe7346ab4fc5dac44c24633b","modified":1553653845462},{"_id":"public/tags/中间件/index.html","hash":"8cb0af782fb80c4a36b13efeaa208535ae35b2a4","modified":1553653845462},{"_id":"public/tags/技术/index.html","hash":"21e55e512f7828c2f0c64c0f3e02c1a1c093caf0","modified":1553653845462},{"_id":"public/tags/心得/index.html","hash":"65ead86c77f6e09794cc10f8fdc803f1fdecfe65","modified":1553653845462},{"_id":"public/tags/Spring/index.html","hash":"957c73746f322ab49d1951806c909cc17b28fd87","modified":1553653845462},{"_id":"public/tags/数据库/index.html","hash":"6024d2f2ea587e8aa59584317b15b995bb63d735","modified":1553653845462},{"_id":"public/tags/Redis/index.html","hash":"fd41f1e1a1918edf25cd52c29abe779a6dce6dca","modified":1553653845462},{"_id":"public/CNAME","hash":"74161b596d943086f214656cb45bb1807aacfa99","modified":1553653845467},{"_id":"public/images/MySQL.jpg","hash":"fff50281e60b58530d67ed29ff6696ee752f1b55","modified":1553653845467},{"_id":"public/images/docker-images.png","hash":"23732ca93c0eec031226216062e3a72b1cc0c07d","modified":1553653845467},{"_id":"public/images/hexo.jpg","hash":"53d70fa809156ad0bbbd593005dc9b0e11ffb05b","modified":1553653845467},{"_id":"public/images/es.jpg","hash":"ec173dd17b92482a3add21848631a577eac4cb6b","modified":1553653845468},{"_id":"public/images/linux-1.jpg","hash":"8fba9c79726876b502d7a2544bd75d77bdab4b66","modified":1553653845468},{"_id":"public/images/RabbitMQ.jpg","hash":"fb3d3d2b56e5487e70edd8df28eac779f20dd4ce","modified":1553653845468},{"_id":"public/images/passwd.png","hash":"5bee0ab4f8077522994224981dd289ff169d1d55","modified":1553653845468},{"_id":"public/images/masterStatus.png","hash":"616e89d8ee88413c67246a6cfc37f0adf06fda6a","modified":1553653845468},{"_id":"public/images/redis-caching-penetration.png","hash":"84d3860ce4ce59e842ac00f7d3a3741e4fdcd2ac","modified":1553653845468},{"_id":"public/images/consul.png","hash":"fe605415a3e4dcf90f03c1f8b9e5da911aa709b9","modified":1553653845468},{"_id":"public/images/ssh-key.jpg","hash":"dbab22e4d3a5d2bc8d4dcb04a061a9e3c6688078","modified":1553653845468},{"_id":"public/images/redis.jpg","hash":"7fe35e8d18a533e09fc9eed85940a21d684c39c6","modified":1553653845468},{"_id":"public/images/error.jpg","hash":"a423ac4b5065916bf22d6e6761503f0ff7167f5a","modified":1553653845468},{"_id":"public/images/redis-caching-avalanche.png","hash":"3104a3ade8b0a852a0122ac18f89a4dd0aa42156","modified":1553653845469},{"_id":"public/images/winsw.png","hash":"73f25204b528210daca1d1dcbcb281d2fde1b161","modified":1553653845469},{"_id":"public/images/redis-caching-avalanche-solution.png","hash":"40a7dcfdd8f032d3063b54ddb98c68d921d21eaf","modified":1553653845469},{"_id":"public/images/MySqlReplication.jpg","hash":"ce0b3b602474c849aa64b530c6dd1668aa677cb8","modified":1553653845469},{"_id":"public/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1553653845469},{"_id":"public/css/images/logo.jpg","hash":"254b1dfbcd7c314d8bccd5eb8d3876c7a20d6e22","modified":1553653845469},{"_id":"public/css/images/back.jpg","hash":"428badf50cc229537dbfc4ebd949be7284607f1b","modified":1553653845469},{"_id":"public/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1553653845469},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1553653845469},{"_id":"public/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1553653845469},{"_id":"public/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1553653845469},{"_id":"public/images/SpringCloud.jpg","hash":"9dc17f37ec633e3924450ce87b16f7003bbe2204","modified":1553653845469},{"_id":"public/images/nginx.png","hash":"e34f6e159e47ca3f2230ea8b4f71af80492ecdf2","modified":1553653845469},{"_id":"public/css/images/timg.jpg","hash":"44069a1543c939d3207c65e850943ffeae8027a7","modified":1553653846084},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1553653846084},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1553653846085},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1553653846085},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1553653846085},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1553653846085},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1553653846085},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1553653846085},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1553653846086},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1553653846086},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1553653846086},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1553653846086},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1553653846086},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1553653846086},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1553653846086},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1553653846086},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1553653846086},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1553653846086},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1553653846086},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1553653846091},{"_id":"public/images/docker-search.png","hash":"23d7971b5359c1280605d587b8b1ee7d4a46c8bb","modified":1553653846091},{"_id":"public/images/JVM-1.8-after.png","hash":"dda2bfe438c8055100d16d9d7a132b43706e605d","modified":1553653846091},{"_id":"public/images/JVM-1.8-before.png","hash":"ad04409d1de7cdbb01b3fc6a8b7368ef80f5d80b","modified":1553653846091},{"_id":"public/images/eureka.png","hash":"546dd33c3b546e35b5bc519950f8395cfcc59517","modified":1553653846091},{"_id":"public/images/RabbitMQ-Admin.png","hash":"83de51e7b0ff0dd4217360229f97684206965052","modified":1553653846091},{"_id":"public/js/main.js","hash":"0de476d4db52bdd8450b4982d781d623ad2188df","modified":1553653846097},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1553653846098},{"_id":"public/css/style.css","hash":"23737cdd6d3a0f61f41023d14bbb867bb204b86d","modified":1553653846100},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1553653846100},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1553653846100},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1553653846100},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1553653846100},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1553653846103},{"_id":"public/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1553653846103},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1553653846103},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1553653846103},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1553653846103},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1553653846103},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1553653846104},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1553653846104},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1553653846104},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1553653846104},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1553653846104},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1553653846104},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1553653846104},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1553653846104},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1553653846104},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1553653846104},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1553653846104},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1553653846104},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1553653846104},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1553653846104},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1553653846104},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1553653846105},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1553653846105},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1553653846105},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1553653846105},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1553653846105},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1553653846105},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1553653846105},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1553653846105},{"_id":"public/libs/jquery/3.3.1/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1553653846105},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1553653846105},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1553653846105},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1553653846121}],"Category":[{"name":"Linux","_id":"cjtqldtzb0002ysqu0tk0g1gh"},{"name":"技术","_id":"cjtqldtzj0007ysqurha3clxk"},{"name":"Python","_id":"cjtqldu05000sysqu5oub32c2"},{"name":"Java","_id":"cjtqldu100011ysqu0abs9hal"},{"name":"NoSql","_id":"cjtqldu15001aysqu3n40a8yf"},{"name":"Spring","_id":"cjtqldu1e001oysqunn0lg3sw"},{"name":"数据库","_id":"cjtqldu1f001tysquc1qfx9px"},{"name":"JVM","_id":"cjtqlh7i00007ikquptjgcegh"},{"name":"Jvm","_id":"cjtqljpn30009ikquh7y228cm"}],"Data":[],"Page":[],"Post":[{"title":"CentOs FireWall 脚本","date":"2018-07-19T06:20:43.000Z","_content":"\n![Firewalld](http://www.tecmint.com/wp-content/uploads/2016/01/Enable-Disable-Iptables-FirewallD.png)\n\n>经过之前自己搭建了Shadowsocks接触Linux慢慢想深入学习下一些常用Shell，之前在配置Shadowsocks遇到启动服务但是PC客户端连接没有网络，通过查阅一些教程发现Centos7默认开启了防火墙Firewall导致如果没有开放Shadowsocks的相关端口是无法访问的，现在记录下Firewall的一些相关命令\n\n##  1.Firewalld 简介\nCentOs7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念，有图形界面和工具界面，由于我在服务器上使用，图形界面请参照官方文档，本文以字符界面做介绍，firewalld的字符界面管理工具是 firewall-cmd 默认配置文件有两个：/usr/lib/firewalld/ （用户配置地址） 和 /etc/firewalld/ （系统配置，尽量不要修改）\n\n## 2.Zone 概念\nFirewall 能将不同的网络连接归类到不同的信任级别，Zone 提供了以下几个级别\n* drop: 丢弃所有进入的包，而不给出任何响应\n* block: 拒绝所有外部发起的连接，允许内部发起的连接\n* public: 允许指定的进入连接\n* external: 同上，对伪装的进入连接，一般用于路由转发\n* dmz: 允许受限制的进入连接\n* work: 允许受信任的计算机被限制的进入连接，类似 workgroup\n* home: 同上，类似 homegroup\n* internal: 同上，范围针对所有互联网用户\n* trusted: 信任所有连接\n\n## 3.过滤规则\n过滤规则的优先级遵循如下顺序source>interface>firewalld.conf\n* source: 根据源地址过滤\n* interface: 根据网卡过滤\n* service: 根据服务名过滤\n* port: 根据端口过滤\n* icmp-block: icmp 报文过滤，按照 icmp 类型配置\n* masquerade: ip 地址伪装\n* forward-port: 端口转发\n* rule: 自定义规则\n\n## 4.使用方法\nfirewall-cmd [指令] \n--zone 作用域  \n--permanent  永久修改  \n--reload 重载生效 \n--timeout=seconds 持续时间，一般用于调试            \n          \n__使用实例__:\n``` bash\n#查看开放的Zone\nfirewall-cmd --get-active-zones\n#查看firewalld状态\nfirewall-cmd --state\n#查看firewalld开放的端口\nfirewall-cmd --zone=dmz --list-ports\n#重新加载配置 (无需重启)\nfirewall-cmd --reload\n#重新加载配置 (重启服务器加载)\nfirewall-cmd --complete-reload \n#添加一个端口允许访问 (临时添加)\nfirewall-cmd --zone=dwz --add-port=8080/tcp\n#添加一个端口允许访问 (永久添加)\nfirewall-cmd --zone=dwz --add-port=8080/tcp --permanent\n#添加一个端口允许访问 (持续300秒)\nfirewall-cmd --zone=dwz --add-port=8080/tcp --timeout=300\n#添加一个服务允许访问\nfirewall-cmd --zone=dwz --add-service=smtp\n#启用firewalld\nsystemctl start firewalld\n#停止firewalld\nsystemctl stop firewalld\n#重启firewalld\nsystemctrl restart firewalld\n#禁用firewalld\nsystemctrl disable firewalld\n```\n","source":"_posts/CentOs-Firewalld-脚本.md","raw":"---\ntitle: CentOs FireWall 脚本\ndate: 2018-07-19 14:20:43\ncategories: [Linux]\ntags:\n    - Linux\n---\n\n![Firewalld](http://www.tecmint.com/wp-content/uploads/2016/01/Enable-Disable-Iptables-FirewallD.png)\n\n>经过之前自己搭建了Shadowsocks接触Linux慢慢想深入学习下一些常用Shell，之前在配置Shadowsocks遇到启动服务但是PC客户端连接没有网络，通过查阅一些教程发现Centos7默认开启了防火墙Firewall导致如果没有开放Shadowsocks的相关端口是无法访问的，现在记录下Firewall的一些相关命令\n\n##  1.Firewalld 简介\nCentOs7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念，有图形界面和工具界面，由于我在服务器上使用，图形界面请参照官方文档，本文以字符界面做介绍，firewalld的字符界面管理工具是 firewall-cmd 默认配置文件有两个：/usr/lib/firewalld/ （用户配置地址） 和 /etc/firewalld/ （系统配置，尽量不要修改）\n\n## 2.Zone 概念\nFirewall 能将不同的网络连接归类到不同的信任级别，Zone 提供了以下几个级别\n* drop: 丢弃所有进入的包，而不给出任何响应\n* block: 拒绝所有外部发起的连接，允许内部发起的连接\n* public: 允许指定的进入连接\n* external: 同上，对伪装的进入连接，一般用于路由转发\n* dmz: 允许受限制的进入连接\n* work: 允许受信任的计算机被限制的进入连接，类似 workgroup\n* home: 同上，类似 homegroup\n* internal: 同上，范围针对所有互联网用户\n* trusted: 信任所有连接\n\n## 3.过滤规则\n过滤规则的优先级遵循如下顺序source>interface>firewalld.conf\n* source: 根据源地址过滤\n* interface: 根据网卡过滤\n* service: 根据服务名过滤\n* port: 根据端口过滤\n* icmp-block: icmp 报文过滤，按照 icmp 类型配置\n* masquerade: ip 地址伪装\n* forward-port: 端口转发\n* rule: 自定义规则\n\n## 4.使用方法\nfirewall-cmd [指令] \n--zone 作用域  \n--permanent  永久修改  \n--reload 重载生效 \n--timeout=seconds 持续时间，一般用于调试            \n          \n__使用实例__:\n``` bash\n#查看开放的Zone\nfirewall-cmd --get-active-zones\n#查看firewalld状态\nfirewall-cmd --state\n#查看firewalld开放的端口\nfirewall-cmd --zone=dmz --list-ports\n#重新加载配置 (无需重启)\nfirewall-cmd --reload\n#重新加载配置 (重启服务器加载)\nfirewall-cmd --complete-reload \n#添加一个端口允许访问 (临时添加)\nfirewall-cmd --zone=dwz --add-port=8080/tcp\n#添加一个端口允许访问 (永久添加)\nfirewall-cmd --zone=dwz --add-port=8080/tcp --permanent\n#添加一个端口允许访问 (持续300秒)\nfirewall-cmd --zone=dwz --add-port=8080/tcp --timeout=300\n#添加一个服务允许访问\nfirewall-cmd --zone=dwz --add-service=smtp\n#启用firewalld\nsystemctl start firewalld\n#停止firewalld\nsystemctl stop firewalld\n#重启firewalld\nsystemctrl restart firewalld\n#禁用firewalld\nsystemctrl disable firewalld\n```\n","slug":"CentOs-Firewalld-脚本","published":1,"updated":"2019-03-27T02:16:16.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldtyw0000ysqurz71kitr","content":"<p><img src=\"http://www.tecmint.com/wp-content/uploads/2016/01/Enable-Disable-Iptables-FirewallD.png\" alt=\"Firewalld\"></p>\n<blockquote>\n<p>经过之前自己搭建了Shadowsocks接触Linux慢慢想深入学习下一些常用Shell，之前在配置Shadowsocks遇到启动服务但是PC客户端连接没有网络，通过查阅一些教程发现Centos7默认开启了防火墙Firewall导致如果没有开放Shadowsocks的相关端口是无法访问的，现在记录下Firewall的一些相关命令</p>\n</blockquote>\n<h2 id=\"1-Firewalld-简介\"><a href=\"#1-Firewalld-简介\" class=\"headerlink\" title=\"1.Firewalld 简介\"></a>1.Firewalld 简介</h2><p>CentOs7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念，有图形界面和工具界面，由于我在服务器上使用，图形界面请参照官方文档，本文以字符界面做介绍，firewalld的字符界面管理工具是 firewall-cmd 默认配置文件有两个：/usr/lib/firewalld/ （用户配置地址） 和 /etc/firewalld/ （系统配置，尽量不要修改）</p>\n<h2 id=\"2-Zone-概念\"><a href=\"#2-Zone-概念\" class=\"headerlink\" title=\"2.Zone 概念\"></a>2.Zone 概念</h2><p>Firewall 能将不同的网络连接归类到不同的信任级别，Zone 提供了以下几个级别</p>\n<ul>\n<li>drop: 丢弃所有进入的包，而不给出任何响应</li>\n<li>block: 拒绝所有外部发起的连接，允许内部发起的连接</li>\n<li>public: 允许指定的进入连接</li>\n<li>external: 同上，对伪装的进入连接，一般用于路由转发</li>\n<li>dmz: 允许受限制的进入连接</li>\n<li>work: 允许受信任的计算机被限制的进入连接，类似 workgroup</li>\n<li>home: 同上，类似 homegroup</li>\n<li>internal: 同上，范围针对所有互联网用户</li>\n<li>trusted: 信任所有连接</li>\n</ul>\n<h2 id=\"3-过滤规则\"><a href=\"#3-过滤规则\" class=\"headerlink\" title=\"3.过滤规则\"></a>3.过滤规则</h2><p>过滤规则的优先级遵循如下顺序source&gt;interface&gt;firewalld.conf</p>\n<ul>\n<li>source: 根据源地址过滤</li>\n<li>interface: 根据网卡过滤</li>\n<li>service: 根据服务名过滤</li>\n<li>port: 根据端口过滤</li>\n<li>icmp-block: icmp 报文过滤，按照 icmp 类型配置</li>\n<li>masquerade: ip 地址伪装</li>\n<li>forward-port: 端口转发</li>\n<li>rule: 自定义规则</li>\n</ul>\n<h2 id=\"4-使用方法\"><a href=\"#4-使用方法\" class=\"headerlink\" title=\"4.使用方法\"></a>4.使用方法</h2><p>firewall-cmd [指令]<br>–zone 作用域<br>–permanent  永久修改<br>–reload 重载生效<br>–timeout=seconds 持续时间，一般用于调试            </p>\n<p><strong>使用实例</strong>:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看开放的Zone</span></span><br><span class=\"line\">firewall-cmd --get-active-zones</span><br><span class=\"line\"><span class=\"comment\">#查看firewalld状态</span></span><br><span class=\"line\">firewall-cmd --state</span><br><span class=\"line\"><span class=\"comment\">#查看firewalld开放的端口</span></span><br><span class=\"line\">firewall-cmd --zone=dmz --list-ports</span><br><span class=\"line\"><span class=\"comment\">#重新加载配置 (无需重启)</span></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"comment\">#重新加载配置 (重启服务器加载)</span></span><br><span class=\"line\">firewall-cmd --complete-reload </span><br><span class=\"line\"><span class=\"comment\">#添加一个端口允许访问 (临时添加)</span></span><br><span class=\"line\">firewall-cmd --zone=dwz --add-port=8080/tcp</span><br><span class=\"line\"><span class=\"comment\">#添加一个端口允许访问 (永久添加)</span></span><br><span class=\"line\">firewall-cmd --zone=dwz --add-port=8080/tcp --permanent</span><br><span class=\"line\"><span class=\"comment\">#添加一个端口允许访问 (持续300秒)</span></span><br><span class=\"line\">firewall-cmd --zone=dwz --add-port=8080/tcp --timeout=300</span><br><span class=\"line\"><span class=\"comment\">#添加一个服务允许访问</span></span><br><span class=\"line\">firewall-cmd --zone=dwz --add-service=smtp</span><br><span class=\"line\"><span class=\"comment\">#启用firewalld</span></span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\"><span class=\"comment\">#停止firewalld</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"comment\">#重启firewalld</span></span><br><span class=\"line\">systemctrl restart firewalld</span><br><span class=\"line\"><span class=\"comment\">#禁用firewalld</span></span><br><span class=\"line\">systemctrl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://www.tecmint.com/wp-content/uploads/2016/01/Enable-Disable-Iptables-FirewallD.png\" alt=\"Firewalld\"></p>\n<blockquote>\n<p>经过之前自己搭建了Shadowsocks接触Linux慢慢想深入学习下一些常用Shell，之前在配置Shadowsocks遇到启动服务但是PC客户端连接没有网络，通过查阅一些教程发现Centos7默认开启了防火墙Firewall导致如果没有开放Shadowsocks的相关端口是无法访问的，现在记录下Firewall的一些相关命令</p>\n</blockquote>\n<h2 id=\"1-Firewalld-简介\"><a href=\"#1-Firewalld-简介\" class=\"headerlink\" title=\"1.Firewalld 简介\"></a>1.Firewalld 简介</h2><p>CentOs7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念，有图形界面和工具界面，由于我在服务器上使用，图形界面请参照官方文档，本文以字符界面做介绍，firewalld的字符界面管理工具是 firewall-cmd 默认配置文件有两个：/usr/lib/firewalld/ （用户配置地址） 和 /etc/firewalld/ （系统配置，尽量不要修改）</p>\n<h2 id=\"2-Zone-概念\"><a href=\"#2-Zone-概念\" class=\"headerlink\" title=\"2.Zone 概念\"></a>2.Zone 概念</h2><p>Firewall 能将不同的网络连接归类到不同的信任级别，Zone 提供了以下几个级别</p>\n<ul>\n<li>drop: 丢弃所有进入的包，而不给出任何响应</li>\n<li>block: 拒绝所有外部发起的连接，允许内部发起的连接</li>\n<li>public: 允许指定的进入连接</li>\n<li>external: 同上，对伪装的进入连接，一般用于路由转发</li>\n<li>dmz: 允许受限制的进入连接</li>\n<li>work: 允许受信任的计算机被限制的进入连接，类似 workgroup</li>\n<li>home: 同上，类似 homegroup</li>\n<li>internal: 同上，范围针对所有互联网用户</li>\n<li>trusted: 信任所有连接</li>\n</ul>\n<h2 id=\"3-过滤规则\"><a href=\"#3-过滤规则\" class=\"headerlink\" title=\"3.过滤规则\"></a>3.过滤规则</h2><p>过滤规则的优先级遵循如下顺序source&gt;interface&gt;firewalld.conf</p>\n<ul>\n<li>source: 根据源地址过滤</li>\n<li>interface: 根据网卡过滤</li>\n<li>service: 根据服务名过滤</li>\n<li>port: 根据端口过滤</li>\n<li>icmp-block: icmp 报文过滤，按照 icmp 类型配置</li>\n<li>masquerade: ip 地址伪装</li>\n<li>forward-port: 端口转发</li>\n<li>rule: 自定义规则</li>\n</ul>\n<h2 id=\"4-使用方法\"><a href=\"#4-使用方法\" class=\"headerlink\" title=\"4.使用方法\"></a>4.使用方法</h2><p>firewall-cmd [指令]<br>–zone 作用域<br>–permanent  永久修改<br>–reload 重载生效<br>–timeout=seconds 持续时间，一般用于调试            </p>\n<p><strong>使用实例</strong>:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看开放的Zone</span></span><br><span class=\"line\">firewall-cmd --get-active-zones</span><br><span class=\"line\"><span class=\"comment\">#查看firewalld状态</span></span><br><span class=\"line\">firewall-cmd --state</span><br><span class=\"line\"><span class=\"comment\">#查看firewalld开放的端口</span></span><br><span class=\"line\">firewall-cmd --zone=dmz --list-ports</span><br><span class=\"line\"><span class=\"comment\">#重新加载配置 (无需重启)</span></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"><span class=\"comment\">#重新加载配置 (重启服务器加载)</span></span><br><span class=\"line\">firewall-cmd --complete-reload </span><br><span class=\"line\"><span class=\"comment\">#添加一个端口允许访问 (临时添加)</span></span><br><span class=\"line\">firewall-cmd --zone=dwz --add-port=8080/tcp</span><br><span class=\"line\"><span class=\"comment\">#添加一个端口允许访问 (永久添加)</span></span><br><span class=\"line\">firewall-cmd --zone=dwz --add-port=8080/tcp --permanent</span><br><span class=\"line\"><span class=\"comment\">#添加一个端口允许访问 (持续300秒)</span></span><br><span class=\"line\">firewall-cmd --zone=dwz --add-port=8080/tcp --timeout=300</span><br><span class=\"line\"><span class=\"comment\">#添加一个服务允许访问</span></span><br><span class=\"line\">firewall-cmd --zone=dwz --add-service=smtp</span><br><span class=\"line\"><span class=\"comment\">#启用firewalld</span></span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\"><span class=\"comment\">#停止firewalld</span></span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"><span class=\"comment\">#重启firewalld</span></span><br><span class=\"line\">systemctrl restart firewalld</span><br><span class=\"line\"><span class=\"comment\">#禁用firewalld</span></span><br><span class=\"line\">systemctrl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Docker 环境搭建","date":"2018-08-20T06:11:30.000Z","_content":"\n>开发->部署测试->发布正式 在整体流程中每个人的开发环境可能各不相同、编译环境、运行环境。单机服务调整控制环境版本等可以保证发布一致性，但是如果当业务越来越庞大集群处理时需要部署多台机器时，可能每台机器的大大小小差异都会导致发布失败，处理起来非常麻烦。docker虚拟化来处理能保证发布环境一致性，可移植。通过docker 镜像你可以在任何版本linux服务器上进行发布。每个镜像就相当于个一个系统相互不影响独立环境。\n\n\n![docker](http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png)\n\n## 1.Docker 介绍\nDocker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。\n\nDocker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。\n\n总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\n\n## 2.Docker 安装\n我的VPS用的Centos 7 那就用本版本记录搭建过程，docker的版本用CE社区版\n``` bash\n#下载yum-utils工具用于管理yum-config-manager可以配置源\nyum install yum-utils\n#添加docker-ce源\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n#查询docker-ce版本\nyum list docker-ce --showduplicates | sort -r \n#指定安装18.06.0 版本\nyum install dock-ce-18.06.0.ce\n<<<<<<< HEAD\n=======\n```\n安装docker，默认是安装最高版本测试可以用，但是生产环境为了稳定尽量指定版本(stable稳定版)\n\n## 3.Docker 常用命令\n\n``` bash\n>>>>>>> 89e26ef27826ebc8a8b06014969c8ead3bb74a3e\n#启动docker服务\nsystemctl start docker\n#自动启动docker服务\nsystemctl enable docker\n```\n安装docker,默认是安装最高版本测试可以用，但是生产环境为了稳定尽量指定版本(`stable稳定版`)\n\n## 3.Docker 镜像 容器\n#### 镜像查询拉取\n安装 docker 完毕，可以尝试安装一个镜像并运行，搜索镜像使用 `docker search [镜像名称]`,搜索的镜像 `OFFICAL` 标识的为官方镜像，其余的都是非官方人员自行构建的镜像并上传库共享。\n![docker-search-alpine](/images/docker-search.png)\n使用 `docker pull alpine` 下载拉取alpine镜像,然后使用`docker images` 查看镜像已有镜像，这里以`alpine`为模板\n![docker-images](/images/docker-images.png)\n\n#### 运行容器\n基于alpine镜像启动一个容器 \n``` bash\ndocker run -itd -p  8081:8081 --name myTest  alpine\n```\n- -i：以交互模式运行容器，通常与 -t 同时使用\n- -d: 后台运行容器，并返回容器ID\n- -t : 为容器重新分配一个伪输入终端，通常与 -i 同时使用\n- -p: 端口映射，格式为：主机(宿主)端口:容器端口 8080端口的访问转发到容器的8080端口上\n- --name: 为容器指定一个容器名\n- alpine：这是指用 `alpine` 镜像为基础来启动容器。\n\n启动完毕后 `docker ps` 查看正在运行的容器,  `docker ps -a` 查看容器。\n\n#### 容器操作\n\n``` bash\n##### myTest 为容器名称 ##### \n#进行容器\ndocker attach myTest\n#容器中执行脚本返回结果 (由于是alpine所以执行的)\ndocker exec -it myTest /bin/sh\n#删除容器\ndocker rm myTest\n#启动已有容器\ndocker start myTest\n#停止容器\ndocker stop myTest\n```\n在容器中退出容器时需要注意的是通过`exit`返回宿主主机会导致容器直接停止并不是我们想要的结果，官方给出的退出容器并使其在后台继续运行使用 `ctrl+p+q` 安全退出不影响容器运行。 \n\n## 4.DockerFile\nDockerfile 是一个文本文件，其内包含了一条条的指令`(Instruction)`，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。我们可以根据实际的开发需求通过`dockerfile`来自定义镜像，JUST DO IT！\n\n##### FROM 指令\nFROM <image\\>:<tag\\> 相当于建造一个大楼地基的选择，选择不同的地基来搭建不一样的大楼。\n- 操作系统类基础搭建例如 `ubuntu`、`dabin`、`centos`\n- 开发语言作为基础搭建例如`java`、`nodejs`、`python` \n- 服务类镜像作为基础 `oralce`、`mysql`、`nginx`、`tomcat`\n- 自定义混合类作为基础在其他自定义环境镜像基础上搭建\n\n所有的镜像地基都可以从docker库中拉取，选择合理的基础镜像可以让你更快的去构建你的镜像，省心省力。\n\n#### RUN 指令\nRUN 就像是执行shell指令，常常用于更新安装需要的生产软件服务等。RUN有2种执行方式\n- shell 格式： RUN <命令> ，就像直接在命令行中输入的命令一样：`RUN apt-get --update`\n- exec 格式： RUN [\"可执行文件\", \"参数1\", \"参数2\"]：`RUN [\"apt-get\",\"--update\"]`\n\n\n__注意__：多行命令不要写多个`RUN`，原因是`Dockerfile`中每一个指令都会建立一层.多少个`RUN`就构建了多少层镜像，会造成镜像的臃肿多层，不仅仅增加了构件部署的时间，还容易出错。`RUN`书写时的换行符是`\\`，记得下载压缩软件操作完毕后`rm`不必要的软件压缩包和缓存让镜像更精简。\n\n#### CMD 指令\n`CMD` 指令的格式和 `RUN` 相似也是两种格式，`CMD` 执行脚本在`dockerfile`只能存在一条，多条只执行最后一条，当有多个时只会执行最后一个，一般用于执行开启某些服务 `tomcat`、`oracle`、`nginx`等。\n\n#### ENTRYPOINT 指令\n`ENTRYPOINT` 执行脚本在`dockerfile`只能存在一条，多条只执行最后一条，容器启动后执行且不会被`docker run`提供的参数覆盖。\n\n### RUN  ENTRYPOINT  CMD 小结\n- `CMD` 和 `ENTRYPOINT` 推荐使用`Exec`格式，因为指令可读性更强，更容易理解。`RUN` 则两种格式都可以。\n- `RUN`用来执行脚本构建基础镜像，`CMD` `ENTRYPOINT` 用来构建完镜像容器启动后执行一些操作。\n- `CMD` 会被`docker run` 后的执行脚本覆盖不执行，`ENTRYPOINT` 则不会被覆盖始终会被执行，如果需要覆盖运行需要`–entrypoint`参数。\n- `ENTRYPOINT` 和 `CMD` 同时存在时谁在最后谁能执行，`CMD` 可作为 `ENTRYPOINT` 的执行参数灵活配合使用。\n\n#### COPY 指令\n用于从上下文路径复制文件到容器目标路径中，`copy package.json /usr/src/app/` 把`package.json`复制到容器 `/usr/src/app`路径下\n- COPY <源路径>... <目标路径>\n- COPY [\"<源路径>\"，......，\"<目标路径>\"]  `......`代表若干源路径\n\n#### ADD 指令\n`ADD` 指令和 `COPY` 的格式和性质基本一致，是在 `COPY` 基础上增加了一些功能。比如`<源路径>`可以是一个`URL`，这种情况下 Docker 引擎会试图去下载这个链接的文件放到`<目标路径>`去。如果`<源路径>`为一个` tar` 压缩文件的话，压缩格式为`gzip` , `bzip2` 以及 `xz` 的情况下，`ADD`指令将会自动解压缩这个压缩文件到`<目标路径>`去。`ADD` 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢，`ADD` 还包含了一些复杂的的功能其行为也不一定清晰，所以官方推荐使用`COPY`来进行文件的复制。\n\n#### ENV 指令\n`ENV` 用于设置环境变量在后续的指令可以直接引用\n- ENV <key\\> <value\\>\n- ENV <key1\\>=<value1\\> <key2\\>=<value2\\>...\n\n##### Docker build构建\n所有的脚本编写完毕使用`docker bulid` 对 Dockerfile 进行构建，详细的命令如下\n``` bash\n\n```\n\n``` bash\n#基于镜像 这里使用alpine 主要是体积小构建速度更快\nFROM alpine\n#构建维修者 \nMAINTAINER 285635652@qq.com\nRUN apt-get update /\n  && apt-get java\n```\n\n\n\n","source":"_posts/Docker环境搭建.md","raw":"---\ntitle: Docker 环境搭建\ndate: 2018-08-20 14:11:30\ncategories: [技术]\ntags:\n    - Java\n---\n\n>开发->部署测试->发布正式 在整体流程中每个人的开发环境可能各不相同、编译环境、运行环境。单机服务调整控制环境版本等可以保证发布一致性，但是如果当业务越来越庞大集群处理时需要部署多台机器时，可能每台机器的大大小小差异都会导致发布失败，处理起来非常麻烦。docker虚拟化来处理能保证发布环境一致性，可移植。通过docker 镜像你可以在任何版本linux服务器上进行发布。每个镜像就相当于个一个系统相互不影响独立环境。\n\n\n![docker](http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png)\n\n## 1.Docker 介绍\nDocker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。\n\nDocker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。\n\n总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\n\n## 2.Docker 安装\n我的VPS用的Centos 7 那就用本版本记录搭建过程，docker的版本用CE社区版\n``` bash\n#下载yum-utils工具用于管理yum-config-manager可以配置源\nyum install yum-utils\n#添加docker-ce源\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n#查询docker-ce版本\nyum list docker-ce --showduplicates | sort -r \n#指定安装18.06.0 版本\nyum install dock-ce-18.06.0.ce\n<<<<<<< HEAD\n=======\n```\n安装docker，默认是安装最高版本测试可以用，但是生产环境为了稳定尽量指定版本(stable稳定版)\n\n## 3.Docker 常用命令\n\n``` bash\n>>>>>>> 89e26ef27826ebc8a8b06014969c8ead3bb74a3e\n#启动docker服务\nsystemctl start docker\n#自动启动docker服务\nsystemctl enable docker\n```\n安装docker,默认是安装最高版本测试可以用，但是生产环境为了稳定尽量指定版本(`stable稳定版`)\n\n## 3.Docker 镜像 容器\n#### 镜像查询拉取\n安装 docker 完毕，可以尝试安装一个镜像并运行，搜索镜像使用 `docker search [镜像名称]`,搜索的镜像 `OFFICAL` 标识的为官方镜像，其余的都是非官方人员自行构建的镜像并上传库共享。\n![docker-search-alpine](/images/docker-search.png)\n使用 `docker pull alpine` 下载拉取alpine镜像,然后使用`docker images` 查看镜像已有镜像，这里以`alpine`为模板\n![docker-images](/images/docker-images.png)\n\n#### 运行容器\n基于alpine镜像启动一个容器 \n``` bash\ndocker run -itd -p  8081:8081 --name myTest  alpine\n```\n- -i：以交互模式运行容器，通常与 -t 同时使用\n- -d: 后台运行容器，并返回容器ID\n- -t : 为容器重新分配一个伪输入终端，通常与 -i 同时使用\n- -p: 端口映射，格式为：主机(宿主)端口:容器端口 8080端口的访问转发到容器的8080端口上\n- --name: 为容器指定一个容器名\n- alpine：这是指用 `alpine` 镜像为基础来启动容器。\n\n启动完毕后 `docker ps` 查看正在运行的容器,  `docker ps -a` 查看容器。\n\n#### 容器操作\n\n``` bash\n##### myTest 为容器名称 ##### \n#进行容器\ndocker attach myTest\n#容器中执行脚本返回结果 (由于是alpine所以执行的)\ndocker exec -it myTest /bin/sh\n#删除容器\ndocker rm myTest\n#启动已有容器\ndocker start myTest\n#停止容器\ndocker stop myTest\n```\n在容器中退出容器时需要注意的是通过`exit`返回宿主主机会导致容器直接停止并不是我们想要的结果，官方给出的退出容器并使其在后台继续运行使用 `ctrl+p+q` 安全退出不影响容器运行。 \n\n## 4.DockerFile\nDockerfile 是一个文本文件，其内包含了一条条的指令`(Instruction)`，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。我们可以根据实际的开发需求通过`dockerfile`来自定义镜像，JUST DO IT！\n\n##### FROM 指令\nFROM <image\\>:<tag\\> 相当于建造一个大楼地基的选择，选择不同的地基来搭建不一样的大楼。\n- 操作系统类基础搭建例如 `ubuntu`、`dabin`、`centos`\n- 开发语言作为基础搭建例如`java`、`nodejs`、`python` \n- 服务类镜像作为基础 `oralce`、`mysql`、`nginx`、`tomcat`\n- 自定义混合类作为基础在其他自定义环境镜像基础上搭建\n\n所有的镜像地基都可以从docker库中拉取，选择合理的基础镜像可以让你更快的去构建你的镜像，省心省力。\n\n#### RUN 指令\nRUN 就像是执行shell指令，常常用于更新安装需要的生产软件服务等。RUN有2种执行方式\n- shell 格式： RUN <命令> ，就像直接在命令行中输入的命令一样：`RUN apt-get --update`\n- exec 格式： RUN [\"可执行文件\", \"参数1\", \"参数2\"]：`RUN [\"apt-get\",\"--update\"]`\n\n\n__注意__：多行命令不要写多个`RUN`，原因是`Dockerfile`中每一个指令都会建立一层.多少个`RUN`就构建了多少层镜像，会造成镜像的臃肿多层，不仅仅增加了构件部署的时间，还容易出错。`RUN`书写时的换行符是`\\`，记得下载压缩软件操作完毕后`rm`不必要的软件压缩包和缓存让镜像更精简。\n\n#### CMD 指令\n`CMD` 指令的格式和 `RUN` 相似也是两种格式，`CMD` 执行脚本在`dockerfile`只能存在一条，多条只执行最后一条，当有多个时只会执行最后一个，一般用于执行开启某些服务 `tomcat`、`oracle`、`nginx`等。\n\n#### ENTRYPOINT 指令\n`ENTRYPOINT` 执行脚本在`dockerfile`只能存在一条，多条只执行最后一条，容器启动后执行且不会被`docker run`提供的参数覆盖。\n\n### RUN  ENTRYPOINT  CMD 小结\n- `CMD` 和 `ENTRYPOINT` 推荐使用`Exec`格式，因为指令可读性更强，更容易理解。`RUN` 则两种格式都可以。\n- `RUN`用来执行脚本构建基础镜像，`CMD` `ENTRYPOINT` 用来构建完镜像容器启动后执行一些操作。\n- `CMD` 会被`docker run` 后的执行脚本覆盖不执行，`ENTRYPOINT` 则不会被覆盖始终会被执行，如果需要覆盖运行需要`–entrypoint`参数。\n- `ENTRYPOINT` 和 `CMD` 同时存在时谁在最后谁能执行，`CMD` 可作为 `ENTRYPOINT` 的执行参数灵活配合使用。\n\n#### COPY 指令\n用于从上下文路径复制文件到容器目标路径中，`copy package.json /usr/src/app/` 把`package.json`复制到容器 `/usr/src/app`路径下\n- COPY <源路径>... <目标路径>\n- COPY [\"<源路径>\"，......，\"<目标路径>\"]  `......`代表若干源路径\n\n#### ADD 指令\n`ADD` 指令和 `COPY` 的格式和性质基本一致，是在 `COPY` 基础上增加了一些功能。比如`<源路径>`可以是一个`URL`，这种情况下 Docker 引擎会试图去下载这个链接的文件放到`<目标路径>`去。如果`<源路径>`为一个` tar` 压缩文件的话，压缩格式为`gzip` , `bzip2` 以及 `xz` 的情况下，`ADD`指令将会自动解压缩这个压缩文件到`<目标路径>`去。`ADD` 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢，`ADD` 还包含了一些复杂的的功能其行为也不一定清晰，所以官方推荐使用`COPY`来进行文件的复制。\n\n#### ENV 指令\n`ENV` 用于设置环境变量在后续的指令可以直接引用\n- ENV <key\\> <value\\>\n- ENV <key1\\>=<value1\\> <key2\\>=<value2\\>...\n\n##### Docker build构建\n所有的脚本编写完毕使用`docker bulid` 对 Dockerfile 进行构建，详细的命令如下\n``` bash\n\n```\n\n``` bash\n#基于镜像 这里使用alpine 主要是体积小构建速度更快\nFROM alpine\n#构建维修者 \nMAINTAINER 285635652@qq.com\nRUN apt-get update /\n  && apt-get java\n```\n\n\n\n","slug":"Docker环境搭建","published":1,"updated":"2019-03-27T02:16:16.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldtz80001ysquof3cys6h","content":"<blockquote>\n<p>开发-&gt;部署测试-&gt;发布正式 在整体流程中每个人的开发环境可能各不相同、编译环境、运行环境。单机服务调整控制环境版本等可以保证发布一致性，但是如果当业务越来越庞大集群处理时需要部署多台机器时，可能每台机器的大大小小差异都会导致发布失败，处理起来非常麻烦。docker虚拟化来处理能保证发布环境一致性，可移植。通过docker 镜像你可以在任何版本linux服务器上进行发布。每个镜像就相当于个一个系统相互不影响独立环境。</p>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png\" alt=\"docker\"></p>\n<h2 id=\"1-Docker-介绍\"><a href=\"#1-Docker-介绍\" class=\"headerlink\" title=\"1.Docker 介绍\"></a>1.Docker 介绍</h2><p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p>\n<p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p>\n<p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>\n<h2 id=\"2-Docker-安装\"><a href=\"#2-Docker-安装\" class=\"headerlink\" title=\"2.Docker 安装\"></a>2.Docker 安装</h2><p>我的VPS用的Centos 7 那就用本版本记录搭建过程，docker的版本用CE社区版<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载yum-utils工具用于管理yum-config-manager可以配置源</span></span><br><span class=\"line\">yum install yum-utils</span><br><span class=\"line\"><span class=\"comment\">#添加docker-ce源</span></span><br><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"comment\">#查询docker-ce版本</span></span><br><span class=\"line\">yum list docker-ce --showduplicates | sort -r </span><br><span class=\"line\"><span class=\"comment\">#指定安装18.06.0 版本</span></span><br><span class=\"line\">yum install dock-ce-18.06.0.ce</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class=\"line\">=======</span><br></pre></td></tr></table></figure></p>\n<p>安装docker，默认是安装最高版本测试可以用，但是生产环境为了稳定尽量指定版本(stable稳定版)</p>\n<h2 id=\"3-Docker-常用命令\"><a href=\"#3-Docker-常用命令\" class=\"headerlink\" title=\"3.Docker 常用命令\"></a>3.Docker 常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 89e26ef27826ebc8a8b06014969c8ead3bb74a3e</span><br><span class=\"line\"><span class=\"comment\">#启动docker服务</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"><span class=\"comment\">#自动启动docker服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n<p>安装docker,默认是安装最高版本测试可以用，但是生产环境为了稳定尽量指定版本(<code>stable稳定版</code>)</p>\n<h2 id=\"3-Docker-镜像-容器\"><a href=\"#3-Docker-镜像-容器\" class=\"headerlink\" title=\"3.Docker 镜像 容器\"></a>3.Docker 镜像 容器</h2><h4 id=\"镜像查询拉取\"><a href=\"#镜像查询拉取\" class=\"headerlink\" title=\"镜像查询拉取\"></a>镜像查询拉取</h4><p>安装 docker 完毕，可以尝试安装一个镜像并运行，搜索镜像使用 <code>docker search [镜像名称]</code>,搜索的镜像 <code>OFFICAL</code> 标识的为官方镜像，其余的都是非官方人员自行构建的镜像并上传库共享。<br><img src=\"/images/docker-search.png\" alt=\"docker-search-alpine\"><br>使用 <code>docker pull alpine</code> 下载拉取alpine镜像,然后使用<code>docker images</code> 查看镜像已有镜像，这里以<code>alpine</code>为模板<br><img src=\"/images/docker-images.png\" alt=\"docker-images\"></p>\n<h4 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h4><p>基于alpine镜像启动一个容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd -p  8081:8081 --name myTest  alpine</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>-i：以交互模式运行容器，通常与 -t 同时使用</li>\n<li>-d: 后台运行容器，并返回容器ID</li>\n<li>-t : 为容器重新分配一个伪输入终端，通常与 -i 同时使用</li>\n<li>-p: 端口映射，格式为：主机(宿主)端口:容器端口 8080端口的访问转发到容器的8080端口上</li>\n<li>–name: 为容器指定一个容器名</li>\n<li>alpine：这是指用 <code>alpine</code> 镜像为基础来启动容器。</li>\n</ul>\n<p>启动完毕后 <code>docker ps</code> 查看正在运行的容器,  <code>docker ps -a</code> 查看容器。</p>\n<h4 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##### myTest 为容器名称 ##### </span></span><br><span class=\"line\"><span class=\"comment\">#进行容器</span></span><br><span class=\"line\">docker attach myTest</span><br><span class=\"line\"><span class=\"comment\">#容器中执行脚本返回结果 (由于是alpine所以执行的)</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it myTest /bin/sh</span><br><span class=\"line\"><span class=\"comment\">#删除容器</span></span><br><span class=\"line\">docker rm myTest</span><br><span class=\"line\"><span class=\"comment\">#启动已有容器</span></span><br><span class=\"line\">docker start myTest</span><br><span class=\"line\"><span class=\"comment\">#停止容器</span></span><br><span class=\"line\">docker stop myTest</span><br></pre></td></tr></table></figure>\n<p>在容器中退出容器时需要注意的是通过<code>exit</code>返回宿主主机会导致容器直接停止并不是我们想要的结果，官方给出的退出容器并使其在后台继续运行使用 <code>ctrl+p+q</code> 安全退出不影响容器运行。 </p>\n<h2 id=\"4-DockerFile\"><a href=\"#4-DockerFile\" class=\"headerlink\" title=\"4.DockerFile\"></a>4.DockerFile</h2><p>Dockerfile 是一个文本文件，其内包含了一条条的指令<code>(Instruction)</code>，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。我们可以根据实际的开发需求通过<code>dockerfile</code>来自定义镜像，JUST DO IT！</p>\n<h5 id=\"FROM-指令\"><a href=\"#FROM-指令\" class=\"headerlink\" title=\"FROM 指令\"></a>FROM 指令</h5><p>FROM &lt;image>:&lt;tag> 相当于建造一个大楼地基的选择，选择不同的地基来搭建不一样的大楼。</p>\n<ul>\n<li>操作系统类基础搭建例如 <code>ubuntu</code>、<code>dabin</code>、<code>centos</code></li>\n<li>开发语言作为基础搭建例如<code>java</code>、<code>nodejs</code>、<code>python</code> </li>\n<li>服务类镜像作为基础 <code>oralce</code>、<code>mysql</code>、<code>nginx</code>、<code>tomcat</code></li>\n<li>自定义混合类作为基础在其他自定义环境镜像基础上搭建</li>\n</ul>\n<p>所有的镜像地基都可以从docker库中拉取，选择合理的基础镜像可以让你更快的去构建你的镜像，省心省力。</p>\n<h4 id=\"RUN-指令\"><a href=\"#RUN-指令\" class=\"headerlink\" title=\"RUN 指令\"></a>RUN 指令</h4><p>RUN 就像是执行shell指令，常常用于更新安装需要的生产软件服务等。RUN有2种执行方式</p>\n<ul>\n<li>shell 格式： RUN &lt;命令&gt; ，就像直接在命令行中输入的命令一样：<code>RUN apt-get --update</code></li>\n<li>exec 格式： RUN [“可执行文件”, “参数1”, “参数2”]：<code>RUN [&quot;apt-get&quot;,&quot;--update&quot;]</code></li>\n</ul>\n<p><strong>注意</strong>：多行命令不要写多个<code>RUN</code>，原因是<code>Dockerfile</code>中每一个指令都会建立一层.多少个<code>RUN</code>就构建了多少层镜像，会造成镜像的臃肿多层，不仅仅增加了构件部署的时间，还容易出错。<code>RUN</code>书写时的换行符是<code>\\</code>，记得下载压缩软件操作完毕后<code>rm</code>不必要的软件压缩包和缓存让镜像更精简。</p>\n<h4 id=\"CMD-指令\"><a href=\"#CMD-指令\" class=\"headerlink\" title=\"CMD 指令\"></a>CMD 指令</h4><p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似也是两种格式，<code>CMD</code> 执行脚本在<code>dockerfile</code>只能存在一条，多条只执行最后一条，当有多个时只会执行最后一个，一般用于执行开启某些服务 <code>tomcat</code>、<code>oracle</code>、<code>nginx</code>等。</p>\n<h4 id=\"ENTRYPOINT-指令\"><a href=\"#ENTRYPOINT-指令\" class=\"headerlink\" title=\"ENTRYPOINT 指令\"></a>ENTRYPOINT 指令</h4><p><code>ENTRYPOINT</code> 执行脚本在<code>dockerfile</code>只能存在一条，多条只执行最后一条，容器启动后执行且不会被<code>docker run</code>提供的参数覆盖。</p>\n<h3 id=\"RUN-ENTRYPOINT-CMD-小结\"><a href=\"#RUN-ENTRYPOINT-CMD-小结\" class=\"headerlink\" title=\"RUN  ENTRYPOINT  CMD 小结\"></a>RUN  ENTRYPOINT  CMD 小结</h3><ul>\n<li><code>CMD</code> 和 <code>ENTRYPOINT</code> 推荐使用<code>Exec</code>格式，因为指令可读性更强，更容易理解。<code>RUN</code> 则两种格式都可以。</li>\n<li><code>RUN</code>用来执行脚本构建基础镜像，<code>CMD</code> <code>ENTRYPOINT</code> 用来构建完镜像容器启动后执行一些操作。</li>\n<li><code>CMD</code> 会被<code>docker run</code> 后的执行脚本覆盖不执行，<code>ENTRYPOINT</code> 则不会被覆盖始终会被执行，如果需要覆盖运行需要<code>–entrypoint</code>参数。</li>\n<li><code>ENTRYPOINT</code> 和 <code>CMD</code> 同时存在时谁在最后谁能执行，<code>CMD</code> 可作为 <code>ENTRYPOINT</code> 的执行参数灵活配合使用。</li>\n</ul>\n<h4 id=\"COPY-指令\"><a href=\"#COPY-指令\" class=\"headerlink\" title=\"COPY 指令\"></a>COPY 指令</h4><p>用于从上下文路径复制文件到容器目标路径中，<code>copy package.json /usr/src/app/</code> 把<code>package.json</code>复制到容器 <code>/usr/src/app</code>路径下</p>\n<ul>\n<li>COPY &lt;源路径&gt;… &lt;目标路径&gt;</li>\n<li>COPY [“&lt;源路径&gt;”，……，”&lt;目标路径&gt;”]  <code>......</code>代表若干源路径</li>\n</ul>\n<h4 id=\"ADD-指令\"><a href=\"#ADD-指令\" class=\"headerlink\" title=\"ADD 指令\"></a>ADD 指令</h4><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致，是在 <code>COPY</code> 基础上增加了一些功能。比如<code>&lt;源路径&gt;</code>可以是一个<code>URL</code>，这种情况下 Docker 引擎会试图去下载这个链接的文件放到<code>&lt;目标路径&gt;</code>去。如果<code>&lt;源路径&gt;</code>为一个<code>tar</code> 压缩文件的话，压缩格式为<code>gzip</code> , <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code>指令将会自动解压缩这个压缩文件到<code>&lt;目标路径&gt;</code>去。<code>ADD</code> 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢，<code>ADD</code> 还包含了一些复杂的的功能其行为也不一定清晰，所以官方推荐使用<code>COPY</code>来进行文件的复制。</p>\n<h4 id=\"ENV-指令\"><a href=\"#ENV-指令\" class=\"headerlink\" title=\"ENV 指令\"></a>ENV 指令</h4><p><code>ENV</code> 用于设置环境变量在后续的指令可以直接引用</p>\n<ul>\n<li>ENV &lt;key> &lt;value></li>\n<li>ENV &lt;key1>=&lt;value1> &lt;key2>=&lt;value2>…</li>\n</ul>\n<h5 id=\"Docker-build构建\"><a href=\"#Docker-build构建\" class=\"headerlink\" title=\"Docker build构建\"></a>Docker build构建</h5><p>所有的脚本编写完毕使用<code>docker bulid</code> 对 Dockerfile 进行构建，详细的命令如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#基于镜像 这里使用alpine 主要是体积小构建速度更快</span></span><br><span class=\"line\">FROM alpine</span><br><span class=\"line\"><span class=\"comment\">#构建维修者 </span></span><br><span class=\"line\">MAINTAINER 285635652@qq.com</span><br><span class=\"line\">RUN apt-get update /</span><br><span class=\"line\">  &amp;&amp; apt-get java</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>开发-&gt;部署测试-&gt;发布正式 在整体流程中每个人的开发环境可能各不相同、编译环境、运行环境。单机服务调整控制环境版本等可以保证发布一致性，但是如果当业务越来越庞大集群处理时需要部署多台机器时，可能每台机器的大大小小差异都会导致发布失败，处理起来非常麻烦。docker虚拟化来处理能保证发布环境一致性，可移植。通过docker 镜像你可以在任何版本linux服务器上进行发布。每个镜像就相当于个一个系统相互不影响独立环境。</p>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png\" alt=\"docker\"></p>\n<h2 id=\"1-Docker-介绍\"><a href=\"#1-Docker-介绍\" class=\"headerlink\" title=\"1.Docker 介绍\"></a>1.Docker 介绍</h2><p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p>\n<p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p>\n<p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>\n<h2 id=\"2-Docker-安装\"><a href=\"#2-Docker-安装\" class=\"headerlink\" title=\"2.Docker 安装\"></a>2.Docker 安装</h2><p>我的VPS用的Centos 7 那就用本版本记录搭建过程，docker的版本用CE社区版<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载yum-utils工具用于管理yum-config-manager可以配置源</span></span><br><span class=\"line\">yum install yum-utils</span><br><span class=\"line\"><span class=\"comment\">#添加docker-ce源</span></span><br><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"comment\">#查询docker-ce版本</span></span><br><span class=\"line\">yum list docker-ce --showduplicates | sort -r </span><br><span class=\"line\"><span class=\"comment\">#指定安装18.06.0 版本</span></span><br><span class=\"line\">yum install dock-ce-18.06.0.ce</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class=\"line\">=======</span><br></pre></td></tr></table></figure></p>\n<p>安装docker，默认是安装最高版本测试可以用，但是生产环境为了稳定尽量指定版本(stable稳定版)</p>\n<h2 id=\"3-Docker-常用命令\"><a href=\"#3-Docker-常用命令\" class=\"headerlink\" title=\"3.Docker 常用命令\"></a>3.Docker 常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 89e26ef27826ebc8a8b06014969c8ead3bb74a3e</span><br><span class=\"line\"><span class=\"comment\">#启动docker服务</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"><span class=\"comment\">#自动启动docker服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n<p>安装docker,默认是安装最高版本测试可以用，但是生产环境为了稳定尽量指定版本(<code>stable稳定版</code>)</p>\n<h2 id=\"3-Docker-镜像-容器\"><a href=\"#3-Docker-镜像-容器\" class=\"headerlink\" title=\"3.Docker 镜像 容器\"></a>3.Docker 镜像 容器</h2><h4 id=\"镜像查询拉取\"><a href=\"#镜像查询拉取\" class=\"headerlink\" title=\"镜像查询拉取\"></a>镜像查询拉取</h4><p>安装 docker 完毕，可以尝试安装一个镜像并运行，搜索镜像使用 <code>docker search [镜像名称]</code>,搜索的镜像 <code>OFFICAL</code> 标识的为官方镜像，其余的都是非官方人员自行构建的镜像并上传库共享。<br><img src=\"/images/docker-search.png\" alt=\"docker-search-alpine\"><br>使用 <code>docker pull alpine</code> 下载拉取alpine镜像,然后使用<code>docker images</code> 查看镜像已有镜像，这里以<code>alpine</code>为模板<br><img src=\"/images/docker-images.png\" alt=\"docker-images\"></p>\n<h4 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h4><p>基于alpine镜像启动一个容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd -p  8081:8081 --name myTest  alpine</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>-i：以交互模式运行容器，通常与 -t 同时使用</li>\n<li>-d: 后台运行容器，并返回容器ID</li>\n<li>-t : 为容器重新分配一个伪输入终端，通常与 -i 同时使用</li>\n<li>-p: 端口映射，格式为：主机(宿主)端口:容器端口 8080端口的访问转发到容器的8080端口上</li>\n<li>–name: 为容器指定一个容器名</li>\n<li>alpine：这是指用 <code>alpine</code> 镜像为基础来启动容器。</li>\n</ul>\n<p>启动完毕后 <code>docker ps</code> 查看正在运行的容器,  <code>docker ps -a</code> 查看容器。</p>\n<h4 id=\"容器操作\"><a href=\"#容器操作\" class=\"headerlink\" title=\"容器操作\"></a>容器操作</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##### myTest 为容器名称 ##### </span></span><br><span class=\"line\"><span class=\"comment\">#进行容器</span></span><br><span class=\"line\">docker attach myTest</span><br><span class=\"line\"><span class=\"comment\">#容器中执行脚本返回结果 (由于是alpine所以执行的)</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it myTest /bin/sh</span><br><span class=\"line\"><span class=\"comment\">#删除容器</span></span><br><span class=\"line\">docker rm myTest</span><br><span class=\"line\"><span class=\"comment\">#启动已有容器</span></span><br><span class=\"line\">docker start myTest</span><br><span class=\"line\"><span class=\"comment\">#停止容器</span></span><br><span class=\"line\">docker stop myTest</span><br></pre></td></tr></table></figure>\n<p>在容器中退出容器时需要注意的是通过<code>exit</code>返回宿主主机会导致容器直接停止并不是我们想要的结果，官方给出的退出容器并使其在后台继续运行使用 <code>ctrl+p+q</code> 安全退出不影响容器运行。 </p>\n<h2 id=\"4-DockerFile\"><a href=\"#4-DockerFile\" class=\"headerlink\" title=\"4.DockerFile\"></a>4.DockerFile</h2><p>Dockerfile 是一个文本文件，其内包含了一条条的指令<code>(Instruction)</code>，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。我们可以根据实际的开发需求通过<code>dockerfile</code>来自定义镜像，JUST DO IT！</p>\n<h5 id=\"FROM-指令\"><a href=\"#FROM-指令\" class=\"headerlink\" title=\"FROM 指令\"></a>FROM 指令</h5><p>FROM &lt;image>:&lt;tag> 相当于建造一个大楼地基的选择，选择不同的地基来搭建不一样的大楼。</p>\n<ul>\n<li>操作系统类基础搭建例如 <code>ubuntu</code>、<code>dabin</code>、<code>centos</code></li>\n<li>开发语言作为基础搭建例如<code>java</code>、<code>nodejs</code>、<code>python</code> </li>\n<li>服务类镜像作为基础 <code>oralce</code>、<code>mysql</code>、<code>nginx</code>、<code>tomcat</code></li>\n<li>自定义混合类作为基础在其他自定义环境镜像基础上搭建</li>\n</ul>\n<p>所有的镜像地基都可以从docker库中拉取，选择合理的基础镜像可以让你更快的去构建你的镜像，省心省力。</p>\n<h4 id=\"RUN-指令\"><a href=\"#RUN-指令\" class=\"headerlink\" title=\"RUN 指令\"></a>RUN 指令</h4><p>RUN 就像是执行shell指令，常常用于更新安装需要的生产软件服务等。RUN有2种执行方式</p>\n<ul>\n<li>shell 格式： RUN &lt;命令&gt; ，就像直接在命令行中输入的命令一样：<code>RUN apt-get --update</code></li>\n<li>exec 格式： RUN [“可执行文件”, “参数1”, “参数2”]：<code>RUN [&quot;apt-get&quot;,&quot;--update&quot;]</code></li>\n</ul>\n<p><strong>注意</strong>：多行命令不要写多个<code>RUN</code>，原因是<code>Dockerfile</code>中每一个指令都会建立一层.多少个<code>RUN</code>就构建了多少层镜像，会造成镜像的臃肿多层，不仅仅增加了构件部署的时间，还容易出错。<code>RUN</code>书写时的换行符是<code>\\</code>，记得下载压缩软件操作完毕后<code>rm</code>不必要的软件压缩包和缓存让镜像更精简。</p>\n<h4 id=\"CMD-指令\"><a href=\"#CMD-指令\" class=\"headerlink\" title=\"CMD 指令\"></a>CMD 指令</h4><p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似也是两种格式，<code>CMD</code> 执行脚本在<code>dockerfile</code>只能存在一条，多条只执行最后一条，当有多个时只会执行最后一个，一般用于执行开启某些服务 <code>tomcat</code>、<code>oracle</code>、<code>nginx</code>等。</p>\n<h4 id=\"ENTRYPOINT-指令\"><a href=\"#ENTRYPOINT-指令\" class=\"headerlink\" title=\"ENTRYPOINT 指令\"></a>ENTRYPOINT 指令</h4><p><code>ENTRYPOINT</code> 执行脚本在<code>dockerfile</code>只能存在一条，多条只执行最后一条，容器启动后执行且不会被<code>docker run</code>提供的参数覆盖。</p>\n<h3 id=\"RUN-ENTRYPOINT-CMD-小结\"><a href=\"#RUN-ENTRYPOINT-CMD-小结\" class=\"headerlink\" title=\"RUN  ENTRYPOINT  CMD 小结\"></a>RUN  ENTRYPOINT  CMD 小结</h3><ul>\n<li><code>CMD</code> 和 <code>ENTRYPOINT</code> 推荐使用<code>Exec</code>格式，因为指令可读性更强，更容易理解。<code>RUN</code> 则两种格式都可以。</li>\n<li><code>RUN</code>用来执行脚本构建基础镜像，<code>CMD</code> <code>ENTRYPOINT</code> 用来构建完镜像容器启动后执行一些操作。</li>\n<li><code>CMD</code> 会被<code>docker run</code> 后的执行脚本覆盖不执行，<code>ENTRYPOINT</code> 则不会被覆盖始终会被执行，如果需要覆盖运行需要<code>–entrypoint</code>参数。</li>\n<li><code>ENTRYPOINT</code> 和 <code>CMD</code> 同时存在时谁在最后谁能执行，<code>CMD</code> 可作为 <code>ENTRYPOINT</code> 的执行参数灵活配合使用。</li>\n</ul>\n<h4 id=\"COPY-指令\"><a href=\"#COPY-指令\" class=\"headerlink\" title=\"COPY 指令\"></a>COPY 指令</h4><p>用于从上下文路径复制文件到容器目标路径中，<code>copy package.json /usr/src/app/</code> 把<code>package.json</code>复制到容器 <code>/usr/src/app</code>路径下</p>\n<ul>\n<li>COPY &lt;源路径&gt;… &lt;目标路径&gt;</li>\n<li>COPY [“&lt;源路径&gt;”，……，”&lt;目标路径&gt;”]  <code>......</code>代表若干源路径</li>\n</ul>\n<h4 id=\"ADD-指令\"><a href=\"#ADD-指令\" class=\"headerlink\" title=\"ADD 指令\"></a>ADD 指令</h4><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致，是在 <code>COPY</code> 基础上增加了一些功能。比如<code>&lt;源路径&gt;</code>可以是一个<code>URL</code>，这种情况下 Docker 引擎会试图去下载这个链接的文件放到<code>&lt;目标路径&gt;</code>去。如果<code>&lt;源路径&gt;</code>为一个<code>tar</code> 压缩文件的话，压缩格式为<code>gzip</code> , <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code>指令将会自动解压缩这个压缩文件到<code>&lt;目标路径&gt;</code>去。<code>ADD</code> 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢，<code>ADD</code> 还包含了一些复杂的的功能其行为也不一定清晰，所以官方推荐使用<code>COPY</code>来进行文件的复制。</p>\n<h4 id=\"ENV-指令\"><a href=\"#ENV-指令\" class=\"headerlink\" title=\"ENV 指令\"></a>ENV 指令</h4><p><code>ENV</code> 用于设置环境变量在后续的指令可以直接引用</p>\n<ul>\n<li>ENV &lt;key> &lt;value></li>\n<li>ENV &lt;key1>=&lt;value1> &lt;key2>=&lt;value2>…</li>\n</ul>\n<h5 id=\"Docker-build构建\"><a href=\"#Docker-build构建\" class=\"headerlink\" title=\"Docker build构建\"></a>Docker build构建</h5><p>所有的脚本编写完毕使用<code>docker bulid</code> 对 Dockerfile 进行构建，详细的命令如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#基于镜像 这里使用alpine 主要是体积小构建速度更快</span></span><br><span class=\"line\">FROM alpine</span><br><span class=\"line\"><span class=\"comment\">#构建维修者 </span></span><br><span class=\"line\">MAINTAINER 285635652@qq.com</span><br><span class=\"line\">RUN apt-get update /</span><br><span class=\"line\">  &amp;&amp; apt-get java</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"JVM 基础概念","comments":1,"date":"2019-03-21T13:01:28.000Z","_content":"\n>JVM 复习基本概念学习和记录\n\n## 概述\n对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像C/C++程序开发程序员这样为内一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。\n\n## JVM 运行时候数据区域\nJava 虚拟机在执行 java 程序的过程中会把管理的内存划分为若干个不同的数据区域，JDK 1.8 和之前的版本有不同。\n![JDK 1.8之前内存划分](/images/JVM-1.8-before.png)\n![JDK 1.8版本的内存划分](/images/JVM-1.8-after.png)\n\n##### 线程私有的：\n- 程序计数器\n- 虚拟机栈\n- 本地方法栈\n\n##### 线程共享的：\n- 堆\n- 方法区\n- 直接内存（非运行数据区的一部分） \n\n### 程序计数器\n程序计数器（`Pargram Counter Register`）是一块很小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。 字节码解释器工作通过改变计数器的值来选择下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都依赖此计数器。多线程中每个线程都有一个计数器用来记录线程执行的位置，每个计数器之间相互不影响独立，独立存储，被称为“线程私有”的内存。\n\n__程序计数器是唯一一个不会出现`OutOfMemoryError`的内存区域，它的生命周期随着线程的创建才创建，结束而结束。__\n\n### 虚拟机栈\n Java 虚拟机栈（`Jasva Virtual Machine Stacks`）也是私有内存，它的生命周期和线程一样，描述的是 Java 方法执行的内存模型： 每个方法在执行的同时都会创建一个帧栈（`Stack Frame`）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每个方法的执行完成的过程对应着每个帧栈在虚拟栈中入栈到出栈的过程。\n\n __局部变量表__的主要存放了编译期可知的各种__基本数据类型__（`boolean`、`byte`、`char`、`short`、`int`、`float`、`long`、`double`）、对象引用（`reference`类型，不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）","source":"_posts/JVM基础概念.md","raw":"---\nlayout: post\ntitle: JVM 基础概念\ncategories: [Jvm]\ncomments: true\ndate: 2019-03-21 21:01:28\ntags:\n\t- Java\n\t- 技术\n---\n\n>JVM 复习基本概念学习和记录\n\n## 概述\n对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像C/C++程序开发程序员这样为内一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。\n\n## JVM 运行时候数据区域\nJava 虚拟机在执行 java 程序的过程中会把管理的内存划分为若干个不同的数据区域，JDK 1.8 和之前的版本有不同。\n![JDK 1.8之前内存划分](/images/JVM-1.8-before.png)\n![JDK 1.8版本的内存划分](/images/JVM-1.8-after.png)\n\n##### 线程私有的：\n- 程序计数器\n- 虚拟机栈\n- 本地方法栈\n\n##### 线程共享的：\n- 堆\n- 方法区\n- 直接内存（非运行数据区的一部分） \n\n### 程序计数器\n程序计数器（`Pargram Counter Register`）是一块很小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。 字节码解释器工作通过改变计数器的值来选择下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都依赖此计数器。多线程中每个线程都有一个计数器用来记录线程执行的位置，每个计数器之间相互不影响独立，独立存储，被称为“线程私有”的内存。\n\n__程序计数器是唯一一个不会出现`OutOfMemoryError`的内存区域，它的生命周期随着线程的创建才创建，结束而结束。__\n\n### 虚拟机栈\n Java 虚拟机栈（`Jasva Virtual Machine Stacks`）也是私有内存，它的生命周期和线程一样，描述的是 Java 方法执行的内存模型： 每个方法在执行的同时都会创建一个帧栈（`Stack Frame`）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每个方法的执行完成的过程对应着每个帧栈在虚拟栈中入栈到出栈的过程。\n\n __局部变量表__的主要存放了编译期可知的各种__基本数据类型__（`boolean`、`byte`、`char`、`short`、`int`、`float`、`long`、`double`）、对象引用（`reference`类型，不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）","slug":"JVM基础概念","published":1,"updated":"2019-03-27T02:35:20.122Z","_id":"cjtqldtze0004ysqurzi5034j","photos":[],"link":"","content":"<blockquote>\n<p>JVM 复习基本概念学习和记录</p>\n</blockquote>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像C/C++程序开发程序员这样为内一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。</p>\n<h2 id=\"JVM-运行时候数据区域\"><a href=\"#JVM-运行时候数据区域\" class=\"headerlink\" title=\"JVM 运行时候数据区域\"></a>JVM 运行时候数据区域</h2><p>Java 虚拟机在执行 java 程序的过程中会把管理的内存划分为若干个不同的数据区域，JDK 1.8 和之前的版本有不同。<br><img src=\"/images/JVM-1.8-before.png\" alt=\"JDK 1.8之前内存划分\"><br><img src=\"/images/JVM-1.8-after.png\" alt=\"JDK 1.8版本的内存划分\"></p>\n<h5 id=\"线程私有的：\"><a href=\"#线程私有的：\" class=\"headerlink\" title=\"线程私有的：\"></a>线程私有的：</h5><ul>\n<li>程序计数器</li>\n<li>虚拟机栈</li>\n<li>本地方法栈</li>\n</ul>\n<h5 id=\"线程共享的：\"><a href=\"#线程共享的：\" class=\"headerlink\" title=\"线程共享的：\"></a>线程共享的：</h5><ul>\n<li>堆</li>\n<li>方法区</li>\n<li>直接内存（非运行数据区的一部分） </li>\n</ul>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>程序计数器（<code>Pargram Counter Register</code>）是一块很小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。 字节码解释器工作通过改变计数器的值来选择下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都依赖此计数器。多线程中每个线程都有一个计数器用来记录线程执行的位置，每个计数器之间相互不影响独立，独立存储，被称为“线程私有”的内存。</p>\n<p><strong>程序计数器是唯一一个不会出现<code>OutOfMemoryError</code>的内存区域，它的生命周期随着线程的创建才创建，结束而结束。</strong></p>\n<h3 id=\"虚拟机栈\"><a href=\"#虚拟机栈\" class=\"headerlink\" title=\"虚拟机栈\"></a>虚拟机栈</h3><p> Java 虚拟机栈（<code>Jasva Virtual Machine Stacks</code>）也是私有内存，它的生命周期和线程一样，描述的是 Java 方法执行的内存模型： 每个方法在执行的同时都会创建一个帧栈（<code>Stack Frame</code>）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每个方法的执行完成的过程对应着每个帧栈在虚拟栈中入栈到出栈的过程。</p>\n<p> <strong>局部变量表</strong>的主要存放了编译期可知的各种<strong>基本数据类型</strong>（<code>boolean</code>、<code>byte</code>、<code>char</code>、<code>short</code>、<code>int</code>、<code>float</code>、<code>long</code>、<code>double</code>）、对象引用（<code>reference</code>类型，不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>JVM 复习基本概念学习和记录</p>\n</blockquote>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像C/C++程序开发程序员这样为内一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。</p>\n<h2 id=\"JVM-运行时候数据区域\"><a href=\"#JVM-运行时候数据区域\" class=\"headerlink\" title=\"JVM 运行时候数据区域\"></a>JVM 运行时候数据区域</h2><p>Java 虚拟机在执行 java 程序的过程中会把管理的内存划分为若干个不同的数据区域，JDK 1.8 和之前的版本有不同。<br><img src=\"/images/JVM-1.8-before.png\" alt=\"JDK 1.8之前内存划分\"><br><img src=\"/images/JVM-1.8-after.png\" alt=\"JDK 1.8版本的内存划分\"></p>\n<h5 id=\"线程私有的：\"><a href=\"#线程私有的：\" class=\"headerlink\" title=\"线程私有的：\"></a>线程私有的：</h5><ul>\n<li>程序计数器</li>\n<li>虚拟机栈</li>\n<li>本地方法栈</li>\n</ul>\n<h5 id=\"线程共享的：\"><a href=\"#线程共享的：\" class=\"headerlink\" title=\"线程共享的：\"></a>线程共享的：</h5><ul>\n<li>堆</li>\n<li>方法区</li>\n<li>直接内存（非运行数据区的一部分） </li>\n</ul>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>程序计数器（<code>Pargram Counter Register</code>）是一块很小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。 字节码解释器工作通过改变计数器的值来选择下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都依赖此计数器。多线程中每个线程都有一个计数器用来记录线程执行的位置，每个计数器之间相互不影响独立，独立存储，被称为“线程私有”的内存。</p>\n<p><strong>程序计数器是唯一一个不会出现<code>OutOfMemoryError</code>的内存区域，它的生命周期随着线程的创建才创建，结束而结束。</strong></p>\n<h3 id=\"虚拟机栈\"><a href=\"#虚拟机栈\" class=\"headerlink\" title=\"虚拟机栈\"></a>虚拟机栈</h3><p> Java 虚拟机栈（<code>Jasva Virtual Machine Stacks</code>）也是私有内存，它的生命周期和线程一样，描述的是 Java 方法执行的内存模型： 每个方法在执行的同时都会创建一个帧栈（<code>Stack Frame</code>）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每个方法的执行完成的过程对应着每个帧栈在虚拟栈中入栈到出栈的过程。</p>\n<p> <strong>局部变量表</strong>的主要存放了编译期可知的各种<strong>基本数据类型</strong>（<code>boolean</code>、<code>byte</code>、<code>char</code>、<code>short</code>、<code>int</code>、<code>float</code>、<code>long</code>、<code>double</code>）、对象引用（<code>reference</code>类型，不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）</p>\n"},{"title":"Hexo部署到VPS自动发布","date":"2018-07-26T07:02:30.000Z","_content":"\n![Linux](/images/linux-1.jpg)\n\n> Hexo部署到github访问的速度较慢，所以想着把Hexo直接丢在自己VPS上去，部署一套git环境以后方便自动发布更新\n\n## 1.Git 安装\n``` bash\n#通常使用的方法下载git\nyum -y install git\n#查看版本 这种下载一般不是最新的版本\nyum --version\n```\n发现并不是最新版本逼死强迫症啊，只能通过下载最新git源码自行编译安装。\nGit 的工作需要调用 `curl`，`zlib`，`openssl`，`expat`，`libiconv` 等库的代码，所以需要先安装这些依赖工具。在有 `yum` 的系统上（比如 Fedora）或者有 `apt-get` 的系统上（比如 Debian 体系），可以用   下面的命令安装：\n\n``` bash\n#卸载旧版本git\nyum remove git\n#安装依赖环境\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n#安装编译工具\nyum install  gcc perl-ExtUtils-MakeMaker\n#下载最新版git\nwget https://github.com/git/git/archive/v2.19.1.tar.gz\n#解压\ntar -zxvf v2.18.0.tar.gz\n#进入解压文件夹\ncd git-2.18.0\n#编译代码 perfix这里为赋值变量\nmake prefix=/usr/local/git all\n#安装软件 \nmake prefix=/usr/local/git install\n#清除编译数据\nmake clean all\n#环境变量配置\necho export PATH=$PATH:/usr/local/git/bin >>/etc/bashrc\n#生效环境变量\nsource /etc/bashrc\n```\n>/etc/profile，/etc/bashrc 是系统全局环境变量设定 ~/.profile，~/.bashrc用户家目录下的私有环境变量设定\n\n## 2.创建 git 仓库\n创建一个git库用来存放Hexo生成的html静态文件和相关资源，然后通过 post-receive 钩子函数进行自动执行脚本讲生成的资源checkout发布到nginx达到自动发布更新的功能。\n``` bash\n#创建git用户\nadduser git\n#设置密码\npasswd git\n#创建Hexo博客库 目录自行选择\nmkdir laochenpiBlog && chown git:git laochenpiBlog\n#laochenpiBlog目录下创建blog.git  --bare裸仓库 没有工作空间\ngit init --bare blog.git && chown git:git -R blog.git \n#laochenpiBlog 目录下创建静态网页库 \nmkdir blog.site && chown git:git blog.site\n#进入钩子函数目录\ncd hooks/\n#创建钩子函数文件\ntouch post-receive && chown git:git post-receive && chmod 755 post-receive\n```\n为Hexo编写自动化脚本在仓库hooks创建脚本 `vi post-receive` ，脚本会在git有收发的时候就会调用执行\n```\ngit --work-tree=/var/laochenpiBlog/blog.site --git-dir=/var/laochenpiBlog/blog.git checkout -f\n```\n\n## 3.Hexo 配置发布测试\n终于把Git环境弄好了，现在就需要修改配置文件`_config.yml` 中的发布项\n``` xml\n#Deployment\n## repo  为你的vps创建的库地址\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo : git@45.77.87.214:/var/laochenpiBlog/blog.git\n  branch: master\n```\n修改完毕，见证奇迹的时候到了，找到自己博客目录下用 `git bash`  发布\n ```\n #清除缓存  重编译  发布\n hexo clean && hexo g && hexo d\n ```\n ![OpenSSH](/images/passwd.png)\n 输入密码发布完毕，然后远程上你的VPS查看下你的 `blog.site` 是否自动 `check out`了最新发布的内容了。\n\n## 4.Git 免密发布\n每次发布都需要输入密码实在是太麻烦了而且在有可能泄露密码引起安全问题，有什么比较方面安全的方式呢，通过google一波发现可以通过秘钥的形式实现无密码发布登录。\n\n秘钥方式通过RSA加密生成公有秘钥，然后把公有秘钥提交到VPS 上的秘钥认证文件中 `authroized_keys`，修改 OpenSSH 客户端的配置 `sshd_config`  实现RSA秘钥认证方式。\n\n那么我们开始吧！\n\n- ##### 服务器端 \n修改 OpenSSH 认证 ` vi /etc/ssh/sshd_config ` \n开启公钥认证 `PubkeyAuthentication yes`   \n认证Keys文件目录 用户/.ssh/文件名 `AuthorizedKeysFile      .ssh/authorized_keys`  \nRSA加密认证 `RSAAuthentication yes` \n``\n\n这里要提示一点 Centos 7 和 Centos 6 遇到的问题，Centos 7 由于OpenSSH版本原因 RSAAuthentication 已经弃用，无需添加修改.\n```\n#用户提交的git用户的秘钥文件夹创建和权限分配#\n——————————————————————————————————————\n#创建认证文件authorized_keys\ntouch /home/git/.ssh/authorized_keys\n#.ssh权限 700 authorize_keys 权限600\nchmod 700 /home/git/.ssh && chmod 600 /home/git/.ssh/authorize_keys\n```\n这里要注意 `.ssh` 和 `authorize_keys` 的权限问题，可能在加密认证的时候由于权限导致失败，SSH登录日志可以用 `tail /var/log/secure` 查看，`sshd -t`进行查看配置是否正常 需要在~目录下执行，执行`systemctl restart sshd` 重启 `SSH`服务\n\n- ##### 客户端 \n`ssh-keygen -t rsa -C userName`  生成秘钥文件，地址一般在 `~/.ssh` 中。\n`id_rsa` 加密公钥 ` id_rsa.pub` 加密公钥  多用户用`cat` 追加秘钥到认证文件中\n\n``` bash\n#上传认证秘钥到服务器上 对应用户的authorized_keys中\ncat ~/.ssh/id_rsa.pub | ssh git@45.77.87.214 \"cat - >> /home/git/.ssh/authorized_keys\"\n```\n配置完毕后使用 `ssh -vvT git@45.77.87.214` 看看是不是不用密码就可以登录VPS了，然后发布就再也不用密码了，一条命令就OK。\n\n## 5.  Nginx配置映射\n终于到最后一步了，就差最后一步配置 Nginx 服务映射静态文件了。\n``` bash\n#Centos yum源安装\nyum install nginx\n#启动nginx服务\nsystemctl start nginx\n#查看服务状态\nsystemctl status nginx -l\n```\n这里有可能出现的问题：\n1.无法从外网访问 检查下80端口是否开启，添加80端口`firewall-cmd --permanent --zone=public --add-port=80/tcp --permanent` 和 `firewall-cmd --reload` 重载配置\n2.服务可能没有启动成功，排查下配置问题\n\n修改80端口默认映射库地址，`nginx -t`查看nginx配置文件地址  \n\n![nginx configuration file path](/images/nginx.png)\n``` bash\n#停止Nginx服务\nsystemctl stop nginx\n#修改Nginx的配置文件root\nvi /etc/nginx/nginx_conf\n#修改 root 配置hexo静态文件地址，即之前创建的静态文件地址\nroot [hexo静态文件地址]\n#修改完毕退出 重启Nginx服务\nsystemctl start nginx\n```\n修改完毕启动好服务然后通过外网访问你 VPS IP地址即可访问，大功告成以后可以在任意地方通过git提交的方式进行自动发布。请记得随时备份自己的重要文件以免丢失！\n\n## 遇到的问题\n已配置秘钥但是SSH还是需要密码，相信很多小伙伴都遇到过，下面是可能原因\n1. 查看sshd_config 配置文件是否正确开启了3个认证配置，更改后重启OpenSSH服务\n2. 查看下ssh登录日志 排查下原因，可能是认证文件目录权限问题，`.shh 700 ` `authorized_key 600 ` 过大或者过小的权限都有可能导致认证是失败。\n3. `authorized_key` 中秘钥千万千万不要直接从客户端直接复制过来，可能会有空格和其他转义一些特殊情况导致秘钥不正确。可通过 `cat`或`scp` 命令远程进行上传秘钥保证正确性。\n4. Centos 7 版本的 `OpenSSH` RSAAuthentication已经弃用无需设置、添加该设置可能导致启动异常。\n","source":"_posts/Hexo部署到VPS自动发布.md","raw":"---\ntitle: Hexo部署到VPS自动发布\ndate: 2018-07-26 15:02:30\ncategories: [技术]\ntag : \n    - Linux\n---\n\n![Linux](/images/linux-1.jpg)\n\n> Hexo部署到github访问的速度较慢，所以想着把Hexo直接丢在自己VPS上去，部署一套git环境以后方便自动发布更新\n\n## 1.Git 安装\n``` bash\n#通常使用的方法下载git\nyum -y install git\n#查看版本 这种下载一般不是最新的版本\nyum --version\n```\n发现并不是最新版本逼死强迫症啊，只能通过下载最新git源码自行编译安装。\nGit 的工作需要调用 `curl`，`zlib`，`openssl`，`expat`，`libiconv` 等库的代码，所以需要先安装这些依赖工具。在有 `yum` 的系统上（比如 Fedora）或者有 `apt-get` 的系统上（比如 Debian 体系），可以用   下面的命令安装：\n\n``` bash\n#卸载旧版本git\nyum remove git\n#安装依赖环境\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n#安装编译工具\nyum install  gcc perl-ExtUtils-MakeMaker\n#下载最新版git\nwget https://github.com/git/git/archive/v2.19.1.tar.gz\n#解压\ntar -zxvf v2.18.0.tar.gz\n#进入解压文件夹\ncd git-2.18.0\n#编译代码 perfix这里为赋值变量\nmake prefix=/usr/local/git all\n#安装软件 \nmake prefix=/usr/local/git install\n#清除编译数据\nmake clean all\n#环境变量配置\necho export PATH=$PATH:/usr/local/git/bin >>/etc/bashrc\n#生效环境变量\nsource /etc/bashrc\n```\n>/etc/profile，/etc/bashrc 是系统全局环境变量设定 ~/.profile，~/.bashrc用户家目录下的私有环境变量设定\n\n## 2.创建 git 仓库\n创建一个git库用来存放Hexo生成的html静态文件和相关资源，然后通过 post-receive 钩子函数进行自动执行脚本讲生成的资源checkout发布到nginx达到自动发布更新的功能。\n``` bash\n#创建git用户\nadduser git\n#设置密码\npasswd git\n#创建Hexo博客库 目录自行选择\nmkdir laochenpiBlog && chown git:git laochenpiBlog\n#laochenpiBlog目录下创建blog.git  --bare裸仓库 没有工作空间\ngit init --bare blog.git && chown git:git -R blog.git \n#laochenpiBlog 目录下创建静态网页库 \nmkdir blog.site && chown git:git blog.site\n#进入钩子函数目录\ncd hooks/\n#创建钩子函数文件\ntouch post-receive && chown git:git post-receive && chmod 755 post-receive\n```\n为Hexo编写自动化脚本在仓库hooks创建脚本 `vi post-receive` ，脚本会在git有收发的时候就会调用执行\n```\ngit --work-tree=/var/laochenpiBlog/blog.site --git-dir=/var/laochenpiBlog/blog.git checkout -f\n```\n\n## 3.Hexo 配置发布测试\n终于把Git环境弄好了，现在就需要修改配置文件`_config.yml` 中的发布项\n``` xml\n#Deployment\n## repo  为你的vps创建的库地址\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo : git@45.77.87.214:/var/laochenpiBlog/blog.git\n  branch: master\n```\n修改完毕，见证奇迹的时候到了，找到自己博客目录下用 `git bash`  发布\n ```\n #清除缓存  重编译  发布\n hexo clean && hexo g && hexo d\n ```\n ![OpenSSH](/images/passwd.png)\n 输入密码发布完毕，然后远程上你的VPS查看下你的 `blog.site` 是否自动 `check out`了最新发布的内容了。\n\n## 4.Git 免密发布\n每次发布都需要输入密码实在是太麻烦了而且在有可能泄露密码引起安全问题，有什么比较方面安全的方式呢，通过google一波发现可以通过秘钥的形式实现无密码发布登录。\n\n秘钥方式通过RSA加密生成公有秘钥，然后把公有秘钥提交到VPS 上的秘钥认证文件中 `authroized_keys`，修改 OpenSSH 客户端的配置 `sshd_config`  实现RSA秘钥认证方式。\n\n那么我们开始吧！\n\n- ##### 服务器端 \n修改 OpenSSH 认证 ` vi /etc/ssh/sshd_config ` \n开启公钥认证 `PubkeyAuthentication yes`   \n认证Keys文件目录 用户/.ssh/文件名 `AuthorizedKeysFile      .ssh/authorized_keys`  \nRSA加密认证 `RSAAuthentication yes` \n``\n\n这里要提示一点 Centos 7 和 Centos 6 遇到的问题，Centos 7 由于OpenSSH版本原因 RSAAuthentication 已经弃用，无需添加修改.\n```\n#用户提交的git用户的秘钥文件夹创建和权限分配#\n——————————————————————————————————————\n#创建认证文件authorized_keys\ntouch /home/git/.ssh/authorized_keys\n#.ssh权限 700 authorize_keys 权限600\nchmod 700 /home/git/.ssh && chmod 600 /home/git/.ssh/authorize_keys\n```\n这里要注意 `.ssh` 和 `authorize_keys` 的权限问题，可能在加密认证的时候由于权限导致失败，SSH登录日志可以用 `tail /var/log/secure` 查看，`sshd -t`进行查看配置是否正常 需要在~目录下执行，执行`systemctl restart sshd` 重启 `SSH`服务\n\n- ##### 客户端 \n`ssh-keygen -t rsa -C userName`  生成秘钥文件，地址一般在 `~/.ssh` 中。\n`id_rsa` 加密公钥 ` id_rsa.pub` 加密公钥  多用户用`cat` 追加秘钥到认证文件中\n\n``` bash\n#上传认证秘钥到服务器上 对应用户的authorized_keys中\ncat ~/.ssh/id_rsa.pub | ssh git@45.77.87.214 \"cat - >> /home/git/.ssh/authorized_keys\"\n```\n配置完毕后使用 `ssh -vvT git@45.77.87.214` 看看是不是不用密码就可以登录VPS了，然后发布就再也不用密码了，一条命令就OK。\n\n## 5.  Nginx配置映射\n终于到最后一步了，就差最后一步配置 Nginx 服务映射静态文件了。\n``` bash\n#Centos yum源安装\nyum install nginx\n#启动nginx服务\nsystemctl start nginx\n#查看服务状态\nsystemctl status nginx -l\n```\n这里有可能出现的问题：\n1.无法从外网访问 检查下80端口是否开启，添加80端口`firewall-cmd --permanent --zone=public --add-port=80/tcp --permanent` 和 `firewall-cmd --reload` 重载配置\n2.服务可能没有启动成功，排查下配置问题\n\n修改80端口默认映射库地址，`nginx -t`查看nginx配置文件地址  \n\n![nginx configuration file path](/images/nginx.png)\n``` bash\n#停止Nginx服务\nsystemctl stop nginx\n#修改Nginx的配置文件root\nvi /etc/nginx/nginx_conf\n#修改 root 配置hexo静态文件地址，即之前创建的静态文件地址\nroot [hexo静态文件地址]\n#修改完毕退出 重启Nginx服务\nsystemctl start nginx\n```\n修改完毕启动好服务然后通过外网访问你 VPS IP地址即可访问，大功告成以后可以在任意地方通过git提交的方式进行自动发布。请记得随时备份自己的重要文件以免丢失！\n\n## 遇到的问题\n已配置秘钥但是SSH还是需要密码，相信很多小伙伴都遇到过，下面是可能原因\n1. 查看sshd_config 配置文件是否正确开启了3个认证配置，更改后重启OpenSSH服务\n2. 查看下ssh登录日志 排查下原因，可能是认证文件目录权限问题，`.shh 700 ` `authorized_key 600 ` 过大或者过小的权限都有可能导致认证是失败。\n3. `authorized_key` 中秘钥千万千万不要直接从客户端直接复制过来，可能会有空格和其他转义一些特殊情况导致秘钥不正确。可通过 `cat`或`scp` 命令远程进行上传秘钥保证正确性。\n4. Centos 7 版本的 `OpenSSH` RSAAuthentication已经弃用无需设置、添加该设置可能导致启动异常。\n","slug":"Hexo部署到VPS自动发布","published":1,"updated":"2019-03-27T02:16:16.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldtzg0005ysqu5zqb27l6","content":"<p><img src=\"/images/linux-1.jpg\" alt=\"Linux\"></p>\n<blockquote>\n<p>Hexo部署到github访问的速度较慢，所以想着把Hexo直接丢在自己VPS上去，部署一套git环境以后方便自动发布更新</p>\n</blockquote>\n<h2 id=\"1-Git-安装\"><a href=\"#1-Git-安装\" class=\"headerlink\" title=\"1.Git 安装\"></a>1.Git 安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#通常使用的方法下载git</span></span><br><span class=\"line\">yum -y install git</span><br><span class=\"line\"><span class=\"comment\">#查看版本 这种下载一般不是最新的版本</span></span><br><span class=\"line\">yum --version</span><br></pre></td></tr></table></figure>\n<p>发现并不是最新版本逼死强迫症啊，只能通过下载最新git源码自行编译安装。<br>Git 的工作需要调用 <code>curl</code>，<code>zlib</code>，<code>openssl</code>，<code>expat</code>，<code>libiconv</code> 等库的代码，所以需要先安装这些依赖工具。在有 <code>yum</code> 的系统上（比如 Fedora）或者有 <code>apt-get</code> 的系统上（比如 Debian 体系），可以用   下面的命令安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#卸载旧版本git</span></span><br><span class=\"line\">yum remove git</span><br><span class=\"line\"><span class=\"comment\">#安装依赖环境</span></span><br><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\"><span class=\"comment\">#安装编译工具</span></span><br><span class=\"line\">yum install  gcc perl-ExtUtils-MakeMaker</span><br><span class=\"line\"><span class=\"comment\">#下载最新版git</span></span><br><span class=\"line\">wget https://github.com/git/git/archive/v2.19.1.tar.gz</span><br><span class=\"line\"><span class=\"comment\">#解压</span></span><br><span class=\"line\">tar -zxvf v2.18.0.tar.gz</span><br><span class=\"line\"><span class=\"comment\">#进入解压文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> git-2.18.0</span><br><span class=\"line\"><span class=\"comment\">#编译代码 perfix这里为赋值变量</span></span><br><span class=\"line\">make prefix=/usr/<span class=\"built_in\">local</span>/git all</span><br><span class=\"line\"><span class=\"comment\">#安装软件 </span></span><br><span class=\"line\">make prefix=/usr/<span class=\"built_in\">local</span>/git install</span><br><span class=\"line\"><span class=\"comment\">#清除编译数据</span></span><br><span class=\"line\">make clean all</span><br><span class=\"line\"><span class=\"comment\">#环境变量配置</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/git/bin &gt;&gt;/etc/bashrc</span><br><span class=\"line\"><span class=\"comment\">#生效环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>/etc/profile，/etc/bashrc 是系统全局环境变量设定 ~/.profile，~/.bashrc用户家目录下的私有环境变量设定</p>\n</blockquote>\n<h2 id=\"2-创建-git-仓库\"><a href=\"#2-创建-git-仓库\" class=\"headerlink\" title=\"2.创建 git 仓库\"></a>2.创建 git 仓库</h2><p>创建一个git库用来存放Hexo生成的html静态文件和相关资源，然后通过 post-receive 钩子函数进行自动执行脚本讲生成的资源checkout发布到nginx达到自动发布更新的功能。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建git用户</span></span><br><span class=\"line\">adduser git</span><br><span class=\"line\"><span class=\"comment\">#设置密码</span></span><br><span class=\"line\">passwd git</span><br><span class=\"line\"><span class=\"comment\">#创建Hexo博客库 目录自行选择</span></span><br><span class=\"line\">mkdir laochenpiBlog &amp;&amp; chown git:git laochenpiBlog</span><br><span class=\"line\"><span class=\"comment\">#laochenpiBlog目录下创建blog.git  --bare裸仓库 没有工作空间</span></span><br><span class=\"line\">git init --bare blog.git &amp;&amp; chown git:git -R blog.git </span><br><span class=\"line\"><span class=\"comment\">#laochenpiBlog 目录下创建静态网页库 </span></span><br><span class=\"line\">mkdir blog.site &amp;&amp; chown git:git blog.site</span><br><span class=\"line\"><span class=\"comment\">#进入钩子函数目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> hooks/</span><br><span class=\"line\"><span class=\"comment\">#创建钩子函数文件</span></span><br><span class=\"line\">touch post-receive &amp;&amp; chown git:git post-receive &amp;&amp; chmod 755 post-receive</span><br></pre></td></tr></table></figure></p>\n<p>为Hexo编写自动化脚本在仓库hooks创建脚本 <code>vi post-receive</code> ，脚本会在git有收发的时候就会调用执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --work-tree=/var/laochenpiBlog/blog.site --git-dir=/var/laochenpiBlog/blog.git checkout -f</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-Hexo-配置发布测试\"><a href=\"#3-Hexo-配置发布测试\" class=\"headerlink\" title=\"3.Hexo 配置发布测试\"></a>3.Hexo 配置发布测试</h2><p>终于把Git环境弄好了，现在就需要修改配置文件<code>_config.yml</code> 中的发布项<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Deployment</span><br><span class=\"line\">## repo  为你的vps创建的库地址</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo : git@45.77.87.214:/var/laochenpiBlog/blog.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p>修改完毕，见证奇迹的时候到了，找到自己博客目录下用 <code>git bash</code>  发布<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#清除缓存  重编译  发布</span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p>\n<p> <img src=\"/images/passwd.png\" alt=\"OpenSSH\"><br> 输入密码发布完毕，然后远程上你的VPS查看下你的 <code>blog.site</code> 是否自动 <code>check out</code>了最新发布的内容了。</p>\n<h2 id=\"4-Git-免密发布\"><a href=\"#4-Git-免密发布\" class=\"headerlink\" title=\"4.Git 免密发布\"></a>4.Git 免密发布</h2><p>每次发布都需要输入密码实在是太麻烦了而且在有可能泄露密码引起安全问题，有什么比较方面安全的方式呢，通过google一波发现可以通过秘钥的形式实现无密码发布登录。</p>\n<p>秘钥方式通过RSA加密生成公有秘钥，然后把公有秘钥提交到VPS 上的秘钥认证文件中 <code>authroized_keys</code>，修改 OpenSSH 客户端的配置 <code>sshd_config</code>  实现RSA秘钥认证方式。</p>\n<p>那么我们开始吧！</p>\n<ul>\n<li><h5 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h5>修改 OpenSSH 认证 <code>vi /etc/ssh/sshd_config</code><br>开启公钥认证 <code>PubkeyAuthentication yes</code><br>认证Keys文件目录 用户/.ssh/文件名 <code>AuthorizedKeysFile      .ssh/authorized_keys</code><br>RSA加密认证 <code>RSAAuthentication yes</code><br><code></code></li>\n</ul>\n<p>这里要提示一点 Centos 7 和 Centos 6 遇到的问题，Centos 7 由于OpenSSH版本原因 RSAAuthentication 已经弃用，无需添加修改.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#用户提交的git用户的秘钥文件夹创建和权限分配#</span><br><span class=\"line\">——————————————————————————————————————</span><br><span class=\"line\">#创建认证文件authorized_keys</span><br><span class=\"line\">touch /home/git/.ssh/authorized_keys</span><br><span class=\"line\">#.ssh权限 700 authorize_keys 权限600</span><br><span class=\"line\">chmod 700 /home/git/.ssh &amp;&amp; chmod 600 /home/git/.ssh/authorize_keys</span><br></pre></td></tr></table></figure></p>\n<p>这里要注意 <code>.ssh</code> 和 <code>authorize_keys</code> 的权限问题，可能在加密认证的时候由于权限导致失败，SSH登录日志可以用 <code>tail /var/log/secure</code> 查看，<code>sshd -t</code>进行查看配置是否正常 需要在~目录下执行，执行<code>systemctl restart sshd</code> 重启 <code>SSH</code>服务</p>\n<ul>\n<li><h5 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h5><code>ssh-keygen -t rsa -C userName</code>  生成秘钥文件，地址一般在 <code>~/.ssh</code> 中。<br><code>id_rsa</code> 加密公钥 <code>id_rsa.pub</code> 加密公钥  多用户用<code>cat</code> 追加秘钥到认证文件中</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#上传认证秘钥到服务器上 对应用户的authorized_keys中</span></span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub | ssh git@45.77.87.214 <span class=\"string\">\"cat - &gt;&gt; /home/git/.ssh/authorized_keys\"</span></span><br></pre></td></tr></table></figure>\n<p>配置完毕后使用 <code>ssh -vvT git@45.77.87.214</code> 看看是不是不用密码就可以登录VPS了，然后发布就再也不用密码了，一条命令就OK。</p>\n<h2 id=\"5-Nginx配置映射\"><a href=\"#5-Nginx配置映射\" class=\"headerlink\" title=\"5.  Nginx配置映射\"></a>5.  Nginx配置映射</h2><p>终于到最后一步了，就差最后一步配置 Nginx 服务映射静态文件了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Centos yum源安装</span></span><br><span class=\"line\">yum install nginx</span><br><span class=\"line\"><span class=\"comment\">#启动nginx服务</span></span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\"><span class=\"comment\">#查看服务状态</span></span><br><span class=\"line\">systemctl status nginx -l</span><br></pre></td></tr></table></figure></p>\n<p>这里有可能出现的问题：<br>1.无法从外网访问 检查下80端口是否开启，添加80端口<code>firewall-cmd --permanent --zone=public --add-port=80/tcp --permanent</code> 和 <code>firewall-cmd --reload</code> 重载配置<br>2.服务可能没有启动成功，排查下配置问题</p>\n<p>修改80端口默认映射库地址，<code>nginx -t</code>查看nginx配置文件地址  </p>\n<p><img src=\"/images/nginx.png\" alt=\"nginx configuration file path\"><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#停止Nginx服务</span></span><br><span class=\"line\">systemctl stop nginx</span><br><span class=\"line\"><span class=\"comment\">#修改Nginx的配置文件root</span></span><br><span class=\"line\">vi /etc/nginx/nginx_conf</span><br><span class=\"line\"><span class=\"comment\">#修改 root 配置hexo静态文件地址，即之前创建的静态文件地址</span></span><br><span class=\"line\">root [hexo静态文件地址]</span><br><span class=\"line\"><span class=\"comment\">#修改完毕退出 重启Nginx服务</span></span><br><span class=\"line\">systemctl start nginx</span><br></pre></td></tr></table></figure></p>\n<p>修改完毕启动好服务然后通过外网访问你 VPS IP地址即可访问，大功告成以后可以在任意地方通过git提交的方式进行自动发布。请记得随时备份自己的重要文件以免丢失！</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>已配置秘钥但是SSH还是需要密码，相信很多小伙伴都遇到过，下面是可能原因</p>\n<ol>\n<li>查看sshd_config 配置文件是否正确开启了3个认证配置，更改后重启OpenSSH服务</li>\n<li>查看下ssh登录日志 排查下原因，可能是认证文件目录权限问题，<code>.shh 700</code> <code>authorized_key 600</code> 过大或者过小的权限都有可能导致认证是失败。</li>\n<li><code>authorized_key</code> 中秘钥千万千万不要直接从客户端直接复制过来，可能会有空格和其他转义一些特殊情况导致秘钥不正确。可通过 <code>cat</code>或<code>scp</code> 命令远程进行上传秘钥保证正确性。</li>\n<li>Centos 7 版本的 <code>OpenSSH</code> RSAAuthentication已经弃用无需设置、添加该设置可能导致启动异常。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/linux-1.jpg\" alt=\"Linux\"></p>\n<blockquote>\n<p>Hexo部署到github访问的速度较慢，所以想着把Hexo直接丢在自己VPS上去，部署一套git环境以后方便自动发布更新</p>\n</blockquote>\n<h2 id=\"1-Git-安装\"><a href=\"#1-Git-安装\" class=\"headerlink\" title=\"1.Git 安装\"></a>1.Git 安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#通常使用的方法下载git</span></span><br><span class=\"line\">yum -y install git</span><br><span class=\"line\"><span class=\"comment\">#查看版本 这种下载一般不是最新的版本</span></span><br><span class=\"line\">yum --version</span><br></pre></td></tr></table></figure>\n<p>发现并不是最新版本逼死强迫症啊，只能通过下载最新git源码自行编译安装。<br>Git 的工作需要调用 <code>curl</code>，<code>zlib</code>，<code>openssl</code>，<code>expat</code>，<code>libiconv</code> 等库的代码，所以需要先安装这些依赖工具。在有 <code>yum</code> 的系统上（比如 Fedora）或者有 <code>apt-get</code> 的系统上（比如 Debian 体系），可以用   下面的命令安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#卸载旧版本git</span></span><br><span class=\"line\">yum remove git</span><br><span class=\"line\"><span class=\"comment\">#安装依赖环境</span></span><br><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\"><span class=\"comment\">#安装编译工具</span></span><br><span class=\"line\">yum install  gcc perl-ExtUtils-MakeMaker</span><br><span class=\"line\"><span class=\"comment\">#下载最新版git</span></span><br><span class=\"line\">wget https://github.com/git/git/archive/v2.19.1.tar.gz</span><br><span class=\"line\"><span class=\"comment\">#解压</span></span><br><span class=\"line\">tar -zxvf v2.18.0.tar.gz</span><br><span class=\"line\"><span class=\"comment\">#进入解压文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> git-2.18.0</span><br><span class=\"line\"><span class=\"comment\">#编译代码 perfix这里为赋值变量</span></span><br><span class=\"line\">make prefix=/usr/<span class=\"built_in\">local</span>/git all</span><br><span class=\"line\"><span class=\"comment\">#安装软件 </span></span><br><span class=\"line\">make prefix=/usr/<span class=\"built_in\">local</span>/git install</span><br><span class=\"line\"><span class=\"comment\">#清除编译数据</span></span><br><span class=\"line\">make clean all</span><br><span class=\"line\"><span class=\"comment\">#环境变量配置</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/git/bin &gt;&gt;/etc/bashrc</span><br><span class=\"line\"><span class=\"comment\">#生效环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>/etc/profile，/etc/bashrc 是系统全局环境变量设定 ~/.profile，~/.bashrc用户家目录下的私有环境变量设定</p>\n</blockquote>\n<h2 id=\"2-创建-git-仓库\"><a href=\"#2-创建-git-仓库\" class=\"headerlink\" title=\"2.创建 git 仓库\"></a>2.创建 git 仓库</h2><p>创建一个git库用来存放Hexo生成的html静态文件和相关资源，然后通过 post-receive 钩子函数进行自动执行脚本讲生成的资源checkout发布到nginx达到自动发布更新的功能。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建git用户</span></span><br><span class=\"line\">adduser git</span><br><span class=\"line\"><span class=\"comment\">#设置密码</span></span><br><span class=\"line\">passwd git</span><br><span class=\"line\"><span class=\"comment\">#创建Hexo博客库 目录自行选择</span></span><br><span class=\"line\">mkdir laochenpiBlog &amp;&amp; chown git:git laochenpiBlog</span><br><span class=\"line\"><span class=\"comment\">#laochenpiBlog目录下创建blog.git  --bare裸仓库 没有工作空间</span></span><br><span class=\"line\">git init --bare blog.git &amp;&amp; chown git:git -R blog.git </span><br><span class=\"line\"><span class=\"comment\">#laochenpiBlog 目录下创建静态网页库 </span></span><br><span class=\"line\">mkdir blog.site &amp;&amp; chown git:git blog.site</span><br><span class=\"line\"><span class=\"comment\">#进入钩子函数目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> hooks/</span><br><span class=\"line\"><span class=\"comment\">#创建钩子函数文件</span></span><br><span class=\"line\">touch post-receive &amp;&amp; chown git:git post-receive &amp;&amp; chmod 755 post-receive</span><br></pre></td></tr></table></figure></p>\n<p>为Hexo编写自动化脚本在仓库hooks创建脚本 <code>vi post-receive</code> ，脚本会在git有收发的时候就会调用执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --work-tree=/var/laochenpiBlog/blog.site --git-dir=/var/laochenpiBlog/blog.git checkout -f</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-Hexo-配置发布测试\"><a href=\"#3-Hexo-配置发布测试\" class=\"headerlink\" title=\"3.Hexo 配置发布测试\"></a>3.Hexo 配置发布测试</h2><p>终于把Git环境弄好了，现在就需要修改配置文件<code>_config.yml</code> 中的发布项<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Deployment</span><br><span class=\"line\">## repo  为你的vps创建的库地址</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo : git@45.77.87.214:/var/laochenpiBlog/blog.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p>修改完毕，见证奇迹的时候到了，找到自己博客目录下用 <code>git bash</code>  发布<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#清除缓存  重编译  发布</span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p>\n<p> <img src=\"/images/passwd.png\" alt=\"OpenSSH\"><br> 输入密码发布完毕，然后远程上你的VPS查看下你的 <code>blog.site</code> 是否自动 <code>check out</code>了最新发布的内容了。</p>\n<h2 id=\"4-Git-免密发布\"><a href=\"#4-Git-免密发布\" class=\"headerlink\" title=\"4.Git 免密发布\"></a>4.Git 免密发布</h2><p>每次发布都需要输入密码实在是太麻烦了而且在有可能泄露密码引起安全问题，有什么比较方面安全的方式呢，通过google一波发现可以通过秘钥的形式实现无密码发布登录。</p>\n<p>秘钥方式通过RSA加密生成公有秘钥，然后把公有秘钥提交到VPS 上的秘钥认证文件中 <code>authroized_keys</code>，修改 OpenSSH 客户端的配置 <code>sshd_config</code>  实现RSA秘钥认证方式。</p>\n<p>那么我们开始吧！</p>\n<ul>\n<li><h5 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h5>修改 OpenSSH 认证 <code>vi /etc/ssh/sshd_config</code><br>开启公钥认证 <code>PubkeyAuthentication yes</code><br>认证Keys文件目录 用户/.ssh/文件名 <code>AuthorizedKeysFile      .ssh/authorized_keys</code><br>RSA加密认证 <code>RSAAuthentication yes</code><br><code></code></li>\n</ul>\n<p>这里要提示一点 Centos 7 和 Centos 6 遇到的问题，Centos 7 由于OpenSSH版本原因 RSAAuthentication 已经弃用，无需添加修改.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#用户提交的git用户的秘钥文件夹创建和权限分配#</span><br><span class=\"line\">——————————————————————————————————————</span><br><span class=\"line\">#创建认证文件authorized_keys</span><br><span class=\"line\">touch /home/git/.ssh/authorized_keys</span><br><span class=\"line\">#.ssh权限 700 authorize_keys 权限600</span><br><span class=\"line\">chmod 700 /home/git/.ssh &amp;&amp; chmod 600 /home/git/.ssh/authorize_keys</span><br></pre></td></tr></table></figure></p>\n<p>这里要注意 <code>.ssh</code> 和 <code>authorize_keys</code> 的权限问题，可能在加密认证的时候由于权限导致失败，SSH登录日志可以用 <code>tail /var/log/secure</code> 查看，<code>sshd -t</code>进行查看配置是否正常 需要在~目录下执行，执行<code>systemctl restart sshd</code> 重启 <code>SSH</code>服务</p>\n<ul>\n<li><h5 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h5><code>ssh-keygen -t rsa -C userName</code>  生成秘钥文件，地址一般在 <code>~/.ssh</code> 中。<br><code>id_rsa</code> 加密公钥 <code>id_rsa.pub</code> 加密公钥  多用户用<code>cat</code> 追加秘钥到认证文件中</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#上传认证秘钥到服务器上 对应用户的authorized_keys中</span></span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub | ssh git@45.77.87.214 <span class=\"string\">\"cat - &gt;&gt; /home/git/.ssh/authorized_keys\"</span></span><br></pre></td></tr></table></figure>\n<p>配置完毕后使用 <code>ssh -vvT git@45.77.87.214</code> 看看是不是不用密码就可以登录VPS了，然后发布就再也不用密码了，一条命令就OK。</p>\n<h2 id=\"5-Nginx配置映射\"><a href=\"#5-Nginx配置映射\" class=\"headerlink\" title=\"5.  Nginx配置映射\"></a>5.  Nginx配置映射</h2><p>终于到最后一步了，就差最后一步配置 Nginx 服务映射静态文件了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Centos yum源安装</span></span><br><span class=\"line\">yum install nginx</span><br><span class=\"line\"><span class=\"comment\">#启动nginx服务</span></span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\"><span class=\"comment\">#查看服务状态</span></span><br><span class=\"line\">systemctl status nginx -l</span><br></pre></td></tr></table></figure></p>\n<p>这里有可能出现的问题：<br>1.无法从外网访问 检查下80端口是否开启，添加80端口<code>firewall-cmd --permanent --zone=public --add-port=80/tcp --permanent</code> 和 <code>firewall-cmd --reload</code> 重载配置<br>2.服务可能没有启动成功，排查下配置问题</p>\n<p>修改80端口默认映射库地址，<code>nginx -t</code>查看nginx配置文件地址  </p>\n<p><img src=\"/images/nginx.png\" alt=\"nginx configuration file path\"><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#停止Nginx服务</span></span><br><span class=\"line\">systemctl stop nginx</span><br><span class=\"line\"><span class=\"comment\">#修改Nginx的配置文件root</span></span><br><span class=\"line\">vi /etc/nginx/nginx_conf</span><br><span class=\"line\"><span class=\"comment\">#修改 root 配置hexo静态文件地址，即之前创建的静态文件地址</span></span><br><span class=\"line\">root [hexo静态文件地址]</span><br><span class=\"line\"><span class=\"comment\">#修改完毕退出 重启Nginx服务</span></span><br><span class=\"line\">systemctl start nginx</span><br></pre></td></tr></table></figure></p>\n<p>修改完毕启动好服务然后通过外网访问你 VPS IP地址即可访问，大功告成以后可以在任意地方通过git提交的方式进行自动发布。请记得随时备份自己的重要文件以免丢失！</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>已配置秘钥但是SSH还是需要密码，相信很多小伙伴都遇到过，下面是可能原因</p>\n<ol>\n<li>查看sshd_config 配置文件是否正确开启了3个认证配置，更改后重启OpenSSH服务</li>\n<li>查看下ssh登录日志 排查下原因，可能是认证文件目录权限问题，<code>.shh 700</code> <code>authorized_key 600</code> 过大或者过小的权限都有可能导致认证是失败。</li>\n<li><code>authorized_key</code> 中秘钥千万千万不要直接从客户端直接复制过来，可能会有空格和其他转义一些特殊情况导致秘钥不正确。可通过 <code>cat</code>或<code>scp</code> 命令远程进行上传秘钥保证正确性。</li>\n<li>Centos 7 版本的 <code>OpenSSH</code> RSAAuthentication已经弃用无需设置、添加该设置可能导致启动异常。</li>\n</ol>\n"},{"title":"Linux 关机重启命令","date":"2018-07-25T05:50:04.000Z","_content":"\n![Linux](/images/linux-1.jpg)\n\n>记录学习鸟哥的私房菜之开启重启shell笔记，主要有命令shutdown，reboot，halt，poweroff\n\n## 1.Shutdown 命令介绍\n- 可以自由的选择关机模式：关机、重启或者进入单用户操作模式即可\n- 可以设置关机时间：设置在特定时间或经过多少时长后关闭，也可以立刻关闭\n- 可以自定义关机消息：在关闭服务可以通知其他登录的用户\n- 可以发送警告命令：在执行一些测试脚本或者可以影响到其他的登录用户的操作时，可以发送警告信息进行提示，但不是真的关机  \n\n\n``` bash\n#脚本参数 shutdown [-t秒] [-arkhncfF] 时间 [警告消息]\n-t sec： -t 后单位/秒 经过多少秒后执行\n-k      ：不是真关机仅发出警告信息\n-r      ：服务关闭后，关闭并重启\n-h      : 服务关闭后，立刻关机\n-c     ：取消已经在进行中的关闭操作\n-f      ：关机启动后，启动略过fsck磁盘检查\n-F     ：关机启动后 ，强制进行fsck磁盘检查\n# 3600秒后进行关闭并提示警告语\nshutdown -t 3600    'Computer will shutdown after 30 min'\n```\n\n\n","source":"_posts/Linux-关机重启命令.md","raw":"---\ntitle: Linux 关机重启命令\ndate: 2018-07-25 13:50:04\ncategories: [Linux]\ntags:\n    - Linux\n---\n\n![Linux](/images/linux-1.jpg)\n\n>记录学习鸟哥的私房菜之开启重启shell笔记，主要有命令shutdown，reboot，halt，poweroff\n\n## 1.Shutdown 命令介绍\n- 可以自由的选择关机模式：关机、重启或者进入单用户操作模式即可\n- 可以设置关机时间：设置在特定时间或经过多少时长后关闭，也可以立刻关闭\n- 可以自定义关机消息：在关闭服务可以通知其他登录的用户\n- 可以发送警告命令：在执行一些测试脚本或者可以影响到其他的登录用户的操作时，可以发送警告信息进行提示，但不是真的关机  \n\n\n``` bash\n#脚本参数 shutdown [-t秒] [-arkhncfF] 时间 [警告消息]\n-t sec： -t 后单位/秒 经过多少秒后执行\n-k      ：不是真关机仅发出警告信息\n-r      ：服务关闭后，关闭并重启\n-h      : 服务关闭后，立刻关机\n-c     ：取消已经在进行中的关闭操作\n-f      ：关机启动后，启动略过fsck磁盘检查\n-F     ：关机启动后 ，强制进行fsck磁盘检查\n# 3600秒后进行关闭并提示警告语\nshutdown -t 3600    'Computer will shutdown after 30 min'\n```\n\n\n","slug":"Linux-关机重启命令","published":1,"updated":"2019-03-27T02:16:16.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldtzi0006ysqu34wkntyf","content":"<p><img src=\"/images/linux-1.jpg\" alt=\"Linux\"></p>\n<blockquote>\n<p>记录学习鸟哥的私房菜之开启重启shell笔记，主要有命令shutdown，reboot，halt，poweroff</p>\n</blockquote>\n<h2 id=\"1-Shutdown-命令介绍\"><a href=\"#1-Shutdown-命令介绍\" class=\"headerlink\" title=\"1.Shutdown 命令介绍\"></a>1.Shutdown 命令介绍</h2><ul>\n<li>可以自由的选择关机模式：关机、重启或者进入单用户操作模式即可</li>\n<li>可以设置关机时间：设置在特定时间或经过多少时长后关闭，也可以立刻关闭</li>\n<li>可以自定义关机消息：在关闭服务可以通知其他登录的用户</li>\n<li>可以发送警告命令：在执行一些测试脚本或者可以影响到其他的登录用户的操作时，可以发送警告信息进行提示，但不是真的关机  </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#脚本参数 shutdown [-t秒] [-arkhncfF] 时间 [警告消息]</span></span><br><span class=\"line\">-t sec： -t 后单位/秒 经过多少秒后执行</span><br><span class=\"line\">-k      ：不是真关机仅发出警告信息</span><br><span class=\"line\">-r      ：服务关闭后，关闭并重启</span><br><span class=\"line\">-h      : 服务关闭后，立刻关机</span><br><span class=\"line\">-c     ：取消已经在进行中的关闭操作</span><br><span class=\"line\">-f      ：关机启动后，启动略过fsck磁盘检查</span><br><span class=\"line\">-F     ：关机启动后 ，强制进行fsck磁盘检查</span><br><span class=\"line\"><span class=\"comment\"># 3600秒后进行关闭并提示警告语</span></span><br><span class=\"line\">shutdown -t 3600    <span class=\"string\">'Computer will shutdown after 30 min'</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/linux-1.jpg\" alt=\"Linux\"></p>\n<blockquote>\n<p>记录学习鸟哥的私房菜之开启重启shell笔记，主要有命令shutdown，reboot，halt，poweroff</p>\n</blockquote>\n<h2 id=\"1-Shutdown-命令介绍\"><a href=\"#1-Shutdown-命令介绍\" class=\"headerlink\" title=\"1.Shutdown 命令介绍\"></a>1.Shutdown 命令介绍</h2><ul>\n<li>可以自由的选择关机模式：关机、重启或者进入单用户操作模式即可</li>\n<li>可以设置关机时间：设置在特定时间或经过多少时长后关闭，也可以立刻关闭</li>\n<li>可以自定义关机消息：在关闭服务可以通知其他登录的用户</li>\n<li>可以发送警告命令：在执行一些测试脚本或者可以影响到其他的登录用户的操作时，可以发送警告信息进行提示，但不是真的关机  </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#脚本参数 shutdown [-t秒] [-arkhncfF] 时间 [警告消息]</span></span><br><span class=\"line\">-t sec： -t 后单位/秒 经过多少秒后执行</span><br><span class=\"line\">-k      ：不是真关机仅发出警告信息</span><br><span class=\"line\">-r      ：服务关闭后，关闭并重启</span><br><span class=\"line\">-h      : 服务关闭后，立刻关机</span><br><span class=\"line\">-c     ：取消已经在进行中的关闭操作</span><br><span class=\"line\">-f      ：关机启动后，启动略过fsck磁盘检查</span><br><span class=\"line\">-F     ：关机启动后 ，强制进行fsck磁盘检查</span><br><span class=\"line\"><span class=\"comment\"># 3600秒后进行关闭并提示警告语</span></span><br><span class=\"line\">shutdown -t 3600    <span class=\"string\">'Computer will shutdown after 30 min'</span></span><br></pre></td></tr></table></figure>\n"},{"title":"ArrayList源码阅读","date":"2019-03-18T13:01:48.000Z","_content":"\n> 记录学习回顾Java基础学习源码思想ArrayList，平时光顾着写业务代码基础细节都没有进行积累导致出去面试被人家一顿虐，只注重外功不注重内功是不行的。\n\n### ArrayList\n平时最常用的集合，特点有序查找效率高`线程不安全`底层是数组实现了动态数组的功能，实现了`RandomAccess`(快速随机访问)、`Cloneable`(克隆接口)、`Serializabele`(序列化)等接口。\n\n#### 源码解析\n``` java\n\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n    private static final long serialVersionUID = 8683452581122892189L;\n\n    /**\n     * 默认的初始化容量 10\n     */\n    private static final int DEFAULT_CAPACITY = 10;\n\n    /**\n     * 共享的静态空Object数组用于空实例\n     */\n    private static final Object[] EMPTY_ELEMENTDATA = {};\n\n    /**\n     * 共享的静态空数组实例 用于最常用的new ArrayList() 无参实例使用\n     */\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n    /**\n     * 用于存放加入的数据数组 transient 关键字用于标记不需要序列化的字段\n     */\n    transient Object[] elementData; // non-private to simplify nested class access\n\n    /**\n     * \n     * 整个数组的长度 size 即size()返回值\n     * @serial\n     */\n    private int size;\n\n    /**\n     * 有参数的构造函数 initialCapacity 用于给集合初始化容量\n     */\n    public ArrayList(int  initialCapacity) {\n    \t//初始化一个大小为 initialCapacity 的Object数组\n        if (initialCapacity > 0) {\n            this.elementData = new Object[initialCapacity];\n        } else if (initialCapacity == 0) {\n        \t//如果初始容量为0使用静态 EMPTY_ELEMENTDATA 默认的空数组\n            this.elementData = EMPTY_ELEMENTDATA;\n        } else {\n            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                               initialCapacity);\n        }\n    }\n\n    /**\n     * 最常用的初始化方法\n     */\n    public ArrayList() {\n        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    /**\n     * Collection 传入一个集合元素列表 E为泛型 指定传入的集合类型\n     */\n    public ArrayList(Collection<? extends E> c) {\n    \t//集合转化为数组 并初始化elementData\n        elementData = c.toArray();\n        //初始化size的值\n        if ((size = elementData.length) != 0) {\n            // c.toArray might (incorrectly) not return Object[] (see 6260652)\n            // 由于传入的集合真实类型不一样所以需要调用 Arrays.copyOf 复制到一个新的Object[]数组中，以便可以存放任意类型\n            if (elementData.getClass() != Object[].class)\n                elementData = Arrays.copyOf(elementData, size, Object[].class);\n        } else {\n            // replace with empty array.\n            this.elementData = EMPTY_ELEMENTDATA;\n        }\n    }\n\n    /**\n     *修改当前容器值为实际元素的个数\n     */\n    public void trimToSize() {\n        modCount++;\n        if (size < elementData.length) {\n            elementData = (size == 0)\n              ? EMPTY_ELEMENTDATA\n              : Arrays.copyOf(elementData, size);\n        }\n    }\n\n    /**\n     * 自行控制扩容大小 \n     * 如果扩容值大于默认值10 则按传入值进行扩容处理判断\n     */\n    public void ensureCapacity(int minCapacity) {\n        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n            // any size if not default element table\n            ? 0\n            // larger than default for default empty table. It's already\n            // supposed to be at default size.\n            : DEFAULT_CAPACITY;\n\n        if (minCapacity > minExpand) {\n            ensureExplicitCapacity(minCapacity);\n        }\n    }\n\n    /**\n     * 计算最小容量\n     */\n    private static int calculateCapacity(Object[] elementData, int minCapacity) {\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            return Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n        return minCapacity;\n    }\n\n    /**\n     * 根据minCapacity进行扩容\n     */\n    private void ensureCapacityInternal(int minCapacity) {\n        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n    }\n\n    /**\n     * 判断是否需要进行扩容操作 如果扩容值大于实际的数组长度则进行扩容\n     */\n    private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n\n        // overflow-conscious code\n        if (minCapacity - elementData.length > 0)\n            grow(minCapacity);\n    }\n\n    /**\n     * 能分配的最大的数组大小 Integer数值最大值(2^31-1)-8\n     */\n    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n    /**\n     * 扩容的核心代码\n     * 每次扩容的大小为 当前数组长度+(数组长度/2)\n     * 如果扩容新容量小于需要扩容量值则覆盖新容量值\n     * 如果扩容新容量大于MAX_ARRAY_SIZE则直接使用Interger.MAX_VALUE否则使用MAX_ARRAY_SIZE\n     */\n    private void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n\n    /**\n     *当需要扩容大于MAX_ARRAY_SIEZ或小于0 返回合适值\n     */\n    private static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n    }\n}\n\n```","source":"_posts/ArrayList源码阅读.md","raw":"---\ntitle: ArrayList源码阅读\ndate: 2019-03-18 21:01:48\ncategories: [Java]\ntags:\n    - Java\n---\n\n> 记录学习回顾Java基础学习源码思想ArrayList，平时光顾着写业务代码基础细节都没有进行积累导致出去面试被人家一顿虐，只注重外功不注重内功是不行的。\n\n### ArrayList\n平时最常用的集合，特点有序查找效率高`线程不安全`底层是数组实现了动态数组的功能，实现了`RandomAccess`(快速随机访问)、`Cloneable`(克隆接口)、`Serializabele`(序列化)等接口。\n\n#### 源码解析\n``` java\n\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n    private static final long serialVersionUID = 8683452581122892189L;\n\n    /**\n     * 默认的初始化容量 10\n     */\n    private static final int DEFAULT_CAPACITY = 10;\n\n    /**\n     * 共享的静态空Object数组用于空实例\n     */\n    private static final Object[] EMPTY_ELEMENTDATA = {};\n\n    /**\n     * 共享的静态空数组实例 用于最常用的new ArrayList() 无参实例使用\n     */\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n    /**\n     * 用于存放加入的数据数组 transient 关键字用于标记不需要序列化的字段\n     */\n    transient Object[] elementData; // non-private to simplify nested class access\n\n    /**\n     * \n     * 整个数组的长度 size 即size()返回值\n     * @serial\n     */\n    private int size;\n\n    /**\n     * 有参数的构造函数 initialCapacity 用于给集合初始化容量\n     */\n    public ArrayList(int  initialCapacity) {\n    \t//初始化一个大小为 initialCapacity 的Object数组\n        if (initialCapacity > 0) {\n            this.elementData = new Object[initialCapacity];\n        } else if (initialCapacity == 0) {\n        \t//如果初始容量为0使用静态 EMPTY_ELEMENTDATA 默认的空数组\n            this.elementData = EMPTY_ELEMENTDATA;\n        } else {\n            throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                               initialCapacity);\n        }\n    }\n\n    /**\n     * 最常用的初始化方法\n     */\n    public ArrayList() {\n        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    /**\n     * Collection 传入一个集合元素列表 E为泛型 指定传入的集合类型\n     */\n    public ArrayList(Collection<? extends E> c) {\n    \t//集合转化为数组 并初始化elementData\n        elementData = c.toArray();\n        //初始化size的值\n        if ((size = elementData.length) != 0) {\n            // c.toArray might (incorrectly) not return Object[] (see 6260652)\n            // 由于传入的集合真实类型不一样所以需要调用 Arrays.copyOf 复制到一个新的Object[]数组中，以便可以存放任意类型\n            if (elementData.getClass() != Object[].class)\n                elementData = Arrays.copyOf(elementData, size, Object[].class);\n        } else {\n            // replace with empty array.\n            this.elementData = EMPTY_ELEMENTDATA;\n        }\n    }\n\n    /**\n     *修改当前容器值为实际元素的个数\n     */\n    public void trimToSize() {\n        modCount++;\n        if (size < elementData.length) {\n            elementData = (size == 0)\n              ? EMPTY_ELEMENTDATA\n              : Arrays.copyOf(elementData, size);\n        }\n    }\n\n    /**\n     * 自行控制扩容大小 \n     * 如果扩容值大于默认值10 则按传入值进行扩容处理判断\n     */\n    public void ensureCapacity(int minCapacity) {\n        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n            // any size if not default element table\n            ? 0\n            // larger than default for default empty table. It's already\n            // supposed to be at default size.\n            : DEFAULT_CAPACITY;\n\n        if (minCapacity > minExpand) {\n            ensureExplicitCapacity(minCapacity);\n        }\n    }\n\n    /**\n     * 计算最小容量\n     */\n    private static int calculateCapacity(Object[] elementData, int minCapacity) {\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            return Math.max(DEFAULT_CAPACITY, minCapacity);\n        }\n        return minCapacity;\n    }\n\n    /**\n     * 根据minCapacity进行扩容\n     */\n    private void ensureCapacityInternal(int minCapacity) {\n        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n    }\n\n    /**\n     * 判断是否需要进行扩容操作 如果扩容值大于实际的数组长度则进行扩容\n     */\n    private void ensureExplicitCapacity(int minCapacity) {\n        modCount++;\n\n        // overflow-conscious code\n        if (minCapacity - elementData.length > 0)\n            grow(minCapacity);\n    }\n\n    /**\n     * 能分配的最大的数组大小 Integer数值最大值(2^31-1)-8\n     */\n    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n    /**\n     * 扩容的核心代码\n     * 每次扩容的大小为 当前数组长度+(数组长度/2)\n     * 如果扩容新容量小于需要扩容量值则覆盖新容量值\n     * 如果扩容新容量大于MAX_ARRAY_SIZE则直接使用Interger.MAX_VALUE否则使用MAX_ARRAY_SIZE\n     */\n    private void grow(int minCapacity) {\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        int newCapacity = oldCapacity + (oldCapacity >> 1);\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity - MAX_ARRAY_SIZE > 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n    }\n\n    /**\n     *当需要扩容大于MAX_ARRAY_SIEZ或小于0 返回合适值\n     */\n    private static int hugeCapacity(int minCapacity) {\n        if (minCapacity < 0) // overflow\n            throw new OutOfMemoryError();\n        return (minCapacity > MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n    }\n}\n\n```","slug":"ArrayList源码阅读","published":1,"updated":"2019-03-27T02:47:21.017Z","_id":"cjtqldtzk000aysqub0hd2abo","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>记录学习回顾Java基础学习源码思想ArrayList，平时光顾着写业务代码基础细节都没有进行积累导致出去面试被人家一顿虐，只注重外功不注重内功是不行的。</p>\n</blockquote>\n<h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><p>平时最常用的集合，特点有序查找效率高<code>线程不安全</code>底层是数组实现了动态数组的功能，实现了<code>RandomAccess</code>(快速随机访问)、<code>Cloneable</code>(克隆接口)、<code>Serializabele</code>(序列化)等接口。</p>\n<h4 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8683452581122892189L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认的初始化容量 10</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 共享的静态空Object数组用于空实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 共享的静态空数组实例 用于最常用的new ArrayList() 无参实例使用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用于存放加入的数据数组 transient 关键字用于标记不需要序列化的字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">transient</span> Object[] elementData; <span class=\"comment\">// non-private to simplify nested class access</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 整个数组的长度 size 即size()返回值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 有参数的构造函数 initialCapacity 用于给集合初始化容量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span>  initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//初始化一个大小为 initialCapacity 的Object数组</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">//如果初始容量为0使用静态 EMPTY_ELEMENTDATA 默认的空数组</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span>+</span><br><span class=\"line\">                                               initialCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最常用的初始化方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Collection 传入一个集合元素列表 E为泛型 指定传入的集合类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//集合转化为数组 并初始化elementData</span></span><br><span class=\"line\">        elementData = c.toArray();</span><br><span class=\"line\">        <span class=\"comment\">//初始化size的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((size = elementData.length) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class=\"line\">            <span class=\"comment\">// 由于传入的集合真实类型不一样所以需要调用 Arrays.copyOf 复制到一个新的Object[]数组中，以便可以存放任意类型</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (elementData.getClass() != Object[].class)</span><br><span class=\"line\">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// replace with empty array.</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *修改当前容器值为实际元素的个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">trimToSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size &lt; elementData.length) &#123;</span><br><span class=\"line\">            elementData = (size == <span class=\"number\">0</span>)</span><br><span class=\"line\">              ? EMPTY_ELEMENTDATA</span><br><span class=\"line\">              : Arrays.copyOf(elementData, size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 自行控制扩容大小 </span></span><br><span class=\"line\"><span class=\"comment\">     * 如果扩容值大于默认值10 则按传入值进行扩容处理判断</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class=\"line\">            <span class=\"comment\">// any size if not default element table</span></span><br><span class=\"line\">            ? <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"comment\">// larger than default for default empty table. It's already</span></span><br><span class=\"line\">            <span class=\"comment\">// supposed to be at default size.</span></span><br><span class=\"line\">            : DEFAULT_CAPACITY;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class=\"line\">            ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算最小容量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateCapacity</span><span class=\"params\">(Object[] elementData, <span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minCapacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据minCapacity进行扩容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断是否需要进行扩容操作 如果扩容值大于实际的数组长度则进行扩容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            grow(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 能分配的最大的数组大小 Integer数值最大值(2^31-1)-8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扩容的核心代码</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次扩容的大小为 当前数组长度+(数组长度/2)</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果扩容新容量小于需要扩容量值则覆盖新容量值</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果扩容新容量大于MAX_ARRAY_SIZE则直接使用Interger.MAX_VALUE否则使用MAX_ARRAY_SIZE</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            newCapacity = minCapacity;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">        <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *当需要扩容大于MAX_ARRAY_SIEZ或小于0 返回合适值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">            Integer.MAX_VALUE :</span><br><span class=\"line\">            MAX_ARRAY_SIZE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记录学习回顾Java基础学习源码思想ArrayList，平时光顾着写业务代码基础细节都没有进行积累导致出去面试被人家一顿虐，只注重外功不注重内功是不行的。</p>\n</blockquote>\n<h3 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h3><p>平时最常用的集合，特点有序查找效率高<code>线程不安全</code>底层是数组实现了动态数组的功能，实现了<code>RandomAccess</code>(快速随机访问)、<code>Cloneable</code>(克隆接口)、<code>Serializabele</code>(序列化)等接口。</p>\n<h4 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8683452581122892189L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认的初始化容量 10</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 共享的静态空Object数组用于空实例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 共享的静态空数组实例 用于最常用的new ArrayList() 无参实例使用</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用于存放加入的数据数组 transient 关键字用于标记不需要序列化的字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">transient</span> Object[] elementData; <span class=\"comment\">// non-private to simplify nested class access</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 整个数组的长度 size 即size()返回值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 有参数的构造函数 initialCapacity 用于给集合初始化容量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span>  initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//初始化一个大小为 initialCapacity 的Object数组</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">//如果初始容量为0使用静态 EMPTY_ELEMENTDATA 默认的空数组</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span>+</span><br><span class=\"line\">                                               initialCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最常用的初始化方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Collection 传入一个集合元素列表 E为泛型 指定传入的集合类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//集合转化为数组 并初始化elementData</span></span><br><span class=\"line\">        elementData = c.toArray();</span><br><span class=\"line\">        <span class=\"comment\">//初始化size的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((size = elementData.length) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class=\"line\">            <span class=\"comment\">// 由于传入的集合真实类型不一样所以需要调用 Arrays.copyOf 复制到一个新的Object[]数组中，以便可以存放任意类型</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (elementData.getClass() != Object[].class)</span><br><span class=\"line\">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// replace with empty array.</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *修改当前容器值为实际元素的个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">trimToSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size &lt; elementData.length) &#123;</span><br><span class=\"line\">            elementData = (size == <span class=\"number\">0</span>)</span><br><span class=\"line\">              ? EMPTY_ELEMENTDATA</span><br><span class=\"line\">              : Arrays.copyOf(elementData, size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 自行控制扩容大小 </span></span><br><span class=\"line\"><span class=\"comment\">     * 如果扩容值大于默认值10 则按传入值进行扩容处理判断</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class=\"line\">            <span class=\"comment\">// any size if not default element table</span></span><br><span class=\"line\">            ? <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"comment\">// larger than default for default empty table. It's already</span></span><br><span class=\"line\">            <span class=\"comment\">// supposed to be at default size.</span></span><br><span class=\"line\">            : DEFAULT_CAPACITY;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class=\"line\">            ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算最小容量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateCapacity</span><span class=\"params\">(Object[] elementData, <span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minCapacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据minCapacity进行扩容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断是否需要进行扩容操作 如果扩容值大于实际的数组长度则进行扩容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            grow(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 能分配的最大的数组大小 Integer数值最大值(2^31-1)-8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扩容的核心代码</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次扩容的大小为 当前数组长度+(数组长度/2)</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果扩容新容量小于需要扩容量值则覆盖新容量值</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果扩容新容量大于MAX_ARRAY_SIZE则直接使用Interger.MAX_VALUE否则使用MAX_ARRAY_SIZE</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            newCapacity = minCapacity;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">        <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *当需要扩容大于MAX_ARRAY_SIEZ或小于0 返回合适值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">            Integer.MAX_VALUE :</span><br><span class=\"line\">            MAX_ARRAY_SIZE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Linux 搭建 Shadowsocks","date":"2018-07-13T08:25:43.000Z","_content":"\n![Shadowsocks](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1531801271142&di=761db1c2eaadf98b71507ffb63bdde32&imgtype=0&src=http%3A%2F%2Fn1.itc.cn%2Fimg8%2Fwb%2Fsmccloud%2Frecom%2F2015%2F07%2F14%2F143686120068151458.JPEG)\n\n>作为一个码农没有科学上网怎么能行，刚好Vultr新注册送钱买一个云主机玩玩，\n以CentOs7做一个教程，之前在网上找的搭建方法很多错误导致一直不成功现在自己整理并通过测试，踩了很多坑\n\n\n## 1.Shadowsocks 环境准备\n \n``` bash\n#安装epel扩展源\nyum install epel-release\n#安装Pip\nyum -y install python-pip\n#升级Pip\npip install --upgrade pip \n#清除yum缓存\nyum clean all\n#安装shadowsocks客户端\npip install shadowsocks\n```\n\n## 2.Shadowsocks 配置\n\n``` bash\n#创建shadowsocks配置\nvi /etc/shadowsocks.json\n#单用户\n { \n    \"server\":\"server_ip\"， \n    \"server_port\":25， \n    \"local_address\": \"127.0.0.1\"， \n    \"local_port\":1080， \n    \"password\":\"password\"，\n    \"timeout\":300， \n    \"method\":\"aes-256-cfb\"， \n    \"fast_open\": false \n }\n\n#多用户\n{\n    \"server\":\"server_ip\"，\n    \"port_password\":{\n        \"port_1\":\"pwd1\"，\n        \"port_2\":\"pwd2\"，\n        \"port_3\":\"pwd3\"\n    }，\n    \"local_address\":\"127.0.0.1\"，\n    \"local_port\":1080，\n    \"timeout\":300，\n    \"method\":\"aes-256-cfb\"\n}\n```\n**参数详解**:\n* server 服务器地址 127.0.0.1 或者0.0.0.0\n* server_port 服务端口号 外部连接需要填写的服务端口号\n* local_port 本地端口号\n* password 连接密码\n* timeout 超时时间\n* method 加密方式\n\n## 3.Shadowsocks 启动\n``` bash   \n#启动\nssserver -c /etc/shadowsocks.json -d start\n#停止\nssserver -c /etc/shadowsocks.json -d stop\n```\n由于每次都需要服务器重启都需要手动去启动不便，可以注册成服务自动启动\n``` bash\n#创建服务脚本 servicename 填写shadowsocks\nvi /etc/systemd/system/[servicename].service\n\n#编辑脚本\n[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json start\nExecStop=/usr/bin/ssserver -c /etc/shadowsocks.json stop\n\n\n[Install]\nWantedBy=multi-user.target\n```\n这里会遇到一个坑：ExecStart 这里填写的启动脚本 少了一个start不知道是不是我本身脚本问题\n\n**参数详解**:\n* Description服务描述\n* ExecStart 服务启动执行脚本\n* ExecStop 服务停止执行脚本\n* WantedBy 系统以该形式运行时，服务方可启动\n\n## 4.Systemctl 命令\n注册服务 `systemctl enable shadowsocks`\n所有服务 `systemctl list-units --type=service`\n服务状态 `systemctl status shadowsocks -l `\n启动服务 `systemctl start shadowsocks`\n停止服务 `systemctl stop shadowsocks`\n重启服务 `systemctl restart shadowsocks`\n\n## 5.Shadowsocks 客户端安装\n\n环境支持\n- [Shadowsocks for Win](https://github.com/shadowsocks/shadowsocks-windows/releases)\n- [Microsoft .NET Framework 4.6.2](https://www.microsoft.com/en-US/download/details.aspx?id=53344) \n- [Microsoft Visual C++ 2015 Redistributable (x86) ](https://www.microsoft.com/en-us/download/details.aspx?id=53840)\n安装完毕配置启动即可\n\n### 贴士提示\n* CentOs7需要配置下防火墙端口白名单\n``` bash\n#添加端口号8388(设置的server-port) --permanent永久生效\nfirewall-cmd --zone=public --add-port=8388/tcp --permanent \n#重载配置\nfirewall-cmd --reload\n```\n","source":"_posts/Linxu搭建SS.md","raw":"---\ntitle: Linux 搭建 Shadowsocks\ndate: 2018-07-13 16:25:43\ncategories: [Linux]\ntags:\n    - Linux\n---\n\n![Shadowsocks](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1531801271142&di=761db1c2eaadf98b71507ffb63bdde32&imgtype=0&src=http%3A%2F%2Fn1.itc.cn%2Fimg8%2Fwb%2Fsmccloud%2Frecom%2F2015%2F07%2F14%2F143686120068151458.JPEG)\n\n>作为一个码农没有科学上网怎么能行，刚好Vultr新注册送钱买一个云主机玩玩，\n以CentOs7做一个教程，之前在网上找的搭建方法很多错误导致一直不成功现在自己整理并通过测试，踩了很多坑\n\n\n## 1.Shadowsocks 环境准备\n \n``` bash\n#安装epel扩展源\nyum install epel-release\n#安装Pip\nyum -y install python-pip\n#升级Pip\npip install --upgrade pip \n#清除yum缓存\nyum clean all\n#安装shadowsocks客户端\npip install shadowsocks\n```\n\n## 2.Shadowsocks 配置\n\n``` bash\n#创建shadowsocks配置\nvi /etc/shadowsocks.json\n#单用户\n { \n    \"server\":\"server_ip\"， \n    \"server_port\":25， \n    \"local_address\": \"127.0.0.1\"， \n    \"local_port\":1080， \n    \"password\":\"password\"，\n    \"timeout\":300， \n    \"method\":\"aes-256-cfb\"， \n    \"fast_open\": false \n }\n\n#多用户\n{\n    \"server\":\"server_ip\"，\n    \"port_password\":{\n        \"port_1\":\"pwd1\"，\n        \"port_2\":\"pwd2\"，\n        \"port_3\":\"pwd3\"\n    }，\n    \"local_address\":\"127.0.0.1\"，\n    \"local_port\":1080，\n    \"timeout\":300，\n    \"method\":\"aes-256-cfb\"\n}\n```\n**参数详解**:\n* server 服务器地址 127.0.0.1 或者0.0.0.0\n* server_port 服务端口号 外部连接需要填写的服务端口号\n* local_port 本地端口号\n* password 连接密码\n* timeout 超时时间\n* method 加密方式\n\n## 3.Shadowsocks 启动\n``` bash   \n#启动\nssserver -c /etc/shadowsocks.json -d start\n#停止\nssserver -c /etc/shadowsocks.json -d stop\n```\n由于每次都需要服务器重启都需要手动去启动不便，可以注册成服务自动启动\n``` bash\n#创建服务脚本 servicename 填写shadowsocks\nvi /etc/systemd/system/[servicename].service\n\n#编辑脚本\n[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json start\nExecStop=/usr/bin/ssserver -c /etc/shadowsocks.json stop\n\n\n[Install]\nWantedBy=multi-user.target\n```\n这里会遇到一个坑：ExecStart 这里填写的启动脚本 少了一个start不知道是不是我本身脚本问题\n\n**参数详解**:\n* Description服务描述\n* ExecStart 服务启动执行脚本\n* ExecStop 服务停止执行脚本\n* WantedBy 系统以该形式运行时，服务方可启动\n\n## 4.Systemctl 命令\n注册服务 `systemctl enable shadowsocks`\n所有服务 `systemctl list-units --type=service`\n服务状态 `systemctl status shadowsocks -l `\n启动服务 `systemctl start shadowsocks`\n停止服务 `systemctl stop shadowsocks`\n重启服务 `systemctl restart shadowsocks`\n\n## 5.Shadowsocks 客户端安装\n\n环境支持\n- [Shadowsocks for Win](https://github.com/shadowsocks/shadowsocks-windows/releases)\n- [Microsoft .NET Framework 4.6.2](https://www.microsoft.com/en-US/download/details.aspx?id=53344) \n- [Microsoft Visual C++ 2015 Redistributable (x86) ](https://www.microsoft.com/en-us/download/details.aspx?id=53840)\n安装完毕配置启动即可\n\n### 贴士提示\n* CentOs7需要配置下防火墙端口白名单\n``` bash\n#添加端口号8388(设置的server-port) --permanent永久生效\nfirewall-cmd --zone=public --add-port=8388/tcp --permanent \n#重载配置\nfirewall-cmd --reload\n```\n","slug":"Linxu搭建SS","published":1,"updated":"2019-03-27T02:16:16.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldtzn000cysqud968bvn8","content":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1531801271142&amp;di=761db1c2eaadf98b71507ffb63bdde32&amp;imgtype=0&amp;src=http%3A%2F%2Fn1.itc.cn%2Fimg8%2Fwb%2Fsmccloud%2Frecom%2F2015%2F07%2F14%2F143686120068151458.JPEG\" alt=\"Shadowsocks\"></p>\n<blockquote>\n<p>作为一个码农没有科学上网怎么能行，刚好Vultr新注册送钱买一个云主机玩玩，<br>以CentOs7做一个教程，之前在网上找的搭建方法很多错误导致一直不成功现在自己整理并通过测试，踩了很多坑</p>\n</blockquote>\n<h2 id=\"1-Shadowsocks-环境准备\"><a href=\"#1-Shadowsocks-环境准备\" class=\"headerlink\" title=\"1.Shadowsocks 环境准备\"></a>1.Shadowsocks 环境准备</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装epel扩展源</span></span><br><span class=\"line\">yum install epel-release</span><br><span class=\"line\"><span class=\"comment\">#安装Pip</span></span><br><span class=\"line\">yum -y install python-pip</span><br><span class=\"line\"><span class=\"comment\">#升级Pip</span></span><br><span class=\"line\">pip install --upgrade pip </span><br><span class=\"line\"><span class=\"comment\">#清除yum缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"><span class=\"comment\">#安装shadowsocks客户端</span></span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Shadowsocks-配置\"><a href=\"#2-Shadowsocks-配置\" class=\"headerlink\" title=\"2.Shadowsocks 配置\"></a>2.Shadowsocks 配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建shadowsocks配置</span></span><br><span class=\"line\">vi /etc/shadowsocks.json</span><br><span class=\"line\"><span class=\"comment\">#单用户</span></span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"server_ip\"</span>， </span><br><span class=\"line\">    <span class=\"string\">\"server_port\"</span>:25， </span><br><span class=\"line\">    <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>， </span><br><span class=\"line\">    <span class=\"string\">\"local_port\"</span>:1080， </span><br><span class=\"line\">    <span class=\"string\">\"password\"</span>:<span class=\"string\">\"password\"</span>，</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>:300， </span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>， </span><br><span class=\"line\">    <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">false</span> </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#多用户</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"server_ip\"</span>，</span><br><span class=\"line\">    <span class=\"string\">\"port_password\"</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"port_1\"</span>:<span class=\"string\">\"pwd1\"</span>，</span><br><span class=\"line\">        <span class=\"string\">\"port_2\"</span>:<span class=\"string\">\"pwd2\"</span>，</span><br><span class=\"line\">        <span class=\"string\">\"port_3\"</span>:<span class=\"string\">\"pwd3\"</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    <span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>，</span><br><span class=\"line\">    <span class=\"string\">\"local_port\"</span>:1080，</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>:300，</span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参数详解</strong>:</p>\n<ul>\n<li>server 服务器地址 127.0.0.1 或者0.0.0.0</li>\n<li>server_port 服务端口号 外部连接需要填写的服务端口号</li>\n<li>local_port 本地端口号</li>\n<li>password 连接密码</li>\n<li>timeout 超时时间</li>\n<li>method 加密方式</li>\n</ul>\n<h2 id=\"3-Shadowsocks-启动\"><a href=\"#3-Shadowsocks-启动\" class=\"headerlink\" title=\"3.Shadowsocks 启动\"></a>3.Shadowsocks 启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#启动</span></span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\"><span class=\"comment\">#停止</span></span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>\n<p>由于每次都需要服务器重启都需要手动去启动不便，可以注册成服务自动启动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建服务脚本 servicename 填写shadowsocks</span></span><br><span class=\"line\">vi /etc/systemd/system/[servicename].service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#编辑脚本</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json start</span><br><span class=\"line\">ExecStop=/usr/bin/ssserver -c /etc/shadowsocks.json stop</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>\n<p>这里会遇到一个坑：ExecStart 这里填写的启动脚本 少了一个start不知道是不是我本身脚本问题</p>\n<p><strong>参数详解</strong>:</p>\n<ul>\n<li>Description服务描述</li>\n<li>ExecStart 服务启动执行脚本</li>\n<li>ExecStop 服务停止执行脚本</li>\n<li>WantedBy 系统以该形式运行时，服务方可启动</li>\n</ul>\n<h2 id=\"4-Systemctl-命令\"><a href=\"#4-Systemctl-命令\" class=\"headerlink\" title=\"4.Systemctl 命令\"></a>4.Systemctl 命令</h2><p>注册服务 <code>systemctl enable shadowsocks</code><br>所有服务 <code>systemctl list-units --type=service</code><br>服务状态 <code>systemctl status shadowsocks -l</code><br>启动服务 <code>systemctl start shadowsocks</code><br>停止服务 <code>systemctl stop shadowsocks</code><br>重启服务 <code>systemctl restart shadowsocks</code></p>\n<h2 id=\"5-Shadowsocks-客户端安装\"><a href=\"#5-Shadowsocks-客户端安装\" class=\"headerlink\" title=\"5.Shadowsocks 客户端安装\"></a>5.Shadowsocks 客户端安装</h2><p>环境支持</p>\n<ul>\n<li><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\" target=\"_blank\" rel=\"noopener\">Shadowsocks for Win</a></li>\n<li><a href=\"https://www.microsoft.com/en-US/download/details.aspx?id=53344\" target=\"_blank\" rel=\"noopener\">Microsoft .NET Framework 4.6.2</a> </li>\n<li><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=53840\" target=\"_blank\" rel=\"noopener\">Microsoft Visual C++ 2015 Redistributable (x86) </a><br>安装完毕配置启动即可</li>\n</ul>\n<h3 id=\"贴士提示\"><a href=\"#贴士提示\" class=\"headerlink\" title=\"贴士提示\"></a>贴士提示</h3><ul>\n<li>CentOs7需要配置下防火墙端口白名单<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加端口号8388(设置的server-port) --permanent永久生效</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=8388/tcp --permanent </span><br><span class=\"line\"><span class=\"comment\">#重载配置</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1531801271142&amp;di=761db1c2eaadf98b71507ffb63bdde32&amp;imgtype=0&amp;src=http%3A%2F%2Fn1.itc.cn%2Fimg8%2Fwb%2Fsmccloud%2Frecom%2F2015%2F07%2F14%2F143686120068151458.JPEG\" alt=\"Shadowsocks\"></p>\n<blockquote>\n<p>作为一个码农没有科学上网怎么能行，刚好Vultr新注册送钱买一个云主机玩玩，<br>以CentOs7做一个教程，之前在网上找的搭建方法很多错误导致一直不成功现在自己整理并通过测试，踩了很多坑</p>\n</blockquote>\n<h2 id=\"1-Shadowsocks-环境准备\"><a href=\"#1-Shadowsocks-环境准备\" class=\"headerlink\" title=\"1.Shadowsocks 环境准备\"></a>1.Shadowsocks 环境准备</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装epel扩展源</span></span><br><span class=\"line\">yum install epel-release</span><br><span class=\"line\"><span class=\"comment\">#安装Pip</span></span><br><span class=\"line\">yum -y install python-pip</span><br><span class=\"line\"><span class=\"comment\">#升级Pip</span></span><br><span class=\"line\">pip install --upgrade pip </span><br><span class=\"line\"><span class=\"comment\">#清除yum缓存</span></span><br><span class=\"line\">yum clean all</span><br><span class=\"line\"><span class=\"comment\">#安装shadowsocks客户端</span></span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Shadowsocks-配置\"><a href=\"#2-Shadowsocks-配置\" class=\"headerlink\" title=\"2.Shadowsocks 配置\"></a>2.Shadowsocks 配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建shadowsocks配置</span></span><br><span class=\"line\">vi /etc/shadowsocks.json</span><br><span class=\"line\"><span class=\"comment\">#单用户</span></span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"server_ip\"</span>， </span><br><span class=\"line\">    <span class=\"string\">\"server_port\"</span>:25， </span><br><span class=\"line\">    <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>， </span><br><span class=\"line\">    <span class=\"string\">\"local_port\"</span>:1080， </span><br><span class=\"line\">    <span class=\"string\">\"password\"</span>:<span class=\"string\">\"password\"</span>，</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>:300， </span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>， </span><br><span class=\"line\">    <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">false</span> </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#多用户</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"server_ip\"</span>，</span><br><span class=\"line\">    <span class=\"string\">\"port_password\"</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"port_1\"</span>:<span class=\"string\">\"pwd1\"</span>，</span><br><span class=\"line\">        <span class=\"string\">\"port_2\"</span>:<span class=\"string\">\"pwd2\"</span>，</span><br><span class=\"line\">        <span class=\"string\">\"port_3\"</span>:<span class=\"string\">\"pwd3\"</span></span><br><span class=\"line\">    &#125;，</span><br><span class=\"line\">    <span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>，</span><br><span class=\"line\">    <span class=\"string\">\"local_port\"</span>:1080，</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>:300，</span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>参数详解</strong>:</p>\n<ul>\n<li>server 服务器地址 127.0.0.1 或者0.0.0.0</li>\n<li>server_port 服务端口号 外部连接需要填写的服务端口号</li>\n<li>local_port 本地端口号</li>\n<li>password 连接密码</li>\n<li>timeout 超时时间</li>\n<li>method 加密方式</li>\n</ul>\n<h2 id=\"3-Shadowsocks-启动\"><a href=\"#3-Shadowsocks-启动\" class=\"headerlink\" title=\"3.Shadowsocks 启动\"></a>3.Shadowsocks 启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#启动</span></span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\"><span class=\"comment\">#停止</span></span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>\n<p>由于每次都需要服务器重启都需要手动去启动不便，可以注册成服务自动启动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建服务脚本 servicename 填写shadowsocks</span></span><br><span class=\"line\">vi /etc/systemd/system/[servicename].service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#编辑脚本</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">TimeoutStartSec=0</span><br><span class=\"line\">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json start</span><br><span class=\"line\">ExecStop=/usr/bin/ssserver -c /etc/shadowsocks.json stop</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>\n<p>这里会遇到一个坑：ExecStart 这里填写的启动脚本 少了一个start不知道是不是我本身脚本问题</p>\n<p><strong>参数详解</strong>:</p>\n<ul>\n<li>Description服务描述</li>\n<li>ExecStart 服务启动执行脚本</li>\n<li>ExecStop 服务停止执行脚本</li>\n<li>WantedBy 系统以该形式运行时，服务方可启动</li>\n</ul>\n<h2 id=\"4-Systemctl-命令\"><a href=\"#4-Systemctl-命令\" class=\"headerlink\" title=\"4.Systemctl 命令\"></a>4.Systemctl 命令</h2><p>注册服务 <code>systemctl enable shadowsocks</code><br>所有服务 <code>systemctl list-units --type=service</code><br>服务状态 <code>systemctl status shadowsocks -l</code><br>启动服务 <code>systemctl start shadowsocks</code><br>停止服务 <code>systemctl stop shadowsocks</code><br>重启服务 <code>systemctl restart shadowsocks</code></p>\n<h2 id=\"5-Shadowsocks-客户端安装\"><a href=\"#5-Shadowsocks-客户端安装\" class=\"headerlink\" title=\"5.Shadowsocks 客户端安装\"></a>5.Shadowsocks 客户端安装</h2><p>环境支持</p>\n<ul>\n<li><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\" target=\"_blank\" rel=\"noopener\">Shadowsocks for Win</a></li>\n<li><a href=\"https://www.microsoft.com/en-US/download/details.aspx?id=53344\" target=\"_blank\" rel=\"noopener\">Microsoft .NET Framework 4.6.2</a> </li>\n<li><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=53840\" target=\"_blank\" rel=\"noopener\">Microsoft Visual C++ 2015 Redistributable (x86) </a><br>安装完毕配置启动即可</li>\n</ul>\n<h3 id=\"贴士提示\"><a href=\"#贴士提示\" class=\"headerlink\" title=\"贴士提示\"></a>贴士提示</h3><ul>\n<li>CentOs7需要配置下防火墙端口白名单<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加端口号8388(设置的server-port) --permanent永久生效</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=8388/tcp --permanent </span><br><span class=\"line\"><span class=\"comment\">#重载配置</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Logstash同步数据库","date":"2018-05-25T08:27:08.000Z","_content":"![](/images/es.jpg)\n\n>由于业务需求需要同步某些数据库的表数据更新修改删除需同步ES保证同步性，\n在进行curd用AOP可实现同步，但是考虑到解耦分离后续系统水平拓展，\n查询资料可以用Logstash进行同步Es，Logstash 是开源的服务器端数据处理管道，\n能够同时 从多个来源采集数据、转换数据，然后将数据发送到Elasticsearch.\n\n\n\n## 1.Logstash依赖环境\n* JDK1.8 [下载地址](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n* Ruby环境 [下载地址](http://www.ruby-lang.org/en/downloads/)\n* logstash 6.3.1 [下载地址](https://www.elastic.co/downloads/logstash)\n\n## 2.Logstash同步配置文件\n>Logstash由三个组件构造成，分别是input、filter以及output。我们可以吧Logstash三个组件的工作流理解为：input收集数据，filter处理数据，output输出数据。至于怎么收集、去哪收集、怎么处理、处理什么、怎么发生以及发送到哪等等一些列的问题就是我们接下啦要讨论的一个重点。\n```\ninput {\n    jdbc{\n    #数据库驱动jar包\n        jdbc_driver_library => \"\\policySyn\\ojdbc6.jar\"\n    #数据库地址\n        jdbc_connection_string => \"jdbc:oracle:thin:@192.168.105.16:1523:gnnt\"\n    #数据库用户名密码\n        jdbc_user => \"plane_tick\"\n        jdbc_password => \"ora123\"\n    #数据库驱动类\n        jdbc_driver_class => \"Java::oracle.jdbc.driver.OracleDriver\"\n        jdbc_paging_enabled => \"true\"\n        jdbc_page_size => \"50000\"\n    #执行sql绝对路径 或相对路径\n        statement_filepath  => \"\\policySyn\\syn.sql\"\n    #更新时间记录和存放\n        record_last_run => \"true\"\n        last_run_metadata_path => \"\\policySyn\\synDate.txt\"\n    #定时更新频率 20分钟一次\n        schedule => \"* * * * *\"\n    #索引类型\n        type => \"policyteam_dev\"\n    }\n}\n\n//同步目的地\noutput {\n    elasticsearch{\n        hosts => \"http://192.168.105.13:9200\"\n        index => \"policyteam_dev\"\n        document_id => \"%{zcbh}\"\n    }\n    stdout {\n        codec => json_lines\n    }\n}\n```\n## 3.启动同步脚本\n进入Logstash目录bin文件夹下执行脚本\n``` bash \n    #config为执行配置文件绝对路径或相对路径\n    logstash -f [config]\n```\n\n\n\n\n\n\n\n","source":"_posts/Logstah同步Es.md","raw":"---\ntitle: Logstash同步数据库\ndate: 2018-05-25 16:27:08\ncategories: [技术]\ntags:\n    - 技术\n---\n![](/images/es.jpg)\n\n>由于业务需求需要同步某些数据库的表数据更新修改删除需同步ES保证同步性，\n在进行curd用AOP可实现同步，但是考虑到解耦分离后续系统水平拓展，\n查询资料可以用Logstash进行同步Es，Logstash 是开源的服务器端数据处理管道，\n能够同时 从多个来源采集数据、转换数据，然后将数据发送到Elasticsearch.\n\n\n\n## 1.Logstash依赖环境\n* JDK1.8 [下载地址](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n* Ruby环境 [下载地址](http://www.ruby-lang.org/en/downloads/)\n* logstash 6.3.1 [下载地址](https://www.elastic.co/downloads/logstash)\n\n## 2.Logstash同步配置文件\n>Logstash由三个组件构造成，分别是input、filter以及output。我们可以吧Logstash三个组件的工作流理解为：input收集数据，filter处理数据，output输出数据。至于怎么收集、去哪收集、怎么处理、处理什么、怎么发生以及发送到哪等等一些列的问题就是我们接下啦要讨论的一个重点。\n```\ninput {\n    jdbc{\n    #数据库驱动jar包\n        jdbc_driver_library => \"\\policySyn\\ojdbc6.jar\"\n    #数据库地址\n        jdbc_connection_string => \"jdbc:oracle:thin:@192.168.105.16:1523:gnnt\"\n    #数据库用户名密码\n        jdbc_user => \"plane_tick\"\n        jdbc_password => \"ora123\"\n    #数据库驱动类\n        jdbc_driver_class => \"Java::oracle.jdbc.driver.OracleDriver\"\n        jdbc_paging_enabled => \"true\"\n        jdbc_page_size => \"50000\"\n    #执行sql绝对路径 或相对路径\n        statement_filepath  => \"\\policySyn\\syn.sql\"\n    #更新时间记录和存放\n        record_last_run => \"true\"\n        last_run_metadata_path => \"\\policySyn\\synDate.txt\"\n    #定时更新频率 20分钟一次\n        schedule => \"* * * * *\"\n    #索引类型\n        type => \"policyteam_dev\"\n    }\n}\n\n//同步目的地\noutput {\n    elasticsearch{\n        hosts => \"http://192.168.105.13:9200\"\n        index => \"policyteam_dev\"\n        document_id => \"%{zcbh}\"\n    }\n    stdout {\n        codec => json_lines\n    }\n}\n```\n## 3.启动同步脚本\n进入Logstash目录bin文件夹下执行脚本\n``` bash \n    #config为执行配置文件绝对路径或相对路径\n    logstash -f [config]\n```\n\n\n\n\n\n\n\n","slug":"Logstah同步Es","published":1,"updated":"2019-03-27T02:16:16.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldtzr000hysqu6359nzp0","content":"<p><img src=\"/images/es.jpg\" alt=\"\"></p>\n<blockquote>\n<p>由于业务需求需要同步某些数据库的表数据更新修改删除需同步ES保证同步性，<br>在进行curd用AOP可实现同步，但是考虑到解耦分离后续系统水平拓展，<br>查询资料可以用Logstash进行同步Es，Logstash 是开源的服务器端数据处理管道，<br>能够同时 从多个来源采集数据、转换数据，然后将数据发送到Elasticsearch.</p>\n</blockquote>\n<h2 id=\"1-Logstash依赖环境\"><a href=\"#1-Logstash依赖环境\" class=\"headerlink\" title=\"1.Logstash依赖环境\"></a>1.Logstash依赖环境</h2><ul>\n<li>JDK1.8 <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">下载地址</a></li>\n<li>Ruby环境 <a href=\"http://www.ruby-lang.org/en/downloads/\" target=\"_blank\" rel=\"noopener\">下载地址</a></li>\n<li>logstash 6.3.1 <a href=\"https://www.elastic.co/downloads/logstash\" target=\"_blank\" rel=\"noopener\">下载地址</a></li>\n</ul>\n<h2 id=\"2-Logstash同步配置文件\"><a href=\"#2-Logstash同步配置文件\" class=\"headerlink\" title=\"2.Logstash同步配置文件\"></a>2.Logstash同步配置文件</h2><blockquote>\n<p>Logstash由三个组件构造成，分别是input、filter以及output。我们可以吧Logstash三个组件的工作流理解为：input收集数据，filter处理数据，output输出数据。至于怎么收集、去哪收集、怎么处理、处理什么、怎么发生以及发送到哪等等一些列的问题就是我们接下啦要讨论的一个重点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    jdbc&#123;</span><br><span class=\"line\">    #数据库驱动jar包</span><br><span class=\"line\">        jdbc_driver_library =&gt; &quot;\\policySyn\\ojdbc6.jar&quot;</span><br><span class=\"line\">    #数据库地址</span><br><span class=\"line\">        jdbc_connection_string =&gt; &quot;jdbc:oracle:thin:@192.168.105.16:1523:gnnt&quot;</span><br><span class=\"line\">    #数据库用户名密码</span><br><span class=\"line\">        jdbc_user =&gt; &quot;plane_tick&quot;</span><br><span class=\"line\">        jdbc_password =&gt; &quot;ora123&quot;</span><br><span class=\"line\">    #数据库驱动类</span><br><span class=\"line\">        jdbc_driver_class =&gt; &quot;Java::oracle.jdbc.driver.OracleDriver&quot;</span><br><span class=\"line\">        jdbc_paging_enabled =&gt; &quot;true&quot;</span><br><span class=\"line\">        jdbc_page_size =&gt; &quot;50000&quot;</span><br><span class=\"line\">    #执行sql绝对路径 或相对路径</span><br><span class=\"line\">        statement_filepath  =&gt; &quot;\\policySyn\\syn.sql&quot;</span><br><span class=\"line\">    #更新时间记录和存放</span><br><span class=\"line\">        record_last_run =&gt; &quot;true&quot;</span><br><span class=\"line\">        last_run_metadata_path =&gt; &quot;\\policySyn\\synDate.txt&quot;</span><br><span class=\"line\">    #定时更新频率 20分钟一次</span><br><span class=\"line\">        schedule =&gt; &quot;* * * * *&quot;</span><br><span class=\"line\">    #索引类型</span><br><span class=\"line\">        type =&gt; &quot;policyteam_dev&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//同步目的地</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    elasticsearch&#123;</span><br><span class=\"line\">        hosts =&gt; &quot;http://192.168.105.13:9200&quot;</span><br><span class=\"line\">        index =&gt; &quot;policyteam_dev&quot;</span><br><span class=\"line\">        document_id =&gt; &quot;%&#123;zcbh&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stdout &#123;</span><br><span class=\"line\">        codec =&gt; json_lines</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"3-启动同步脚本\"><a href=\"#3-启动同步脚本\" class=\"headerlink\" title=\"3.启动同步脚本\"></a>3.启动同步脚本</h2><p>进入Logstash目录bin文件夹下执行脚本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#config为执行配置文件绝对路径或相对路径</span></span><br><span class=\"line\">logstash -f [config]</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/es.jpg\" alt=\"\"></p>\n<blockquote>\n<p>由于业务需求需要同步某些数据库的表数据更新修改删除需同步ES保证同步性，<br>在进行curd用AOP可实现同步，但是考虑到解耦分离后续系统水平拓展，<br>查询资料可以用Logstash进行同步Es，Logstash 是开源的服务器端数据处理管道，<br>能够同时 从多个来源采集数据、转换数据，然后将数据发送到Elasticsearch.</p>\n</blockquote>\n<h2 id=\"1-Logstash依赖环境\"><a href=\"#1-Logstash依赖环境\" class=\"headerlink\" title=\"1.Logstash依赖环境\"></a>1.Logstash依赖环境</h2><ul>\n<li>JDK1.8 <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">下载地址</a></li>\n<li>Ruby环境 <a href=\"http://www.ruby-lang.org/en/downloads/\" target=\"_blank\" rel=\"noopener\">下载地址</a></li>\n<li>logstash 6.3.1 <a href=\"https://www.elastic.co/downloads/logstash\" target=\"_blank\" rel=\"noopener\">下载地址</a></li>\n</ul>\n<h2 id=\"2-Logstash同步配置文件\"><a href=\"#2-Logstash同步配置文件\" class=\"headerlink\" title=\"2.Logstash同步配置文件\"></a>2.Logstash同步配置文件</h2><blockquote>\n<p>Logstash由三个组件构造成，分别是input、filter以及output。我们可以吧Logstash三个组件的工作流理解为：input收集数据，filter处理数据，output输出数据。至于怎么收集、去哪收集、怎么处理、处理什么、怎么发生以及发送到哪等等一些列的问题就是我们接下啦要讨论的一个重点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    jdbc&#123;</span><br><span class=\"line\">    #数据库驱动jar包</span><br><span class=\"line\">        jdbc_driver_library =&gt; &quot;\\policySyn\\ojdbc6.jar&quot;</span><br><span class=\"line\">    #数据库地址</span><br><span class=\"line\">        jdbc_connection_string =&gt; &quot;jdbc:oracle:thin:@192.168.105.16:1523:gnnt&quot;</span><br><span class=\"line\">    #数据库用户名密码</span><br><span class=\"line\">        jdbc_user =&gt; &quot;plane_tick&quot;</span><br><span class=\"line\">        jdbc_password =&gt; &quot;ora123&quot;</span><br><span class=\"line\">    #数据库驱动类</span><br><span class=\"line\">        jdbc_driver_class =&gt; &quot;Java::oracle.jdbc.driver.OracleDriver&quot;</span><br><span class=\"line\">        jdbc_paging_enabled =&gt; &quot;true&quot;</span><br><span class=\"line\">        jdbc_page_size =&gt; &quot;50000&quot;</span><br><span class=\"line\">    #执行sql绝对路径 或相对路径</span><br><span class=\"line\">        statement_filepath  =&gt; &quot;\\policySyn\\syn.sql&quot;</span><br><span class=\"line\">    #更新时间记录和存放</span><br><span class=\"line\">        record_last_run =&gt; &quot;true&quot;</span><br><span class=\"line\">        last_run_metadata_path =&gt; &quot;\\policySyn\\synDate.txt&quot;</span><br><span class=\"line\">    #定时更新频率 20分钟一次</span><br><span class=\"line\">        schedule =&gt; &quot;* * * * *&quot;</span><br><span class=\"line\">    #索引类型</span><br><span class=\"line\">        type =&gt; &quot;policyteam_dev&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//同步目的地</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    elasticsearch&#123;</span><br><span class=\"line\">        hosts =&gt; &quot;http://192.168.105.13:9200&quot;</span><br><span class=\"line\">        index =&gt; &quot;policyteam_dev&quot;</span><br><span class=\"line\">        document_id =&gt; &quot;%&#123;zcbh&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stdout &#123;</span><br><span class=\"line\">        codec =&gt; json_lines</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"3-启动同步脚本\"><a href=\"#3-启动同步脚本\" class=\"headerlink\" title=\"3.启动同步脚本\"></a>3.启动同步脚本</h2><p>进入Logstash目录bin文件夹下执行脚本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#config为执行配置文件绝对路径或相对路径</span></span><br><span class=\"line\">logstash -f [config]</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Python验证码识别","date":"2018-05-25T08:27:08.000Z","_content":"\n>Python 第三方库 PIL Pytesseract tesseract-ocr  进行爬虫验证码识别\n\n## 1.Python 第三方库依赖\n   通过cmd控制台进入python pip目录执行pip install requests 进行安装\n   其他的第三方库都可以通过这种形式进行安装\n```bash\n#进入Python脚本文件夹\ncd C:\\Users\\serwer\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts\n#安装 requests 请求http库\npip install requests \n#安装 pytesseract 基础识别库\npip install pytesseract\n#安装 Image图片处理 为更好识别验证码\npip install Image\n#显示requests相关信息\npip show requests\n```\n   可以通过配置pip环境变量达到在任意文件夹目录进行pip脚本执行\n\n## 2.OCR图形识别软件 （Google维护的开源的OCR）\nTesseract-ocr [github地址](https://github.com/tesseract-ocr/tesseract) window 可选择[Tesseract-ocr-setup-3.05.01.exe](https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-setup-4.00.00dev.exe)\n\n``` pthyon\n    import requests\n    import pytesseract\n    from PIL import Image\n    \n    imagePath = \"D:\\\\1.gif\"\n    imageUrl = \"http://112.112.9.205:88/ValiateNum.ashx\"\n    \n    def getAuthCodeImage():\n        r = requests.get(imageUrl， stream=True)\n        with open(imagePath， 'wb') as fd:\n    \t    for chunk in r.iter_content(1024):\n            \tfd.write(chunk)\n    \t        fd.close\n    \n    def disposeImage():\n    \timage = Image.open(imagePath)\n    \ttable = []    \n    \tfor i in range(256):    \n    \t    if i < 140:    \n    \t        table.append(0)    \n    \t    else:    \n    \t        table.append(1)  \n    \timage = image.convert('L')\n    \timage = image.resize((300，100)，Image.BILINEAR)\n    \timage = image.point(table，'1')  \n    \timage.save(\"D:\\\\1.png\"，\"png\")\n    \n    \n    def discernCode():\n    \tim=Image.open(\"D:\\\\1.png\")\n    \tcode = pytesseract.image_to_string(im)\n    \tprint(code)\n    \n    #获取验证码并保存\n    getAuthCodeImage()\n    #验证码图片处理 灰阶处理\n    disposeImage()\n    #识别验证码\n    discernCode()\n```\n\n\n","source":"_posts/Python 第三方库 PIL.md","raw":"---\ntitle: Python验证码识别\ndate: 2018-05-25 16:27:08\ncategories: [Python]\ntags:\n    - Python\n---\n\n>Python 第三方库 PIL Pytesseract tesseract-ocr  进行爬虫验证码识别\n\n## 1.Python 第三方库依赖\n   通过cmd控制台进入python pip目录执行pip install requests 进行安装\n   其他的第三方库都可以通过这种形式进行安装\n```bash\n#进入Python脚本文件夹\ncd C:\\Users\\serwer\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts\n#安装 requests 请求http库\npip install requests \n#安装 pytesseract 基础识别库\npip install pytesseract\n#安装 Image图片处理 为更好识别验证码\npip install Image\n#显示requests相关信息\npip show requests\n```\n   可以通过配置pip环境变量达到在任意文件夹目录进行pip脚本执行\n\n## 2.OCR图形识别软件 （Google维护的开源的OCR）\nTesseract-ocr [github地址](https://github.com/tesseract-ocr/tesseract) window 可选择[Tesseract-ocr-setup-3.05.01.exe](https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-setup-4.00.00dev.exe)\n\n``` pthyon\n    import requests\n    import pytesseract\n    from PIL import Image\n    \n    imagePath = \"D:\\\\1.gif\"\n    imageUrl = \"http://112.112.9.205:88/ValiateNum.ashx\"\n    \n    def getAuthCodeImage():\n        r = requests.get(imageUrl， stream=True)\n        with open(imagePath， 'wb') as fd:\n    \t    for chunk in r.iter_content(1024):\n            \tfd.write(chunk)\n    \t        fd.close\n    \n    def disposeImage():\n    \timage = Image.open(imagePath)\n    \ttable = []    \n    \tfor i in range(256):    \n    \t    if i < 140:    \n    \t        table.append(0)    \n    \t    else:    \n    \t        table.append(1)  \n    \timage = image.convert('L')\n    \timage = image.resize((300，100)，Image.BILINEAR)\n    \timage = image.point(table，'1')  \n    \timage.save(\"D:\\\\1.png\"，\"png\")\n    \n    \n    def discernCode():\n    \tim=Image.open(\"D:\\\\1.png\")\n    \tcode = pytesseract.image_to_string(im)\n    \tprint(code)\n    \n    #获取验证码并保存\n    getAuthCodeImage()\n    #验证码图片处理 灰阶处理\n    disposeImage()\n    #识别验证码\n    discernCode()\n```\n\n\n","slug":"Python 第三方库 PIL","published":1,"updated":"2019-03-27T02:16:16.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldtzt000kysqu4up2u2kq","content":"<blockquote>\n<p>Python 第三方库 PIL Pytesseract tesseract-ocr  进行爬虫验证码识别</p>\n</blockquote>\n<h2 id=\"1-Python-第三方库依赖\"><a href=\"#1-Python-第三方库依赖\" class=\"headerlink\" title=\"1.Python 第三方库依赖\"></a>1.Python 第三方库依赖</h2><p>   通过cmd控制台进入python pip目录执行pip install requests 进行安装<br>   其他的第三方库都可以通过这种形式进行安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入Python脚本文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> C:\\Users\\serwer\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts</span><br><span class=\"line\"><span class=\"comment\">#安装 requests 请求http库</span></span><br><span class=\"line\">pip install requests </span><br><span class=\"line\"><span class=\"comment\">#安装 pytesseract 基础识别库</span></span><br><span class=\"line\">pip install pytesseract</span><br><span class=\"line\"><span class=\"comment\">#安装 Image图片处理 为更好识别验证码</span></span><br><span class=\"line\">pip install Image</span><br><span class=\"line\"><span class=\"comment\">#显示requests相关信息</span></span><br><span class=\"line\">pip show requests</span><br></pre></td></tr></table></figure></p>\n<p>   可以通过配置pip环境变量达到在任意文件夹目录进行pip脚本执行</p>\n<h2 id=\"2-OCR图形识别软件-（Google维护的开源的OCR）\"><a href=\"#2-OCR图形识别软件-（Google维护的开源的OCR）\" class=\"headerlink\" title=\"2.OCR图形识别软件 （Google维护的开源的OCR）\"></a>2.OCR图形识别软件 （Google维护的开源的OCR）</h2><p>Tesseract-ocr <a href=\"https://github.com/tesseract-ocr/tesseract\" target=\"_blank\" rel=\"noopener\">github地址</a> window 可选择<a href=\"https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-setup-4.00.00dev.exe\" target=\"_blank\" rel=\"noopener\">Tesseract-ocr-setup-3.05.01.exe</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import pytesseract</span><br><span class=\"line\">from PIL import Image</span><br><span class=\"line\"></span><br><span class=\"line\">imagePath = &quot;D:\\\\1.gif&quot;</span><br><span class=\"line\">imageUrl = &quot;http://112.112.9.205:88/ValiateNum.ashx&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def getAuthCodeImage():</span><br><span class=\"line\">    r = requests.get(imageUrl， stream=True)</span><br><span class=\"line\">    with open(imagePath， &apos;wb&apos;) as fd:</span><br><span class=\"line\">\t    for chunk in r.iter_content(1024):</span><br><span class=\"line\">        \tfd.write(chunk)</span><br><span class=\"line\">\t        fd.close</span><br><span class=\"line\"></span><br><span class=\"line\">def disposeImage():</span><br><span class=\"line\">\timage = Image.open(imagePath)</span><br><span class=\"line\">\ttable = []    </span><br><span class=\"line\">\tfor i in range(256):    </span><br><span class=\"line\">\t    if i &lt; 140:    </span><br><span class=\"line\">\t        table.append(0)    </span><br><span class=\"line\">\t    else:    </span><br><span class=\"line\">\t        table.append(1)  </span><br><span class=\"line\">\timage = image.convert(&apos;L&apos;)</span><br><span class=\"line\">\timage = image.resize((300，100)，Image.BILINEAR)</span><br><span class=\"line\">\timage = image.point(table，&apos;1&apos;)  </span><br><span class=\"line\">\timage.save(&quot;D:\\\\1.png&quot;，&quot;png&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def discernCode():</span><br><span class=\"line\">\tim=Image.open(&quot;D:\\\\1.png&quot;)</span><br><span class=\"line\">\tcode = pytesseract.image_to_string(im)</span><br><span class=\"line\">\tprint(code)</span><br><span class=\"line\"></span><br><span class=\"line\">#获取验证码并保存</span><br><span class=\"line\">getAuthCodeImage()</span><br><span class=\"line\">#验证码图片处理 灰阶处理</span><br><span class=\"line\">disposeImage()</span><br><span class=\"line\">#识别验证码</span><br><span class=\"line\">discernCode()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Python 第三方库 PIL Pytesseract tesseract-ocr  进行爬虫验证码识别</p>\n</blockquote>\n<h2 id=\"1-Python-第三方库依赖\"><a href=\"#1-Python-第三方库依赖\" class=\"headerlink\" title=\"1.Python 第三方库依赖\"></a>1.Python 第三方库依赖</h2><p>   通过cmd控制台进入python pip目录执行pip install requests 进行安装<br>   其他的第三方库都可以通过这种形式进行安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入Python脚本文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> C:\\Users\\serwer\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts</span><br><span class=\"line\"><span class=\"comment\">#安装 requests 请求http库</span></span><br><span class=\"line\">pip install requests </span><br><span class=\"line\"><span class=\"comment\">#安装 pytesseract 基础识别库</span></span><br><span class=\"line\">pip install pytesseract</span><br><span class=\"line\"><span class=\"comment\">#安装 Image图片处理 为更好识别验证码</span></span><br><span class=\"line\">pip install Image</span><br><span class=\"line\"><span class=\"comment\">#显示requests相关信息</span></span><br><span class=\"line\">pip show requests</span><br></pre></td></tr></table></figure></p>\n<p>   可以通过配置pip环境变量达到在任意文件夹目录进行pip脚本执行</p>\n<h2 id=\"2-OCR图形识别软件-（Google维护的开源的OCR）\"><a href=\"#2-OCR图形识别软件-（Google维护的开源的OCR）\" class=\"headerlink\" title=\"2.OCR图形识别软件 （Google维护的开源的OCR）\"></a>2.OCR图形识别软件 （Google维护的开源的OCR）</h2><p>Tesseract-ocr <a href=\"https://github.com/tesseract-ocr/tesseract\" target=\"_blank\" rel=\"noopener\">github地址</a> window 可选择<a href=\"https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-setup-4.00.00dev.exe\" target=\"_blank\" rel=\"noopener\">Tesseract-ocr-setup-3.05.01.exe</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import pytesseract</span><br><span class=\"line\">from PIL import Image</span><br><span class=\"line\"></span><br><span class=\"line\">imagePath = &quot;D:\\\\1.gif&quot;</span><br><span class=\"line\">imageUrl = &quot;http://112.112.9.205:88/ValiateNum.ashx&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def getAuthCodeImage():</span><br><span class=\"line\">    r = requests.get(imageUrl， stream=True)</span><br><span class=\"line\">    with open(imagePath， &apos;wb&apos;) as fd:</span><br><span class=\"line\">\t    for chunk in r.iter_content(1024):</span><br><span class=\"line\">        \tfd.write(chunk)</span><br><span class=\"line\">\t        fd.close</span><br><span class=\"line\"></span><br><span class=\"line\">def disposeImage():</span><br><span class=\"line\">\timage = Image.open(imagePath)</span><br><span class=\"line\">\ttable = []    </span><br><span class=\"line\">\tfor i in range(256):    </span><br><span class=\"line\">\t    if i &lt; 140:    </span><br><span class=\"line\">\t        table.append(0)    </span><br><span class=\"line\">\t    else:    </span><br><span class=\"line\">\t        table.append(1)  </span><br><span class=\"line\">\timage = image.convert(&apos;L&apos;)</span><br><span class=\"line\">\timage = image.resize((300，100)，Image.BILINEAR)</span><br><span class=\"line\">\timage = image.point(table，&apos;1&apos;)  </span><br><span class=\"line\">\timage.save(&quot;D:\\\\1.png&quot;，&quot;png&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def discernCode():</span><br><span class=\"line\">\tim=Image.open(&quot;D:\\\\1.png&quot;)</span><br><span class=\"line\">\tcode = pytesseract.image_to_string(im)</span><br><span class=\"line\">\tprint(code)</span><br><span class=\"line\"></span><br><span class=\"line\">#获取验证码并保存</span><br><span class=\"line\">getAuthCodeImage()</span><br><span class=\"line\">#验证码图片处理 灰阶处理</span><br><span class=\"line\">disposeImage()</span><br><span class=\"line\">#识别验证码</span><br><span class=\"line\">discernCode()</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux-文件权限管理","date":"2018-07-25T07:07:09.000Z","_content":"\n![Linux](/images/linux-1.jpg)\n\n>为了保证文件系统的安全隐私，对文件进行权限控制，防止非法用户查看、修改、删除等操作。只有在指定用户或用户组才能进行操作，例如一些隐私文件或者文件夹不想被其他人进行访问查看可对文件进行权限控制。\n\n## 1. ls 命令查询文件属性\n``` bash\n[root@vultr ~]# ls -al\ntotal 44\ndr-xr-x---  4     root     root    4096      Jul 19 05:05 .\ndr-xr-xr-x 18    root     root    4096      Jun  5 21:42 ..\n-rw-------  1     root     root    4369       Jul 25 07:02 .bash_history\n-rw-r--r--  1     root     root    18           Dec 29  2013 .bash_logout\n-rw-r--r--  1     root     root     176         Dec 29  2013 .bash_profile\n-rw-r--r--  1     root     root     176         Dec 29  2013 .bashrc\ndrwx------ 3     root     root     4096       Jul 18 07:35 .cache\n-rw-r--r--  1     root     root      100         Dec 29  2013 .cshrc\ndrwxr----- 3     root     root      4096       Jun  5 21:45 .pki\n-rw-r--r--  1     root     root      129         Dec 29  2013 .tcshrc\n[权限]    [连接数][所有者][用户组][文件容量][修改时间] [文件名]\n```\n- ##### [权限]  \n第一个字符代表文件是 \"目录、文件或链接文件等\"\n    `[d]` 代表是目录，例如 .pki\n    `[-]` 代表是文件，例如 .tcshrc\n    `[l]` 代表为链接文件(linkfile)\n    `[b]` 代表设备文件里的可以供存储的接口设备\n    `[c]` 代表设备文件里的串行端口，例如键盘、鼠标\n接下来的3个为位一组，均为 \"rwx\" 3个参数组合\n    `[r]` 代表read 可读\n    `[w]` 代表write 可写\n    `[x]` 代表execute 可执行\n    `[-]` 代表没有权限\n    第一组代表 \"文件所有者的权限\"，第二组代表 \"同用户组的权限\"，第三组代表 \"其他非本用户组的权限\"\n- __[连接数]__ 文件的硬链接个数\n-  __[所有者]__ 文件的所有者账号\n- __[用户组]__ 文件的所有用户组\n- __[文件容量]__ 文件的容量 单位/B\n- __[修改时间]__ 文件的创建时间或最近的一次修改时间\n- __[文件名]__     文件的名称 带 \".\" 则表示当前文件为`隐藏文件`\n    \n## 3.改变文件属性和权限命令\n- ##### chgrp 改变文件所属用户组\n改变的用户组必须存在于`/etc/group`，对于不存在的用户组改变会执行失败\n``` bash\n#示例 [-R] 递归 文件或者目录下所有的的文件\nchgrp [-R] [文件或目录]\n#更新install.log用户组为user\nchgrp user install.log\n```\n- ##### chown 改变文件所有者\n改变的用户必须存在于`/etc/passwd`，对于不存在的用户改变会执行失败\n``` bash\n#示例 [-R] 递归 文件或者目录下所有的的文件\nchown [-R] [文件或目录]\n#更新install.log用户所属为test\nchown test install.log\n#可用.[用户组] 改变用户组 将install.log所属用户组改为groupTest\nchown .groupTest install.log\n```\n- ##### chmod 改变文件的权限\n改变rwx 读写执 3个权限，3个身份`owner`，`group`，`others`，组合9个权限。  \n  - 数字类型改变权限:\n  权限rwx按分数 `r : 4` ` w : 2`  `x : 1`，改变权限的组合方式按分数来决定权限rwxrwxrwx 对应777，rw--wx--- 对应610\n``` bash\n#示例 [-R] 递归 文件或者目录下所有的的文件\nchmod [-R] [分数组合] [文件或目录]\n#改变install.log的权限 763代表了 rwxrw---x\nchown 763 install.log\n```\n  - 符号类型改变权限:\n权限rwx按符号 u(user)，g(group)，o(others)，a(all)，+(加入)，-(除去)，=(设置)组合。\n``` bash\n#用户拥有读写，用户组读，其他执行 u=rw-，g=r--，o=--x\nchmod u=rw-，g=r--，o=--x install.log\n#所有身份都去除写权限 \nchmod a-r install.log\n#所有身份都添加执行权限\nchmod a+x install.log\n```\n\n## 2.RWX 对于文件和目录的差别\n##### 对于文件来说：\n- r  (read)  可以读取文件的实际内容\n- w (write) 可以编辑、新增、或修改文件的内容，但是不能删除文件\n- x (execute) 可以执行，可执行并非由文件的后缀来决定例如常见的`.exe` `.bat` `.com` 等，而是由x 属性来决定\n\n##### 对于文件目录来说：\n- r  (read contents in directory)  可以查询该目录下的文件名数据既可使用`ls`查询\n- w (modify contents of directory) 可以新建新的文件和目录、删除已存在的文件和目录（无视改文件的权限控制）、转义目录内的文件和文件夹\n- x (access directory) 可以进入该目录文件 既可使用`cd`进入该目录\n","source":"_posts/Linux-文件权限管理.md","raw":"---\ntitle: Linux-文件权限管理\ndate: 2018-07-25 15:07:09\ncategories: [Linux]\ntags:\n    - Linux\n---\n\n![Linux](/images/linux-1.jpg)\n\n>为了保证文件系统的安全隐私，对文件进行权限控制，防止非法用户查看、修改、删除等操作。只有在指定用户或用户组才能进行操作，例如一些隐私文件或者文件夹不想被其他人进行访问查看可对文件进行权限控制。\n\n## 1. ls 命令查询文件属性\n``` bash\n[root@vultr ~]# ls -al\ntotal 44\ndr-xr-x---  4     root     root    4096      Jul 19 05:05 .\ndr-xr-xr-x 18    root     root    4096      Jun  5 21:42 ..\n-rw-------  1     root     root    4369       Jul 25 07:02 .bash_history\n-rw-r--r--  1     root     root    18           Dec 29  2013 .bash_logout\n-rw-r--r--  1     root     root     176         Dec 29  2013 .bash_profile\n-rw-r--r--  1     root     root     176         Dec 29  2013 .bashrc\ndrwx------ 3     root     root     4096       Jul 18 07:35 .cache\n-rw-r--r--  1     root     root      100         Dec 29  2013 .cshrc\ndrwxr----- 3     root     root      4096       Jun  5 21:45 .pki\n-rw-r--r--  1     root     root      129         Dec 29  2013 .tcshrc\n[权限]    [连接数][所有者][用户组][文件容量][修改时间] [文件名]\n```\n- ##### [权限]  \n第一个字符代表文件是 \"目录、文件或链接文件等\"\n    `[d]` 代表是目录，例如 .pki\n    `[-]` 代表是文件，例如 .tcshrc\n    `[l]` 代表为链接文件(linkfile)\n    `[b]` 代表设备文件里的可以供存储的接口设备\n    `[c]` 代表设备文件里的串行端口，例如键盘、鼠标\n接下来的3个为位一组，均为 \"rwx\" 3个参数组合\n    `[r]` 代表read 可读\n    `[w]` 代表write 可写\n    `[x]` 代表execute 可执行\n    `[-]` 代表没有权限\n    第一组代表 \"文件所有者的权限\"，第二组代表 \"同用户组的权限\"，第三组代表 \"其他非本用户组的权限\"\n- __[连接数]__ 文件的硬链接个数\n-  __[所有者]__ 文件的所有者账号\n- __[用户组]__ 文件的所有用户组\n- __[文件容量]__ 文件的容量 单位/B\n- __[修改时间]__ 文件的创建时间或最近的一次修改时间\n- __[文件名]__     文件的名称 带 \".\" 则表示当前文件为`隐藏文件`\n    \n## 3.改变文件属性和权限命令\n- ##### chgrp 改变文件所属用户组\n改变的用户组必须存在于`/etc/group`，对于不存在的用户组改变会执行失败\n``` bash\n#示例 [-R] 递归 文件或者目录下所有的的文件\nchgrp [-R] [文件或目录]\n#更新install.log用户组为user\nchgrp user install.log\n```\n- ##### chown 改变文件所有者\n改变的用户必须存在于`/etc/passwd`，对于不存在的用户改变会执行失败\n``` bash\n#示例 [-R] 递归 文件或者目录下所有的的文件\nchown [-R] [文件或目录]\n#更新install.log用户所属为test\nchown test install.log\n#可用.[用户组] 改变用户组 将install.log所属用户组改为groupTest\nchown .groupTest install.log\n```\n- ##### chmod 改变文件的权限\n改变rwx 读写执 3个权限，3个身份`owner`，`group`，`others`，组合9个权限。  \n  - 数字类型改变权限:\n  权限rwx按分数 `r : 4` ` w : 2`  `x : 1`，改变权限的组合方式按分数来决定权限rwxrwxrwx 对应777，rw--wx--- 对应610\n``` bash\n#示例 [-R] 递归 文件或者目录下所有的的文件\nchmod [-R] [分数组合] [文件或目录]\n#改变install.log的权限 763代表了 rwxrw---x\nchown 763 install.log\n```\n  - 符号类型改变权限:\n权限rwx按符号 u(user)，g(group)，o(others)，a(all)，+(加入)，-(除去)，=(设置)组合。\n``` bash\n#用户拥有读写，用户组读，其他执行 u=rw-，g=r--，o=--x\nchmod u=rw-，g=r--，o=--x install.log\n#所有身份都去除写权限 \nchmod a-r install.log\n#所有身份都添加执行权限\nchmod a+x install.log\n```\n\n## 2.RWX 对于文件和目录的差别\n##### 对于文件来说：\n- r  (read)  可以读取文件的实际内容\n- w (write) 可以编辑、新增、或修改文件的内容，但是不能删除文件\n- x (execute) 可以执行，可执行并非由文件的后缀来决定例如常见的`.exe` `.bat` `.com` 等，而是由x 属性来决定\n\n##### 对于文件目录来说：\n- r  (read contents in directory)  可以查询该目录下的文件名数据既可使用`ls`查询\n- w (modify contents of directory) 可以新建新的文件和目录、删除已存在的文件和目录（无视改文件的权限控制）、转义目录内的文件和文件夹\n- x (access directory) 可以进入该目录文件 既可使用`cd`进入该目录\n","slug":"Linux-文件权限管理","published":1,"updated":"2019-03-27T02:16:16.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldu02000pysqu8chc3g39","content":"<p><img src=\"/images/linux-1.jpg\" alt=\"Linux\"></p>\n<blockquote>\n<p>为了保证文件系统的安全隐私，对文件进行权限控制，防止非法用户查看、修改、删除等操作。只有在指定用户或用户组才能进行操作，例如一些隐私文件或者文件夹不想被其他人进行访问查看可对文件进行权限控制。</p>\n</blockquote>\n<h2 id=\"1-ls-命令查询文件属性\"><a href=\"#1-ls-命令查询文件属性\" class=\"headerlink\" title=\"1. ls 命令查询文件属性\"></a>1. ls 命令查询文件属性</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr ~]<span class=\"comment\"># ls -al</span></span><br><span class=\"line\">total 44</span><br><span class=\"line\">dr-xr-x---  4     root     root    4096      Jul 19 05:05 .</span><br><span class=\"line\">dr-xr-xr-x 18    root     root    4096      Jun  5 21:42 ..</span><br><span class=\"line\">-rw-------  1     root     root    4369       Jul 25 07:02 .bash_history</span><br><span class=\"line\">-rw-r--r--  1     root     root    18           Dec 29  2013 .bash_logout</span><br><span class=\"line\">-rw-r--r--  1     root     root     176         Dec 29  2013 .bash_profile</span><br><span class=\"line\">-rw-r--r--  1     root     root     176         Dec 29  2013 .bashrc</span><br><span class=\"line\">drwx------ 3     root     root     4096       Jul 18 07:35 .cache</span><br><span class=\"line\">-rw-r--r--  1     root     root      100         Dec 29  2013 .cshrc</span><br><span class=\"line\">drwxr----- 3     root     root      4096       Jun  5 21:45 .pki</span><br><span class=\"line\">-rw-r--r--  1     root     root      129         Dec 29  2013 .tcshrc</span><br><span class=\"line\">[权限]    [连接数][所有者][用户组][文件容量][修改时间] [文件名]</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"[权限]\"></a>[权限]</h5>第一个字符代表文件是 “目录、文件或链接文件等”<br>  <code>[d]</code> 代表是目录，例如 .pki<br>  <code>[-]</code> 代表是文件，例如 .tcshrc<br>  <code>[l]</code> 代表为链接文件(linkfile)<br>  <code>[b]</code> 代表设备文件里的可以供存储的接口设备<br>  <code>[c]</code> 代表设备文件里的串行端口，例如键盘、鼠标<br>接下来的3个为位一组，均为 “rwx” 3个参数组合<br>  <code>[r]</code> 代表read 可读<br>  <code>[w]</code> 代表write 可写<br>  <code>[x]</code> 代表execute 可执行<br>  <code>[-]</code> 代表没有权限<br>  第一组代表 “文件所有者的权限”，第二组代表 “同用户组的权限”，第三组代表 “其他非本用户组的权限”</li>\n<li><strong>[连接数]</strong> 文件的硬链接个数</li>\n<li><strong>[所有者]</strong> 文件的所有者账号</li>\n<li><strong>[用户组]</strong> 文件的所有用户组</li>\n<li><strong>[文件容量]</strong> 文件的容量 单位/B</li>\n<li><strong>[修改时间]</strong> 文件的创建时间或最近的一次修改时间</li>\n<li><strong>[文件名]</strong>     文件的名称 带 “.” 则表示当前文件为<code>隐藏文件</code></li>\n</ul>\n<h2 id=\"3-改变文件属性和权限命令\"><a href=\"#3-改变文件属性和权限命令\" class=\"headerlink\" title=\"3.改变文件属性和权限命令\"></a>3.改变文件属性和权限命令</h2><ul>\n<li><h5 id=\"chgrp-改变文件所属用户组\"><a href=\"#chgrp-改变文件所属用户组\" class=\"headerlink\" title=\"chgrp 改变文件所属用户组\"></a>chgrp 改变文件所属用户组</h5><p>改变的用户组必须存在于<code>/etc/group</code>，对于不存在的用户组改变会执行失败</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例 [-R] 递归 文件或者目录下所有的的文件</span></span><br><span class=\"line\">chgrp [-R] [文件或目录]</span><br><span class=\"line\"><span class=\"comment\">#更新install.log用户组为user</span></span><br><span class=\"line\">chgrp user install.log</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"chown-改变文件所有者\"><a href=\"#chown-改变文件所有者\" class=\"headerlink\" title=\"chown 改变文件所有者\"></a>chown 改变文件所有者</h5><p>改变的用户必须存在于<code>/etc/passwd</code>，对于不存在的用户改变会执行失败</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例 [-R] 递归 文件或者目录下所有的的文件</span></span><br><span class=\"line\">chown [-R] [文件或目录]</span><br><span class=\"line\"><span class=\"comment\">#更新install.log用户所属为test</span></span><br><span class=\"line\">chown <span class=\"built_in\">test</span> install.log</span><br><span class=\"line\"><span class=\"comment\">#可用.[用户组] 改变用户组 将install.log所属用户组改为groupTest</span></span><br><span class=\"line\">chown .groupTest install.log</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"chmod-改变文件的权限\"><a href=\"#chmod-改变文件的权限\" class=\"headerlink\" title=\"chmod 改变文件的权限\"></a>chmod 改变文件的权限</h5><p>改变rwx 读写执 3个权限，3个身份<code>owner</code>，<code>group</code>，<code>others</code>，组合9个权限。  </p>\n<ul>\n<li><p>数字类型改变权限:<br>权限rwx按分数 <code>r : 4</code> <code>w : 2</code>  <code>x : 1</code>，改变权限的组合方式按分数来决定权限rwxrwxrwx 对应777，rw–wx— 对应610</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例 [-R] 递归 文件或者目录下所有的的文件</span></span><br><span class=\"line\">chmod [-R] [分数组合] [文件或目录]</span><br><span class=\"line\"><span class=\"comment\">#改变install.log的权限 763代表了 rwxrw---x</span></span><br><span class=\"line\">chown 763 install.log</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>符号类型改变权限:<br>权限rwx按符号 u(user)，g(group)，o(others)，a(all)，+(加入)，-(除去)，=(设置)组合。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#用户拥有读写，用户组读，其他执行 u=rw-，g=r--，o=--x</span></span><br><span class=\"line\">chmod u=rw-，g=r--，o=--x install.log</span><br><span class=\"line\"><span class=\"comment\">#所有身份都去除写权限 </span></span><br><span class=\"line\">chmod a-r install.log</span><br><span class=\"line\"><span class=\"comment\">#所有身份都添加执行权限</span></span><br><span class=\"line\">chmod a+x install.log</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-RWX-对于文件和目录的差别\"><a href=\"#2-RWX-对于文件和目录的差别\" class=\"headerlink\" title=\"2.RWX 对于文件和目录的差别\"></a>2.RWX 对于文件和目录的差别</h2><h5 id=\"对于文件来说：\"><a href=\"#对于文件来说：\" class=\"headerlink\" title=\"对于文件来说：\"></a>对于文件来说：</h5><ul>\n<li>r  (read)  可以读取文件的实际内容</li>\n<li>w (write) 可以编辑、新增、或修改文件的内容，但是不能删除文件</li>\n<li>x (execute) 可以执行，可执行并非由文件的后缀来决定例如常见的<code>.exe</code> <code>.bat</code> <code>.com</code> 等，而是由x 属性来决定</li>\n</ul>\n<h5 id=\"对于文件目录来说：\"><a href=\"#对于文件目录来说：\" class=\"headerlink\" title=\"对于文件目录来说：\"></a>对于文件目录来说：</h5><ul>\n<li>r  (read contents in directory)  可以查询该目录下的文件名数据既可使用<code>ls</code>查询</li>\n<li>w (modify contents of directory) 可以新建新的文件和目录、删除已存在的文件和目录（无视改文件的权限控制）、转义目录内的文件和文件夹</li>\n<li>x (access directory) 可以进入该目录文件 既可使用<code>cd</code>进入该目录</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/linux-1.jpg\" alt=\"Linux\"></p>\n<blockquote>\n<p>为了保证文件系统的安全隐私，对文件进行权限控制，防止非法用户查看、修改、删除等操作。只有在指定用户或用户组才能进行操作，例如一些隐私文件或者文件夹不想被其他人进行访问查看可对文件进行权限控制。</p>\n</blockquote>\n<h2 id=\"1-ls-命令查询文件属性\"><a href=\"#1-ls-命令查询文件属性\" class=\"headerlink\" title=\"1. ls 命令查询文件属性\"></a>1. ls 命令查询文件属性</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr ~]<span class=\"comment\"># ls -al</span></span><br><span class=\"line\">total 44</span><br><span class=\"line\">dr-xr-x---  4     root     root    4096      Jul 19 05:05 .</span><br><span class=\"line\">dr-xr-xr-x 18    root     root    4096      Jun  5 21:42 ..</span><br><span class=\"line\">-rw-------  1     root     root    4369       Jul 25 07:02 .bash_history</span><br><span class=\"line\">-rw-r--r--  1     root     root    18           Dec 29  2013 .bash_logout</span><br><span class=\"line\">-rw-r--r--  1     root     root     176         Dec 29  2013 .bash_profile</span><br><span class=\"line\">-rw-r--r--  1     root     root     176         Dec 29  2013 .bashrc</span><br><span class=\"line\">drwx------ 3     root     root     4096       Jul 18 07:35 .cache</span><br><span class=\"line\">-rw-r--r--  1     root     root      100         Dec 29  2013 .cshrc</span><br><span class=\"line\">drwxr----- 3     root     root      4096       Jun  5 21:45 .pki</span><br><span class=\"line\">-rw-r--r--  1     root     root      129         Dec 29  2013 .tcshrc</span><br><span class=\"line\">[权限]    [连接数][所有者][用户组][文件容量][修改时间] [文件名]</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h5 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"[权限]\"></a>[权限]</h5>第一个字符代表文件是 “目录、文件或链接文件等”<br>  <code>[d]</code> 代表是目录，例如 .pki<br>  <code>[-]</code> 代表是文件，例如 .tcshrc<br>  <code>[l]</code> 代表为链接文件(linkfile)<br>  <code>[b]</code> 代表设备文件里的可以供存储的接口设备<br>  <code>[c]</code> 代表设备文件里的串行端口，例如键盘、鼠标<br>接下来的3个为位一组，均为 “rwx” 3个参数组合<br>  <code>[r]</code> 代表read 可读<br>  <code>[w]</code> 代表write 可写<br>  <code>[x]</code> 代表execute 可执行<br>  <code>[-]</code> 代表没有权限<br>  第一组代表 “文件所有者的权限”，第二组代表 “同用户组的权限”，第三组代表 “其他非本用户组的权限”</li>\n<li><strong>[连接数]</strong> 文件的硬链接个数</li>\n<li><strong>[所有者]</strong> 文件的所有者账号</li>\n<li><strong>[用户组]</strong> 文件的所有用户组</li>\n<li><strong>[文件容量]</strong> 文件的容量 单位/B</li>\n<li><strong>[修改时间]</strong> 文件的创建时间或最近的一次修改时间</li>\n<li><strong>[文件名]</strong>     文件的名称 带 “.” 则表示当前文件为<code>隐藏文件</code></li>\n</ul>\n<h2 id=\"3-改变文件属性和权限命令\"><a href=\"#3-改变文件属性和权限命令\" class=\"headerlink\" title=\"3.改变文件属性和权限命令\"></a>3.改变文件属性和权限命令</h2><ul>\n<li><h5 id=\"chgrp-改变文件所属用户组\"><a href=\"#chgrp-改变文件所属用户组\" class=\"headerlink\" title=\"chgrp 改变文件所属用户组\"></a>chgrp 改变文件所属用户组</h5><p>改变的用户组必须存在于<code>/etc/group</code>，对于不存在的用户组改变会执行失败</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例 [-R] 递归 文件或者目录下所有的的文件</span></span><br><span class=\"line\">chgrp [-R] [文件或目录]</span><br><span class=\"line\"><span class=\"comment\">#更新install.log用户组为user</span></span><br><span class=\"line\">chgrp user install.log</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"chown-改变文件所有者\"><a href=\"#chown-改变文件所有者\" class=\"headerlink\" title=\"chown 改变文件所有者\"></a>chown 改变文件所有者</h5><p>改变的用户必须存在于<code>/etc/passwd</code>，对于不存在的用户改变会执行失败</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例 [-R] 递归 文件或者目录下所有的的文件</span></span><br><span class=\"line\">chown [-R] [文件或目录]</span><br><span class=\"line\"><span class=\"comment\">#更新install.log用户所属为test</span></span><br><span class=\"line\">chown <span class=\"built_in\">test</span> install.log</span><br><span class=\"line\"><span class=\"comment\">#可用.[用户组] 改变用户组 将install.log所属用户组改为groupTest</span></span><br><span class=\"line\">chown .groupTest install.log</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"chmod-改变文件的权限\"><a href=\"#chmod-改变文件的权限\" class=\"headerlink\" title=\"chmod 改变文件的权限\"></a>chmod 改变文件的权限</h5><p>改变rwx 读写执 3个权限，3个身份<code>owner</code>，<code>group</code>，<code>others</code>，组合9个权限。  </p>\n<ul>\n<li><p>数字类型改变权限:<br>权限rwx按分数 <code>r : 4</code> <code>w : 2</code>  <code>x : 1</code>，改变权限的组合方式按分数来决定权限rwxrwxrwx 对应777，rw–wx— 对应610</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例 [-R] 递归 文件或者目录下所有的的文件</span></span><br><span class=\"line\">chmod [-R] [分数组合] [文件或目录]</span><br><span class=\"line\"><span class=\"comment\">#改变install.log的权限 763代表了 rwxrw---x</span></span><br><span class=\"line\">chown 763 install.log</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>符号类型改变权限:<br>权限rwx按符号 u(user)，g(group)，o(others)，a(all)，+(加入)，-(除去)，=(设置)组合。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#用户拥有读写，用户组读，其他执行 u=rw-，g=r--，o=--x</span></span><br><span class=\"line\">chmod u=rw-，g=r--，o=--x install.log</span><br><span class=\"line\"><span class=\"comment\">#所有身份都去除写权限 </span></span><br><span class=\"line\">chmod a-r install.log</span><br><span class=\"line\"><span class=\"comment\">#所有身份都添加执行权限</span></span><br><span class=\"line\">chmod a+x install.log</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-RWX-对于文件和目录的差别\"><a href=\"#2-RWX-对于文件和目录的差别\" class=\"headerlink\" title=\"2.RWX 对于文件和目录的差别\"></a>2.RWX 对于文件和目录的差别</h2><h5 id=\"对于文件来说：\"><a href=\"#对于文件来说：\" class=\"headerlink\" title=\"对于文件来说：\"></a>对于文件来说：</h5><ul>\n<li>r  (read)  可以读取文件的实际内容</li>\n<li>w (write) 可以编辑、新增、或修改文件的内容，但是不能删除文件</li>\n<li>x (execute) 可以执行，可执行并非由文件的后缀来决定例如常见的<code>.exe</code> <code>.bat</code> <code>.com</code> 等，而是由x 属性来决定</li>\n</ul>\n<h5 id=\"对于文件目录来说：\"><a href=\"#对于文件目录来说：\" class=\"headerlink\" title=\"对于文件目录来说：\"></a>对于文件目录来说：</h5><ul>\n<li>r  (read contents in directory)  可以查询该目录下的文件名数据既可使用<code>ls</code>查询</li>\n<li>w (modify contents of directory) 可以新建新的文件和目录、删除已存在的文件和目录（无视改文件的权限控制）、转义目录内的文件和文件夹</li>\n<li>x (access directory) 可以进入该目录文件 既可使用<code>cd</code>进入该目录</li>\n</ul>\n"},{"title":"RabbitMQ 消息队列中间件","date":"2019-03-20T06:35:19.000Z","_content":"![](/images/RabbitMQ.jpg)\n\n> RabbitMq消息队列中间件记录一些基本的概念和实际项目运用，消息队列常常会作为解决项目之间解耦的方案之一，特点异步消息可持久化不丢失高可用。实际项目中有各类场景可使用消息队列，例如发送邮件模块、业务消息通知、异步回调结果、日志信息的收集聚合等。\n\n## RabbitMQ\nRabbitMq 是一款由`erlang`开发实现 AMQP（Advanced Message Queueing Protocal）的开源消息中间件，消息中间件主要运用于组件之间解耦，消息发送者不需关心消息消费者的存在，AMQP 的主要特征是面向消息、队列、路由（点对点和发布/订阅）、可靠性、安全。\n\n##### 安装\n[Rabbit官方网站](http://www.rabbitmq.com/)进行下载，由于 RabbitMQ 由[ERLANG](http://www.erlang.org/downloads) 开发需要安装相关环境,具体版本查看官方文档。安装完毕可以通过http://127.0.0.1:15672 查看 RabbitMQ 管理中心，包含了 RabbitMQ 配置主题、队列、运行情况、连接等。\n初始登陆账号：admin 密码：admin\n![RabbitMQ管理中心](/images/RabbitMQ-Admin.png)\n\n## SpringBoot 集成\nSpringBoot 微服务项目集成 RabbitMQ 特别方便，`Maven`项目依赖添加`spring-boot-starter-amqp`依赖然后进行基本配置。\n##### Maven \t依赖\n``` xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```\n##### yml 配置\n``` properties\nspring:\n  rabbitmq:\n  host: ip地址\n  port: 端口号默认5672\n  username: 用户名\n  password: 密码\n  publisher-confirms: 是否启动推送自动确认 true or false\n  listener:\n    direct:\n\t  acknowledge-mode: ack消息确认方式：auto 自动 manual 手动 none 不确认\n```\n\n> ACK机制就是为了保证数据一定被消费确认，默认配置为`auto`自动,在实际项目中如果消费者出现程序异常或者意外服务宕机会导致消息未消费但是ACK自动确认后，提供者并不知道消费者消息失败导致业务数据不一致。ACK 可以设置为手动 `manual`只有当消费者告诉中间件已经消费中间件才会吧这条消息删除掉,否者这条消息会一直在队列中存在直到消费者消息掉。\n","source":"_posts/RabbitMq 消息队列中间件.md","raw":"---\ntitle: RabbitMQ 消息队列中间件\ndate: 2019-03-20 14:35:19\ncategories: [Java]\ntags:\n\t - 中间件\n---\n![](/images/RabbitMQ.jpg)\n\n> RabbitMq消息队列中间件记录一些基本的概念和实际项目运用，消息队列常常会作为解决项目之间解耦的方案之一，特点异步消息可持久化不丢失高可用。实际项目中有各类场景可使用消息队列，例如发送邮件模块、业务消息通知、异步回调结果、日志信息的收集聚合等。\n\n## RabbitMQ\nRabbitMq 是一款由`erlang`开发实现 AMQP（Advanced Message Queueing Protocal）的开源消息中间件，消息中间件主要运用于组件之间解耦，消息发送者不需关心消息消费者的存在，AMQP 的主要特征是面向消息、队列、路由（点对点和发布/订阅）、可靠性、安全。\n\n##### 安装\n[Rabbit官方网站](http://www.rabbitmq.com/)进行下载，由于 RabbitMQ 由[ERLANG](http://www.erlang.org/downloads) 开发需要安装相关环境,具体版本查看官方文档。安装完毕可以通过http://127.0.0.1:15672 查看 RabbitMQ 管理中心，包含了 RabbitMQ 配置主题、队列、运行情况、连接等。\n初始登陆账号：admin 密码：admin\n![RabbitMQ管理中心](/images/RabbitMQ-Admin.png)\n\n## SpringBoot 集成\nSpringBoot 微服务项目集成 RabbitMQ 特别方便，`Maven`项目依赖添加`spring-boot-starter-amqp`依赖然后进行基本配置。\n##### Maven \t依赖\n``` xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```\n##### yml 配置\n``` properties\nspring:\n  rabbitmq:\n  host: ip地址\n  port: 端口号默认5672\n  username: 用户名\n  password: 密码\n  publisher-confirms: 是否启动推送自动确认 true or false\n  listener:\n    direct:\n\t  acknowledge-mode: ack消息确认方式：auto 自动 manual 手动 none 不确认\n```\n\n> ACK机制就是为了保证数据一定被消费确认，默认配置为`auto`自动,在实际项目中如果消费者出现程序异常或者意外服务宕机会导致消息未消费但是ACK自动确认后，提供者并不知道消费者消息失败导致业务数据不一致。ACK 可以设置为手动 `manual`只有当消费者告诉中间件已经消费中间件才会吧这条消息删除掉,否者这条消息会一直在队列中存在直到消费者消息掉。\n","slug":"RabbitMq 消息队列中间件","published":1,"updated":"2019-03-27T02:16:16.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldu04000rysqucre0c0bx","content":"<p><img src=\"/images/RabbitMQ.jpg\" alt=\"\"></p>\n<blockquote>\n<p>RabbitMq消息队列中间件记录一些基本的概念和实际项目运用，消息队列常常会作为解决项目之间解耦的方案之一，特点异步消息可持久化不丢失高可用。实际项目中有各类场景可使用消息队列，例如发送邮件模块、业务消息通知、异步回调结果、日志信息的收集聚合等。</p>\n</blockquote>\n<h2 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h2><p>RabbitMq 是一款由<code>erlang</code>开发实现 AMQP（Advanced Message Queueing Protocal）的开源消息中间件，消息中间件主要运用于组件之间解耦，消息发送者不需关心消息消费者的存在，AMQP 的主要特征是面向消息、队列、路由（点对点和发布/订阅）、可靠性、安全。</p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><p><a href=\"http://www.rabbitmq.com/\" target=\"_blank\" rel=\"noopener\">Rabbit官方网站</a>进行下载，由于 RabbitMQ 由<a href=\"http://www.erlang.org/downloads\" target=\"_blank\" rel=\"noopener\">ERLANG</a> 开发需要安装相关环境,具体版本查看官方文档。安装完毕可以通过<a href=\"http://127.0.0.1:15672\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:15672</a> 查看 RabbitMQ 管理中心，包含了 RabbitMQ 配置主题、队列、运行情况、连接等。<br>初始登陆账号：admin 密码：admin<br><img src=\"/images/RabbitMQ-Admin.png\" alt=\"RabbitMQ管理中心\"></p>\n<h2 id=\"SpringBoot-集成\"><a href=\"#SpringBoot-集成\" class=\"headerlink\" title=\"SpringBoot 集成\"></a>SpringBoot 集成</h2><p>SpringBoot 微服务项目集成 RabbitMQ 特别方便，<code>Maven</code>项目依赖添加<code>spring-boot-starter-amqp</code>依赖然后进行基本配置。</p>\n<h5 id=\"Maven-依赖\"><a href=\"#Maven-依赖\" class=\"headerlink\" title=\"Maven     依赖\"></a>Maven     依赖</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"yml-配置\"><a href=\"#yml-配置\" class=\"headerlink\" title=\"yml 配置\"></a>yml 配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">  host: ip地址</span><br><span class=\"line\">  port: 端口号默认5672</span><br><span class=\"line\">  username: 用户名</span><br><span class=\"line\">  password: 密码</span><br><span class=\"line\">  publisher-confirms: 是否启动推送自动确认 true or false</span><br><span class=\"line\">  listener:</span><br><span class=\"line\">    direct:</span><br><span class=\"line\">\t  acknowledge-mode: ack消息确认方式：auto 自动 manual 手动 none 不确认</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ACK机制就是为了保证数据一定被消费确认，默认配置为<code>auto</code>自动,在实际项目中如果消费者出现程序异常或者意外服务宕机会导致消息未消费但是ACK自动确认后，提供者并不知道消费者消息失败导致业务数据不一致。ACK 可以设置为手动 <code>manual</code>只有当消费者告诉中间件已经消费中间件才会吧这条消息删除掉,否者这条消息会一直在队列中存在直到消费者消息掉。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/RabbitMQ.jpg\" alt=\"\"></p>\n<blockquote>\n<p>RabbitMq消息队列中间件记录一些基本的概念和实际项目运用，消息队列常常会作为解决项目之间解耦的方案之一，特点异步消息可持久化不丢失高可用。实际项目中有各类场景可使用消息队列，例如发送邮件模块、业务消息通知、异步回调结果、日志信息的收集聚合等。</p>\n</blockquote>\n<h2 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h2><p>RabbitMq 是一款由<code>erlang</code>开发实现 AMQP（Advanced Message Queueing Protocal）的开源消息中间件，消息中间件主要运用于组件之间解耦，消息发送者不需关心消息消费者的存在，AMQP 的主要特征是面向消息、队列、路由（点对点和发布/订阅）、可靠性、安全。</p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><p><a href=\"http://www.rabbitmq.com/\" target=\"_blank\" rel=\"noopener\">Rabbit官方网站</a>进行下载，由于 RabbitMQ 由<a href=\"http://www.erlang.org/downloads\" target=\"_blank\" rel=\"noopener\">ERLANG</a> 开发需要安装相关环境,具体版本查看官方文档。安装完毕可以通过<a href=\"http://127.0.0.1:15672\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:15672</a> 查看 RabbitMQ 管理中心，包含了 RabbitMQ 配置主题、队列、运行情况、连接等。<br>初始登陆账号：admin 密码：admin<br><img src=\"/images/RabbitMQ-Admin.png\" alt=\"RabbitMQ管理中心\"></p>\n<h2 id=\"SpringBoot-集成\"><a href=\"#SpringBoot-集成\" class=\"headerlink\" title=\"SpringBoot 集成\"></a>SpringBoot 集成</h2><p>SpringBoot 微服务项目集成 RabbitMQ 特别方便，<code>Maven</code>项目依赖添加<code>spring-boot-starter-amqp</code>依赖然后进行基本配置。</p>\n<h5 id=\"Maven-依赖\"><a href=\"#Maven-依赖\" class=\"headerlink\" title=\"Maven     依赖\"></a>Maven     依赖</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"yml-配置\"><a href=\"#yml-配置\" class=\"headerlink\" title=\"yml 配置\"></a>yml 配置</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  rabbitmq:</span><br><span class=\"line\">  host: ip地址</span><br><span class=\"line\">  port: 端口号默认5672</span><br><span class=\"line\">  username: 用户名</span><br><span class=\"line\">  password: 密码</span><br><span class=\"line\">  publisher-confirms: 是否启动推送自动确认 true or false</span><br><span class=\"line\">  listener:</span><br><span class=\"line\">    direct:</span><br><span class=\"line\">\t  acknowledge-mode: ack消息确认方式：auto 自动 manual 手动 none 不确认</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ACK机制就是为了保证数据一定被消费确认，默认配置为<code>auto</code>自动,在实际项目中如果消费者出现程序异常或者意外服务宕机会导致消息未消费但是ACK自动确认后，提供者并不知道消费者消息失败导致业务数据不一致。ACK 可以设置为手动 <code>manual</code>只有当消费者告诉中间件已经消费中间件才会吧这条消息删除掉,否者这条消息会一直在队列中存在直到消费者消息掉。</p>\n</blockquote>\n"},{"title":"Redis 持久化","date":"2019-02-22T02:27:08.000Z","_content":"\n![](/images/redis.jpg)\n\n>记录学习Redis持久化，Redis为内存数据库当服务器异常关闭或重启会导致内存里的Redis数据丢失，Redis提供持久化方案来保证数据不丢失.\n\n## Redis 持久化\nRedis持久化有多种不同级别的方式\n- `RDB` 持久化可以在指定时间范围内服务器生成数据集的`Snapshot` 时间点快照`point-in-time `(数据库中所有键值对数据)\n- `AOF` 持久化记录服务器执行过的写操作命令，在服务启动通过执行命令来恢复数据集。`AOF`文件中的命令以Redis协议的格式保存，新命令会追加到文件末尾。\n- `RDB` `AOF`同时使用，在Redis重启时优先使用`AOF`进行数据恢复，因为`AOF`的保存的数据通常比`RDB`文件所保存的数据更完整。\n- 关闭持久化，数据仅在服务器运行时存在\n\n## RDB 持久化-配置\n- __save__ `save m n` (m 代表时间范围内 n 修改次数) 例如默认配置文件中的`save 900 1` 900秒内至少有一个Key发生变化则保存。\n- __stop-writes-on-bgsave-error__ 默认值yes，当Redis后台保存失败时是否停止接受写操作。如果已经设置一些监控可选择关闭。\n- __rdbcompression__ 默认值yes，对存储到磁盘的快照文件是否进行压缩(`LZF`算法压缩)，压缩会消耗一定CPU性能，具体根据实际情况设置是否压缩。\n- __rdbchecksum__ 默认值yes，对于存储的快照文件使用`CRC64`算法进行数据校验，校验大概消耗10%的性能，如需大量性能可关闭跳过校验过程。\n- __dbfilename__ 默认值 dump.rbd， 快照文件的名称。\n- __dir__ 默认当前目录，快照文件的存放文件路径\n\n#### RDB 优点\n- Redis在保存RDB会fork出子进程进行，几乎不影响Redis处理效率。\n- RDB非常适合灾难恢复（`disaster reconvery`），每次快照会生成完整的快照文件，可根据业务需求进行多备云备份。\n- RDB在恢复大数据集时比AOF速度更快。 \n\n#### RDB 缺点\n- RDB快照是定期生成，在时间范围内服务发生宕机可能导致会丢失部分数据\n- RDB在大数据快照生成上会消耗大量CPU性能，如CPU性能不足或紧张时会影响Redis对外服务。\n\n## AOF 持久化\n__AOF__（`append-only file`）持久化:将Redis执行的每一条写请求都记录在一个日志文件里，在Redis启动后会执行所有的写操作达来恢复数据。AOF 默认是关闭状态，AOF 提供3种fsync配置\n- __appendfsync no__ 不进行fsync，由OS来决定什么时候进行同步，速度最快\n- __appendfsync always__ 每一次操作都进行fsync，速度较慢\n- __appendfsync everysec__ 折中的做法，交由后台线程每秒fsync一次\n\n#### AOF优点\n数据更安全，在配置 appendfsync always或 appendfsync everysec会及时把每条执行的写操作都记录都追加到AOF文件末尾即使是服务出现故障至多损失1s之内的数据。\n\n\n\n查考地址\nhttp://doc.redisfans.com/topic/persistence.html\nhttps://baijiahao.baidu.com/s?id=1611955931705092609&wfr=spider&for=pc","source":"_posts/Redis持久化.md","raw":"---\ntitle: Redis 持久化\ndate: 2019-02-22 10:27:08\ncategories: [NoSql]\ntags:\n    - Redis\n---\n\n![](/images/redis.jpg)\n\n>记录学习Redis持久化，Redis为内存数据库当服务器异常关闭或重启会导致内存里的Redis数据丢失，Redis提供持久化方案来保证数据不丢失.\n\n## Redis 持久化\nRedis持久化有多种不同级别的方式\n- `RDB` 持久化可以在指定时间范围内服务器生成数据集的`Snapshot` 时间点快照`point-in-time `(数据库中所有键值对数据)\n- `AOF` 持久化记录服务器执行过的写操作命令，在服务启动通过执行命令来恢复数据集。`AOF`文件中的命令以Redis协议的格式保存，新命令会追加到文件末尾。\n- `RDB` `AOF`同时使用，在Redis重启时优先使用`AOF`进行数据恢复，因为`AOF`的保存的数据通常比`RDB`文件所保存的数据更完整。\n- 关闭持久化，数据仅在服务器运行时存在\n\n## RDB 持久化-配置\n- __save__ `save m n` (m 代表时间范围内 n 修改次数) 例如默认配置文件中的`save 900 1` 900秒内至少有一个Key发生变化则保存。\n- __stop-writes-on-bgsave-error__ 默认值yes，当Redis后台保存失败时是否停止接受写操作。如果已经设置一些监控可选择关闭。\n- __rdbcompression__ 默认值yes，对存储到磁盘的快照文件是否进行压缩(`LZF`算法压缩)，压缩会消耗一定CPU性能，具体根据实际情况设置是否压缩。\n- __rdbchecksum__ 默认值yes，对于存储的快照文件使用`CRC64`算法进行数据校验，校验大概消耗10%的性能，如需大量性能可关闭跳过校验过程。\n- __dbfilename__ 默认值 dump.rbd， 快照文件的名称。\n- __dir__ 默认当前目录，快照文件的存放文件路径\n\n#### RDB 优点\n- Redis在保存RDB会fork出子进程进行，几乎不影响Redis处理效率。\n- RDB非常适合灾难恢复（`disaster reconvery`），每次快照会生成完整的快照文件，可根据业务需求进行多备云备份。\n- RDB在恢复大数据集时比AOF速度更快。 \n\n#### RDB 缺点\n- RDB快照是定期生成，在时间范围内服务发生宕机可能导致会丢失部分数据\n- RDB在大数据快照生成上会消耗大量CPU性能，如CPU性能不足或紧张时会影响Redis对外服务。\n\n## AOF 持久化\n__AOF__（`append-only file`）持久化:将Redis执行的每一条写请求都记录在一个日志文件里，在Redis启动后会执行所有的写操作达来恢复数据。AOF 默认是关闭状态，AOF 提供3种fsync配置\n- __appendfsync no__ 不进行fsync，由OS来决定什么时候进行同步，速度最快\n- __appendfsync always__ 每一次操作都进行fsync，速度较慢\n- __appendfsync everysec__ 折中的做法，交由后台线程每秒fsync一次\n\n#### AOF优点\n数据更安全，在配置 appendfsync always或 appendfsync everysec会及时把每条执行的写操作都记录都追加到AOF文件末尾即使是服务出现故障至多损失1s之内的数据。\n\n\n\n查考地址\nhttp://doc.redisfans.com/topic/persistence.html\nhttps://baijiahao.baidu.com/s?id=1611955931705092609&wfr=spider&for=pc","slug":"Redis持久化","published":1,"updated":"2019-03-27T02:16:16.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldu06000wysqu4yp2pfks","content":"<p><img src=\"/images/redis.jpg\" alt=\"\"></p>\n<blockquote>\n<p>记录学习Redis持久化，Redis为内存数据库当服务器异常关闭或重启会导致内存里的Redis数据丢失，Redis提供持久化方案来保证数据不丢失.</p>\n</blockquote>\n<h2 id=\"Redis-持久化\"><a href=\"#Redis-持久化\" class=\"headerlink\" title=\"Redis 持久化\"></a>Redis 持久化</h2><p>Redis持久化有多种不同级别的方式</p>\n<ul>\n<li><code>RDB</code> 持久化可以在指定时间范围内服务器生成数据集的<code>Snapshot</code> 时间点快照<code>point-in-time</code>(数据库中所有键值对数据)</li>\n<li><code>AOF</code> 持久化记录服务器执行过的写操作命令，在服务启动通过执行命令来恢复数据集。<code>AOF</code>文件中的命令以Redis协议的格式保存，新命令会追加到文件末尾。</li>\n<li><code>RDB</code> <code>AOF</code>同时使用，在Redis重启时优先使用<code>AOF</code>进行数据恢复，因为<code>AOF</code>的保存的数据通常比<code>RDB</code>文件所保存的数据更完整。</li>\n<li>关闭持久化，数据仅在服务器运行时存在</li>\n</ul>\n<h2 id=\"RDB-持久化-配置\"><a href=\"#RDB-持久化-配置\" class=\"headerlink\" title=\"RDB 持久化-配置\"></a>RDB 持久化-配置</h2><ul>\n<li><strong>save</strong> <code>save m n</code> (m 代表时间范围内 n 修改次数) 例如默认配置文件中的<code>save 900 1</code> 900秒内至少有一个Key发生变化则保存。</li>\n<li><strong>stop-writes-on-bgsave-error</strong> 默认值yes，当Redis后台保存失败时是否停止接受写操作。如果已经设置一些监控可选择关闭。</li>\n<li><strong>rdbcompression</strong> 默认值yes，对存储到磁盘的快照文件是否进行压缩(<code>LZF</code>算法压缩)，压缩会消耗一定CPU性能，具体根据实际情况设置是否压缩。</li>\n<li><strong>rdbchecksum</strong> 默认值yes，对于存储的快照文件使用<code>CRC64</code>算法进行数据校验，校验大概消耗10%的性能，如需大量性能可关闭跳过校验过程。</li>\n<li><strong>dbfilename</strong> 默认值 dump.rbd， 快照文件的名称。</li>\n<li><strong>dir</strong> 默认当前目录，快照文件的存放文件路径</li>\n</ul>\n<h4 id=\"RDB-优点\"><a href=\"#RDB-优点\" class=\"headerlink\" title=\"RDB 优点\"></a>RDB 优点</h4><ul>\n<li>Redis在保存RDB会fork出子进程进行，几乎不影响Redis处理效率。</li>\n<li>RDB非常适合灾难恢复（<code>disaster reconvery</code>），每次快照会生成完整的快照文件，可根据业务需求进行多备云备份。</li>\n<li>RDB在恢复大数据集时比AOF速度更快。 </li>\n</ul>\n<h4 id=\"RDB-缺点\"><a href=\"#RDB-缺点\" class=\"headerlink\" title=\"RDB 缺点\"></a>RDB 缺点</h4><ul>\n<li>RDB快照是定期生成，在时间范围内服务发生宕机可能导致会丢失部分数据</li>\n<li>RDB在大数据快照生成上会消耗大量CPU性能，如CPU性能不足或紧张时会影响Redis对外服务。</li>\n</ul>\n<h2 id=\"AOF-持久化\"><a href=\"#AOF-持久化\" class=\"headerlink\" title=\"AOF 持久化\"></a>AOF 持久化</h2><p><strong>AOF</strong>（<code>append-only file</code>）持久化:将Redis执行的每一条写请求都记录在一个日志文件里，在Redis启动后会执行所有的写操作达来恢复数据。AOF 默认是关闭状态，AOF 提供3种fsync配置</p>\n<ul>\n<li><strong>appendfsync no</strong> 不进行fsync，由OS来决定什么时候进行同步，速度最快</li>\n<li><strong>appendfsync always</strong> 每一次操作都进行fsync，速度较慢</li>\n<li><strong>appendfsync everysec</strong> 折中的做法，交由后台线程每秒fsync一次</li>\n</ul>\n<h4 id=\"AOF优点\"><a href=\"#AOF优点\" class=\"headerlink\" title=\"AOF优点\"></a>AOF优点</h4><p>数据更安全，在配置 appendfsync always或 appendfsync everysec会及时把每条执行的写操作都记录都追加到AOF文件末尾即使是服务出现故障至多损失1s之内的数据。</p>\n<p>查考地址<br><a href=\"http://doc.redisfans.com/topic/persistence.html\" target=\"_blank\" rel=\"noopener\">http://doc.redisfans.com/topic/persistence.html</a><br><a href=\"https://baijiahao.baidu.com/s?id=1611955931705092609&amp;wfr=spider&amp;for=pc\" target=\"_blank\" rel=\"noopener\">https://baijiahao.baidu.com/s?id=1611955931705092609&amp;wfr=spider&amp;for=pc</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/redis.jpg\" alt=\"\"></p>\n<blockquote>\n<p>记录学习Redis持久化，Redis为内存数据库当服务器异常关闭或重启会导致内存里的Redis数据丢失，Redis提供持久化方案来保证数据不丢失.</p>\n</blockquote>\n<h2 id=\"Redis-持久化\"><a href=\"#Redis-持久化\" class=\"headerlink\" title=\"Redis 持久化\"></a>Redis 持久化</h2><p>Redis持久化有多种不同级别的方式</p>\n<ul>\n<li><code>RDB</code> 持久化可以在指定时间范围内服务器生成数据集的<code>Snapshot</code> 时间点快照<code>point-in-time</code>(数据库中所有键值对数据)</li>\n<li><code>AOF</code> 持久化记录服务器执行过的写操作命令，在服务启动通过执行命令来恢复数据集。<code>AOF</code>文件中的命令以Redis协议的格式保存，新命令会追加到文件末尾。</li>\n<li><code>RDB</code> <code>AOF</code>同时使用，在Redis重启时优先使用<code>AOF</code>进行数据恢复，因为<code>AOF</code>的保存的数据通常比<code>RDB</code>文件所保存的数据更完整。</li>\n<li>关闭持久化，数据仅在服务器运行时存在</li>\n</ul>\n<h2 id=\"RDB-持久化-配置\"><a href=\"#RDB-持久化-配置\" class=\"headerlink\" title=\"RDB 持久化-配置\"></a>RDB 持久化-配置</h2><ul>\n<li><strong>save</strong> <code>save m n</code> (m 代表时间范围内 n 修改次数) 例如默认配置文件中的<code>save 900 1</code> 900秒内至少有一个Key发生变化则保存。</li>\n<li><strong>stop-writes-on-bgsave-error</strong> 默认值yes，当Redis后台保存失败时是否停止接受写操作。如果已经设置一些监控可选择关闭。</li>\n<li><strong>rdbcompression</strong> 默认值yes，对存储到磁盘的快照文件是否进行压缩(<code>LZF</code>算法压缩)，压缩会消耗一定CPU性能，具体根据实际情况设置是否压缩。</li>\n<li><strong>rdbchecksum</strong> 默认值yes，对于存储的快照文件使用<code>CRC64</code>算法进行数据校验，校验大概消耗10%的性能，如需大量性能可关闭跳过校验过程。</li>\n<li><strong>dbfilename</strong> 默认值 dump.rbd， 快照文件的名称。</li>\n<li><strong>dir</strong> 默认当前目录，快照文件的存放文件路径</li>\n</ul>\n<h4 id=\"RDB-优点\"><a href=\"#RDB-优点\" class=\"headerlink\" title=\"RDB 优点\"></a>RDB 优点</h4><ul>\n<li>Redis在保存RDB会fork出子进程进行，几乎不影响Redis处理效率。</li>\n<li>RDB非常适合灾难恢复（<code>disaster reconvery</code>），每次快照会生成完整的快照文件，可根据业务需求进行多备云备份。</li>\n<li>RDB在恢复大数据集时比AOF速度更快。 </li>\n</ul>\n<h4 id=\"RDB-缺点\"><a href=\"#RDB-缺点\" class=\"headerlink\" title=\"RDB 缺点\"></a>RDB 缺点</h4><ul>\n<li>RDB快照是定期生成，在时间范围内服务发生宕机可能导致会丢失部分数据</li>\n<li>RDB在大数据快照生成上会消耗大量CPU性能，如CPU性能不足或紧张时会影响Redis对外服务。</li>\n</ul>\n<h2 id=\"AOF-持久化\"><a href=\"#AOF-持久化\" class=\"headerlink\" title=\"AOF 持久化\"></a>AOF 持久化</h2><p><strong>AOF</strong>（<code>append-only file</code>）持久化:将Redis执行的每一条写请求都记录在一个日志文件里，在Redis启动后会执行所有的写操作达来恢复数据。AOF 默认是关闭状态，AOF 提供3种fsync配置</p>\n<ul>\n<li><strong>appendfsync no</strong> 不进行fsync，由OS来决定什么时候进行同步，速度最快</li>\n<li><strong>appendfsync always</strong> 每一次操作都进行fsync，速度较慢</li>\n<li><strong>appendfsync everysec</strong> 折中的做法，交由后台线程每秒fsync一次</li>\n</ul>\n<h4 id=\"AOF优点\"><a href=\"#AOF优点\" class=\"headerlink\" title=\"AOF优点\"></a>AOF优点</h4><p>数据更安全，在配置 appendfsync always或 appendfsync everysec会及时把每条执行的写操作都记录都追加到AOF文件末尾即使是服务出现故障至多损失1s之内的数据。</p>\n<p>查考地址<br><a href=\"http://doc.redisfans.com/topic/persistence.html\" target=\"_blank\" rel=\"noopener\">http://doc.redisfans.com/topic/persistence.html</a><br><a href=\"https://baijiahao.baidu.com/s?id=1611955931705092609&amp;wfr=spider&amp;for=pc\" target=\"_blank\" rel=\"noopener\">https://baijiahao.baidu.com/s?id=1611955931705092609&amp;wfr=spider&amp;for=pc</a></p>\n"},{"title":"Redis 缓存问题场景","date":"2019-02-22T02:27:08.000Z","_content":"\n![](/images/redis.jpg)\n\n>记录下学习Redis缓存实际项目中会出现的一些场景和解决方案，缓存穿透、缓存击穿、缓存雪崩\n\n## Redis 缓存穿透\n缓存穿透是指缓存和数据库都查询到不到，例如查询UserId=-1的用户，当大量类似访问请求发送到服务端，由于数据库一直无法查找到数据则缓存无法更新和插入，后续大量的请求全部落到了DB上。导致DB数据库压力增大发生崩溃、变慢。\n##### 解决方案\n- 在接口层面或者通过过滤器拦截器过滤掉一些恶意查询条件。\n- 如果有查询不到的大量请求，可以设置`Key-Null`和`TTL`的时间设置30-60秒(具体根据实际业务需求来设定)，避免大量的后续恶意请求落在DB上。\n![缓存穿透](/images/redis-caching-penetration.png)\n\n\n## Redis 缓存雪崩\n缓存雪崩是指缓存中大量的Key同一时间失效或缓存服务直接宕机导致大量的访问请求都落到了DB上，使得数据库压力过大导致连锁反应瘫痪宕机。\n![缓存雪崩](/images/redis-caching-avalanche.png)\n\n##### 失效解决：\n- 热门数据缓存设置`TTL`延长或者永久\n- 数据的缓存设置随机`TTL`防止同一时间失效\n\n##### 服务宕机：\n- Redis 高可用，使用主从+哨兵 `redis cluster`，避免全盘崩溃\n- 本地 `ehcache` 缓存 + `hystrix` 限流/降级，避免DB被打死\n- Redis 持久化，一旦重启立刻恢复数据\n![解决方案](/images/redis-caching-avalanche-solution.png)\n\n## 3.Redis 缓存击穿\n缓存击穿是指同一个热门Key突然失效，大量的并发访问导致直接落在DB上，导致DB数据库压力增大宕机，与雪崩不同的是击穿是单一Key雪崩是大量热门Key。\n- 数据的缓存`TTL`设置永久\n- 使用互斥锁等待第一次请求缓存构建完成后释放锁，让其余所有请求直接通过缓存拿取数据。单机环境`Lock`类型，集群使用`Setnx`(set if not exits)\n\n\n\n#### 查考资料 \nhttps://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/redis-caching-avalanche-and-caching-penetration.md\n","source":"_posts/Redis缓存场景.md","raw":"---\ntitle: Redis 缓存问题场景\ndate: 2019-02-22 10:27:08\ncategories: [NoSql]\ntags:\n    - Redis\n    - Java\n---\n\n![](/images/redis.jpg)\n\n>记录下学习Redis缓存实际项目中会出现的一些场景和解决方案，缓存穿透、缓存击穿、缓存雪崩\n\n## Redis 缓存穿透\n缓存穿透是指缓存和数据库都查询到不到，例如查询UserId=-1的用户，当大量类似访问请求发送到服务端，由于数据库一直无法查找到数据则缓存无法更新和插入，后续大量的请求全部落到了DB上。导致DB数据库压力增大发生崩溃、变慢。\n##### 解决方案\n- 在接口层面或者通过过滤器拦截器过滤掉一些恶意查询条件。\n- 如果有查询不到的大量请求，可以设置`Key-Null`和`TTL`的时间设置30-60秒(具体根据实际业务需求来设定)，避免大量的后续恶意请求落在DB上。\n![缓存穿透](/images/redis-caching-penetration.png)\n\n\n## Redis 缓存雪崩\n缓存雪崩是指缓存中大量的Key同一时间失效或缓存服务直接宕机导致大量的访问请求都落到了DB上，使得数据库压力过大导致连锁反应瘫痪宕机。\n![缓存雪崩](/images/redis-caching-avalanche.png)\n\n##### 失效解决：\n- 热门数据缓存设置`TTL`延长或者永久\n- 数据的缓存设置随机`TTL`防止同一时间失效\n\n##### 服务宕机：\n- Redis 高可用，使用主从+哨兵 `redis cluster`，避免全盘崩溃\n- 本地 `ehcache` 缓存 + `hystrix` 限流/降级，避免DB被打死\n- Redis 持久化，一旦重启立刻恢复数据\n![解决方案](/images/redis-caching-avalanche-solution.png)\n\n## 3.Redis 缓存击穿\n缓存击穿是指同一个热门Key突然失效，大量的并发访问导致直接落在DB上，导致DB数据库压力增大宕机，与雪崩不同的是击穿是单一Key雪崩是大量热门Key。\n- 数据的缓存`TTL`设置永久\n- 使用互斥锁等待第一次请求缓存构建完成后释放锁，让其余所有请求直接通过缓存拿取数据。单机环境`Lock`类型，集群使用`Setnx`(set if not exits)\n\n\n\n#### 查考资料 \nhttps://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/redis-caching-avalanche-and-caching-penetration.md\n","slug":"Redis缓存场景","published":1,"updated":"2019-03-27T02:16:16.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldu0u000zysqudbpipyfi","content":"<p><img src=\"/images/redis.jpg\" alt=\"\"></p>\n<blockquote>\n<p>记录下学习Redis缓存实际项目中会出现的一些场景和解决方案，缓存穿透、缓存击穿、缓存雪崩</p>\n</blockquote>\n<h2 id=\"Redis-缓存穿透\"><a href=\"#Redis-缓存穿透\" class=\"headerlink\" title=\"Redis 缓存穿透\"></a>Redis 缓存穿透</h2><p>缓存穿透是指缓存和数据库都查询到不到，例如查询UserId=-1的用户，当大量类似访问请求发送到服务端，由于数据库一直无法查找到数据则缓存无法更新和插入，后续大量的请求全部落到了DB上。导致DB数据库压力增大发生崩溃、变慢。</p>\n<h5 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h5><ul>\n<li>在接口层面或者通过过滤器拦截器过滤掉一些恶意查询条件。</li>\n<li>如果有查询不到的大量请求，可以设置<code>Key-Null</code>和<code>TTL</code>的时间设置30-60秒(具体根据实际业务需求来设定)，避免大量的后续恶意请求落在DB上。<br><img src=\"/images/redis-caching-penetration.png\" alt=\"缓存穿透\"></li>\n</ul>\n<h2 id=\"Redis-缓存雪崩\"><a href=\"#Redis-缓存雪崩\" class=\"headerlink\" title=\"Redis 缓存雪崩\"></a>Redis 缓存雪崩</h2><p>缓存雪崩是指缓存中大量的Key同一时间失效或缓存服务直接宕机导致大量的访问请求都落到了DB上，使得数据库压力过大导致连锁反应瘫痪宕机。<br><img src=\"/images/redis-caching-avalanche.png\" alt=\"缓存雪崩\"></p>\n<h5 id=\"失效解决：\"><a href=\"#失效解决：\" class=\"headerlink\" title=\"失效解决：\"></a>失效解决：</h5><ul>\n<li>热门数据缓存设置<code>TTL</code>延长或者永久</li>\n<li>数据的缓存设置随机<code>TTL</code>防止同一时间失效</li>\n</ul>\n<h5 id=\"服务宕机：\"><a href=\"#服务宕机：\" class=\"headerlink\" title=\"服务宕机：\"></a>服务宕机：</h5><ul>\n<li>Redis 高可用，使用主从+哨兵 <code>redis cluster</code>，避免全盘崩溃</li>\n<li>本地 <code>ehcache</code> 缓存 + <code>hystrix</code> 限流/降级，避免DB被打死</li>\n<li>Redis 持久化，一旦重启立刻恢复数据<br><img src=\"/images/redis-caching-avalanche-solution.png\" alt=\"解决方案\"></li>\n</ul>\n<h2 id=\"3-Redis-缓存击穿\"><a href=\"#3-Redis-缓存击穿\" class=\"headerlink\" title=\"3.Redis 缓存击穿\"></a>3.Redis 缓存击穿</h2><p>缓存击穿是指同一个热门Key突然失效，大量的并发访问导致直接落在DB上，导致DB数据库压力增大宕机，与雪崩不同的是击穿是单一Key雪崩是大量热门Key。</p>\n<ul>\n<li>数据的缓存<code>TTL</code>设置永久</li>\n<li>使用互斥锁等待第一次请求缓存构建完成后释放锁，让其余所有请求直接通过缓存拿取数据。单机环境<code>Lock</code>类型，集群使用<code>Setnx</code>(set if not exits)</li>\n</ul>\n<h4 id=\"查考资料\"><a href=\"#查考资料\" class=\"headerlink\" title=\"查考资料\"></a>查考资料</h4><p><a href=\"https://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/redis-caching-avalanche-and-caching-penetration.md\" target=\"_blank\" rel=\"noopener\">https://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/redis-caching-avalanche-and-caching-penetration.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/redis.jpg\" alt=\"\"></p>\n<blockquote>\n<p>记录下学习Redis缓存实际项目中会出现的一些场景和解决方案，缓存穿透、缓存击穿、缓存雪崩</p>\n</blockquote>\n<h2 id=\"Redis-缓存穿透\"><a href=\"#Redis-缓存穿透\" class=\"headerlink\" title=\"Redis 缓存穿透\"></a>Redis 缓存穿透</h2><p>缓存穿透是指缓存和数据库都查询到不到，例如查询UserId=-1的用户，当大量类似访问请求发送到服务端，由于数据库一直无法查找到数据则缓存无法更新和插入，后续大量的请求全部落到了DB上。导致DB数据库压力增大发生崩溃、变慢。</p>\n<h5 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h5><ul>\n<li>在接口层面或者通过过滤器拦截器过滤掉一些恶意查询条件。</li>\n<li>如果有查询不到的大量请求，可以设置<code>Key-Null</code>和<code>TTL</code>的时间设置30-60秒(具体根据实际业务需求来设定)，避免大量的后续恶意请求落在DB上。<br><img src=\"/images/redis-caching-penetration.png\" alt=\"缓存穿透\"></li>\n</ul>\n<h2 id=\"Redis-缓存雪崩\"><a href=\"#Redis-缓存雪崩\" class=\"headerlink\" title=\"Redis 缓存雪崩\"></a>Redis 缓存雪崩</h2><p>缓存雪崩是指缓存中大量的Key同一时间失效或缓存服务直接宕机导致大量的访问请求都落到了DB上，使得数据库压力过大导致连锁反应瘫痪宕机。<br><img src=\"/images/redis-caching-avalanche.png\" alt=\"缓存雪崩\"></p>\n<h5 id=\"失效解决：\"><a href=\"#失效解决：\" class=\"headerlink\" title=\"失效解决：\"></a>失效解决：</h5><ul>\n<li>热门数据缓存设置<code>TTL</code>延长或者永久</li>\n<li>数据的缓存设置随机<code>TTL</code>防止同一时间失效</li>\n</ul>\n<h5 id=\"服务宕机：\"><a href=\"#服务宕机：\" class=\"headerlink\" title=\"服务宕机：\"></a>服务宕机：</h5><ul>\n<li>Redis 高可用，使用主从+哨兵 <code>redis cluster</code>，避免全盘崩溃</li>\n<li>本地 <code>ehcache</code> 缓存 + <code>hystrix</code> 限流/降级，避免DB被打死</li>\n<li>Redis 持久化，一旦重启立刻恢复数据<br><img src=\"/images/redis-caching-avalanche-solution.png\" alt=\"解决方案\"></li>\n</ul>\n<h2 id=\"3-Redis-缓存击穿\"><a href=\"#3-Redis-缓存击穿\" class=\"headerlink\" title=\"3.Redis 缓存击穿\"></a>3.Redis 缓存击穿</h2><p>缓存击穿是指同一个热门Key突然失效，大量的并发访问导致直接落在DB上，导致DB数据库压力增大宕机，与雪崩不同的是击穿是单一Key雪崩是大量热门Key。</p>\n<ul>\n<li>数据的缓存<code>TTL</code>设置永久</li>\n<li>使用互斥锁等待第一次请求缓存构建完成后释放锁，让其余所有请求直接通过缓存拿取数据。单机环境<code>Lock</code>类型，集群使用<code>Setnx</code>(set if not exits)</li>\n</ul>\n<h4 id=\"查考资料\"><a href=\"#查考资料\" class=\"headerlink\" title=\"查考资料\"></a>查考资料</h4><p><a href=\"https://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/redis-caching-avalanche-and-caching-penetration.md\" target=\"_blank\" rel=\"noopener\">https://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/redis-caching-avalanche-and-caching-penetration.md</a></p>\n"},{"title":"Log4j 自定义多文件分离","date":"2018-07-20T09:32:59.000Z","_content":"![Log4j](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1533619453&di=71e7053f6a5104d2ee0501827d562550&imgtype=jpg&er=1&src=http%3A%2F%2Fstatic.open-open.com%2Fnews%2FuploadImg%2F20160530%2F20160530232653_508.jpg)\n\n>在工作开发中遇到一个需求需要通过某一些条件逻辑进行分组细化日志，用配置的一些条件进行不同的日志管理和处理，由于之前的日志没有细化会导致在很多日志中无法更快和更精准的定位某一个模块的错误，如大海捞针效率极低，细分后方便开发和维护人员对日志更快更精准的排查修改BUG。\n\n## 1.Log4j 介绍\n   Log4j有三个主要的组件：Loggers(记录器)，Appenders (输出源)和Layouts(布局)。这里可简单理解为日志类别，日志要输出的地方和日志以何种形式输出。综合使用这三个组件可以轻松地记录信息的类型和级别，并可以在运行时控制日志输出的样式和位置。\n             \n## 2.Log4j 组件\n### Appender 配置\n - ##### ConsoleAppender (控制台)\n    1. Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。\n    2. ImmediateFlush=true：消息都会被立即输出，设为false则不输出，默认值是true。\n    3. Target=System.err：默认值是System.out。\n - ##### FileAppender (文件)\n    1. Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。\n    2. File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。\n - ##### DailyRollingFileAppender (按照日期格式生成)\n    1. DatePattern='.'yyyy-MM：根据时间格式按照年月日为单位生成log文件\n     '.'yyyy-MM：每月\n     '.'yyyy-ww：每周\n     '.'yyyy-MM-dd：每天\n     '.'yyyy-MM-dd-a：每天两次\n     '.'yyyy-MM-dd-HH：每小时\n     '.'yyyy-MM-dd-HH-mm：每分钟\n - ##### RollingFileAppender (文件大小到达指定尺寸的时候产生一个新的文件)\n    1. MaxFileSize=100KB：后缀可以是KB， MB 或者GB。在日志文件到达该大小时，将会自动滚动，即将原来的内容移到logging.log4j.1文件中。\n    2. MaxBackupIndex=2：指定可以产生的滚动文件的最大数，例如，设为2则可以产生logging.log4j.1，logging.log4j.2两个滚动文件和一个logging.log4j文\n - ##### SocketAppender (发送远程服务 Tip:可配合logstash使用)\n    1. host，String，指定服务器的主机名。（必需）\n    2. immediateFlush，boolean，是否立即flush，还是等待缓存到一定大小后在flush。\n    3. layout，Layout，log event输出的格式。\n    4. port，integer，远程服务器坚挺log event的应用的端口号。\n    5. protocol，String，发送log event所使用的协议，\"TCP\" 或\"UDP\"。\n    6. reconnectionDelay，integer，当连接断开时，延迟等待的ms数。\n    7. name，String ，Appender的名称。\n    8. protocol，String，通讯协议 默认TCP。可选值 \"TCP\" (default)， \"SSL\" or \"UDP\".\n    9. SSL，SslConfiguration，包含密钥存储库和信任存储库的配置.\n    10. filter，Filter，一个过滤器来确定事件应该由这个Appender。 不止一个过滤器 可以通过使用一个CompositeFilter。\n    11. immediateFail，boolean，设置为true时，日志事件不会等待尝试重新连接，将立即如果失败 套接字是不可用的。\n    12. immediateFlush，boolean， 当该值设置成真时，默认情况下，每个写将冲洗。 这将保证写的数据 到磁盘，但可能会影响性能。\n    13. layout，Layout，LogEvent ，布局使用格式。 缺省值是SerializedLayout。\n    14. reconnectionDelay，integer ，如果设置为值大于0，一个错误后SocketManager将尝试重新连接 在指定的毫秒数后的服务器。 如果连接失败 将抛出一个异常(可以被应用程序如果ignoreExceptions是 设置为假)。\n    15. ignoreExceptions，boolean，默认值是真正的添加事件时，遇到了引起异常 内部记录，然后忽略。 当设置为假将传播到异常 调用者。 你必须设置这个假当包装这个AppenderFailoverAppender。\n - ##### SMTPAppender (发送邮件)\n    1. smtpHost= mtp.163.com：邮件服务器地址\n    2. smtpPort=30 ：端口号\n    3. from= ***@**.com：发送方邮箱\n    4. replyTo = ***@**.com： 接收方方邮箱\n    5. smtpUsername = 285635652@qq.com：发送方邮箱账号\n    6. smtpPassword = **********：发送方邮箱密码\n\n    \n>log4j.additivity.[appenderName]=false (用于独立输出日志，Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。)默认为true\n\n\n### Layouts\n- ##### HTMLLayout（以HTML表格形式布局） \n- ##### PatternLayout（可以灵活地指定布局模式） \n- ##### SimpleLayout（包含日志信息的级别和信息字符串） \n- ##### TTCCLayout（包含日志产生的时间、线程、类别等信息）   \n\n## 3.Spring 运用 Log4j\n``` properties\n# LOG4J配置\nlog4j.rootCategory=INFO， stdout， file\nlog4j.logger.errorfile=error，errorfile\n\n# 控制台输出\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss，SSS} %5p %c{1}:%L - %m%n\n\n# root日志输出\nlog4j.appender.file=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.file.file=logs/all.log\nlog4j.appender.file.DatePattern='.'yyyy-MM-dd\nlog4j.appender.file.layout=org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss，SSS} %5p %c{1}:%L - %m%n\n\n# error日志输出\nlog4j.appender.errorfile=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.errorfile.file=logs/error.log\nlog4j.appender.errorfile.DatePattern='.'yyyy-MM-dd\nlog4j.appender.errorfile.Threshold = ERROR\nlog4j.appender.errorfile.layout=org.apache.log4j.PatternLayout\nlog4j.appender.errorfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss，SSS} %5p %c{1}:%L - %m%n\n\n#自定义业务分组 team mytest输出目标\nlog4j.logger.team=INFO，mytest\n#自定义日志输出\n#输出的各种Appender\nlog4j.appender.mytest=org.apache.log4j.DailyRollingFileAppender\n#父类节点不输出 分级\nlog4j.additivity.team=false\n#输出的日志地址\nlog4j.appender.mytest.file=logs/mytest.log\n#记录的时间单位 天 \nlog4j.appender.mytest.DatePattern='.'yyyy-MM-dd\n#布局\nlog4j.appender.mytest.layout=org.apache.log4j.PatternLayout\n#输出内容\nlog4j.appender.mytest.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss，SSS} %5p %c{1}:%L ---- %m%n\n\n```\n\n#### 讲解\n1. rootCategory 主节点 [日志级别]，[输出目标]，[输出目标]，[...]\n2. category 子节点 特别会集成主节点的设置 日志级别\n3. log4j.appender.[输出目标] 日志的输出设置 包含输出格式、布局、方式等\n4. 优先级：DEBUG < INFO < WARN < ERROR < FATAL\n5. PatternLayout 布局 ConversionPattern相关设置  \n%m 输出代码中指定的消息\n%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL\n%r 输出自应用启动到输出该log信息耗费的毫秒数\n%c 输出所属的类目，通常就是所在类的全名\n%t 输出产生该日志事件的线程名\n%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”\n%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM ddHH:mm:ss，SSS}，输出类似：2002年10月18日 22：10：28，921\n%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。\n[QC]是log信息的开头，可以为任意字符，一般为项目简称。\n","source":"_posts/Log4j-学习笔记.md","raw":"---\ntitle: Log4j 自定义多文件分离\ndate: 2018-07-20 17:32:59\ncategories: [Java]\ntags:\n    - Java\n---\n![Log4j](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1533619453&di=71e7053f6a5104d2ee0501827d562550&imgtype=jpg&er=1&src=http%3A%2F%2Fstatic.open-open.com%2Fnews%2FuploadImg%2F20160530%2F20160530232653_508.jpg)\n\n>在工作开发中遇到一个需求需要通过某一些条件逻辑进行分组细化日志，用配置的一些条件进行不同的日志管理和处理，由于之前的日志没有细化会导致在很多日志中无法更快和更精准的定位某一个模块的错误，如大海捞针效率极低，细分后方便开发和维护人员对日志更快更精准的排查修改BUG。\n\n## 1.Log4j 介绍\n   Log4j有三个主要的组件：Loggers(记录器)，Appenders (输出源)和Layouts(布局)。这里可简单理解为日志类别，日志要输出的地方和日志以何种形式输出。综合使用这三个组件可以轻松地记录信息的类型和级别，并可以在运行时控制日志输出的样式和位置。\n             \n## 2.Log4j 组件\n### Appender 配置\n - ##### ConsoleAppender (控制台)\n    1. Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。\n    2. ImmediateFlush=true：消息都会被立即输出，设为false则不输出，默认值是true。\n    3. Target=System.err：默认值是System.out。\n - ##### FileAppender (文件)\n    1. Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。\n    2. File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。\n - ##### DailyRollingFileAppender (按照日期格式生成)\n    1. DatePattern='.'yyyy-MM：根据时间格式按照年月日为单位生成log文件\n     '.'yyyy-MM：每月\n     '.'yyyy-ww：每周\n     '.'yyyy-MM-dd：每天\n     '.'yyyy-MM-dd-a：每天两次\n     '.'yyyy-MM-dd-HH：每小时\n     '.'yyyy-MM-dd-HH-mm：每分钟\n - ##### RollingFileAppender (文件大小到达指定尺寸的时候产生一个新的文件)\n    1. MaxFileSize=100KB：后缀可以是KB， MB 或者GB。在日志文件到达该大小时，将会自动滚动，即将原来的内容移到logging.log4j.1文件中。\n    2. MaxBackupIndex=2：指定可以产生的滚动文件的最大数，例如，设为2则可以产生logging.log4j.1，logging.log4j.2两个滚动文件和一个logging.log4j文\n - ##### SocketAppender (发送远程服务 Tip:可配合logstash使用)\n    1. host，String，指定服务器的主机名。（必需）\n    2. immediateFlush，boolean，是否立即flush，还是等待缓存到一定大小后在flush。\n    3. layout，Layout，log event输出的格式。\n    4. port，integer，远程服务器坚挺log event的应用的端口号。\n    5. protocol，String，发送log event所使用的协议，\"TCP\" 或\"UDP\"。\n    6. reconnectionDelay，integer，当连接断开时，延迟等待的ms数。\n    7. name，String ，Appender的名称。\n    8. protocol，String，通讯协议 默认TCP。可选值 \"TCP\" (default)， \"SSL\" or \"UDP\".\n    9. SSL，SslConfiguration，包含密钥存储库和信任存储库的配置.\n    10. filter，Filter，一个过滤器来确定事件应该由这个Appender。 不止一个过滤器 可以通过使用一个CompositeFilter。\n    11. immediateFail，boolean，设置为true时，日志事件不会等待尝试重新连接，将立即如果失败 套接字是不可用的。\n    12. immediateFlush，boolean， 当该值设置成真时，默认情况下，每个写将冲洗。 这将保证写的数据 到磁盘，但可能会影响性能。\n    13. layout，Layout，LogEvent ，布局使用格式。 缺省值是SerializedLayout。\n    14. reconnectionDelay，integer ，如果设置为值大于0，一个错误后SocketManager将尝试重新连接 在指定的毫秒数后的服务器。 如果连接失败 将抛出一个异常(可以被应用程序如果ignoreExceptions是 设置为假)。\n    15. ignoreExceptions，boolean，默认值是真正的添加事件时，遇到了引起异常 内部记录，然后忽略。 当设置为假将传播到异常 调用者。 你必须设置这个假当包装这个AppenderFailoverAppender。\n - ##### SMTPAppender (发送邮件)\n    1. smtpHost= mtp.163.com：邮件服务器地址\n    2. smtpPort=30 ：端口号\n    3. from= ***@**.com：发送方邮箱\n    4. replyTo = ***@**.com： 接收方方邮箱\n    5. smtpUsername = 285635652@qq.com：发送方邮箱账号\n    6. smtpPassword = **********：发送方邮箱密码\n\n    \n>log4j.additivity.[appenderName]=false (用于独立输出日志，Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。)默认为true\n\n\n### Layouts\n- ##### HTMLLayout（以HTML表格形式布局） \n- ##### PatternLayout（可以灵活地指定布局模式） \n- ##### SimpleLayout（包含日志信息的级别和信息字符串） \n- ##### TTCCLayout（包含日志产生的时间、线程、类别等信息）   \n\n## 3.Spring 运用 Log4j\n``` properties\n# LOG4J配置\nlog4j.rootCategory=INFO， stdout， file\nlog4j.logger.errorfile=error，errorfile\n\n# 控制台输出\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss，SSS} %5p %c{1}:%L - %m%n\n\n# root日志输出\nlog4j.appender.file=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.file.file=logs/all.log\nlog4j.appender.file.DatePattern='.'yyyy-MM-dd\nlog4j.appender.file.layout=org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss，SSS} %5p %c{1}:%L - %m%n\n\n# error日志输出\nlog4j.appender.errorfile=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.errorfile.file=logs/error.log\nlog4j.appender.errorfile.DatePattern='.'yyyy-MM-dd\nlog4j.appender.errorfile.Threshold = ERROR\nlog4j.appender.errorfile.layout=org.apache.log4j.PatternLayout\nlog4j.appender.errorfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss，SSS} %5p %c{1}:%L - %m%n\n\n#自定义业务分组 team mytest输出目标\nlog4j.logger.team=INFO，mytest\n#自定义日志输出\n#输出的各种Appender\nlog4j.appender.mytest=org.apache.log4j.DailyRollingFileAppender\n#父类节点不输出 分级\nlog4j.additivity.team=false\n#输出的日志地址\nlog4j.appender.mytest.file=logs/mytest.log\n#记录的时间单位 天 \nlog4j.appender.mytest.DatePattern='.'yyyy-MM-dd\n#布局\nlog4j.appender.mytest.layout=org.apache.log4j.PatternLayout\n#输出内容\nlog4j.appender.mytest.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss，SSS} %5p %c{1}:%L ---- %m%n\n\n```\n\n#### 讲解\n1. rootCategory 主节点 [日志级别]，[输出目标]，[输出目标]，[...]\n2. category 子节点 特别会集成主节点的设置 日志级别\n3. log4j.appender.[输出目标] 日志的输出设置 包含输出格式、布局、方式等\n4. 优先级：DEBUG < INFO < WARN < ERROR < FATAL\n5. PatternLayout 布局 ConversionPattern相关设置  \n%m 输出代码中指定的消息\n%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL\n%r 输出自应用启动到输出该log信息耗费的毫秒数\n%c 输出所属的类目，通常就是所在类的全名\n%t 输出产生该日志事件的线程名\n%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”\n%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM ddHH:mm:ss，SSS}，输出类似：2002年10月18日 22：10：28，921\n%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。\n[QC]是log信息的开头，可以为任意字符，一般为项目简称。\n","slug":"Log4j-学习笔记","published":1,"updated":"2019-03-27T02:16:16.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldu110014ysquhz17u1bk","content":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1533619453&amp;di=71e7053f6a5104d2ee0501827d562550&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fstatic.open-open.com%2Fnews%2FuploadImg%2F20160530%2F20160530232653_508.jpg\" alt=\"Log4j\"></p>\n<blockquote>\n<p>在工作开发中遇到一个需求需要通过某一些条件逻辑进行分组细化日志，用配置的一些条件进行不同的日志管理和处理，由于之前的日志没有细化会导致在很多日志中无法更快和更精准的定位某一个模块的错误，如大海捞针效率极低，细分后方便开发和维护人员对日志更快更精准的排查修改BUG。</p>\n</blockquote>\n<h2 id=\"1-Log4j-介绍\"><a href=\"#1-Log4j-介绍\" class=\"headerlink\" title=\"1.Log4j 介绍\"></a>1.Log4j 介绍</h2><p>   Log4j有三个主要的组件：Loggers(记录器)，Appenders (输出源)和Layouts(布局)。这里可简单理解为日志类别，日志要输出的地方和日志以何种形式输出。综合使用这三个组件可以轻松地记录信息的类型和级别，并可以在运行时控制日志输出的样式和位置。</p>\n<h2 id=\"2-Log4j-组件\"><a href=\"#2-Log4j-组件\" class=\"headerlink\" title=\"2.Log4j 组件\"></a>2.Log4j 组件</h2><h3 id=\"Appender-配置\"><a href=\"#Appender-配置\" class=\"headerlink\" title=\"Appender 配置\"></a>Appender 配置</h3><ul>\n<li><h5 id=\"ConsoleAppender-控制台\"><a href=\"#ConsoleAppender-控制台\" class=\"headerlink\" title=\"ConsoleAppender (控制台)\"></a>ConsoleAppender (控制台)</h5><ol>\n<li>Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</li>\n<li>ImmediateFlush=true：消息都会被立即输出，设为false则不输出，默认值是true。</li>\n<li>Target=System.err：默认值是System.out。</li>\n</ol>\n</li>\n<li><h5 id=\"FileAppender-文件\"><a href=\"#FileAppender-文件\" class=\"headerlink\" title=\"FileAppender (文件)\"></a>FileAppender (文件)</h5><ol>\n<li>Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。</li>\n<li>File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。</li>\n</ol>\n</li>\n<li><h5 id=\"DailyRollingFileAppender-按照日期格式生成\"><a href=\"#DailyRollingFileAppender-按照日期格式生成\" class=\"headerlink\" title=\"DailyRollingFileAppender (按照日期格式生成)\"></a>DailyRollingFileAppender (按照日期格式生成)</h5><ol>\n<li>DatePattern=’.’yyyy-MM：根据时间格式按照年月日为单位生成log文件<br>‘.’yyyy-MM：每月<br>‘.’yyyy-ww：每周<br>‘.’yyyy-MM-dd：每天<br>‘.’yyyy-MM-dd-a：每天两次<br>‘.’yyyy-MM-dd-HH：每小时<br>‘.’yyyy-MM-dd-HH-mm：每分钟</li>\n</ol>\n</li>\n<li><h5 id=\"RollingFileAppender-文件大小到达指定尺寸的时候产生一个新的文件\"><a href=\"#RollingFileAppender-文件大小到达指定尺寸的时候产生一个新的文件\" class=\"headerlink\" title=\"RollingFileAppender (文件大小到达指定尺寸的时候产生一个新的文件)\"></a>RollingFileAppender (文件大小到达指定尺寸的时候产生一个新的文件)</h5><ol>\n<li>MaxFileSize=100KB：后缀可以是KB， MB 或者GB。在日志文件到达该大小时，将会自动滚动，即将原来的内容移到logging.log4j.1文件中。</li>\n<li>MaxBackupIndex=2：指定可以产生的滚动文件的最大数，例如，设为2则可以产生logging.log4j.1，logging.log4j.2两个滚动文件和一个logging.log4j文</li>\n</ol>\n</li>\n<li><h5 id=\"SocketAppender-发送远程服务-Tip-可配合logstash使用\"><a href=\"#SocketAppender-发送远程服务-Tip-可配合logstash使用\" class=\"headerlink\" title=\"SocketAppender (发送远程服务 Tip:可配合logstash使用)\"></a>SocketAppender (发送远程服务 Tip:可配合logstash使用)</h5><ol>\n<li>host，String，指定服务器的主机名。（必需）</li>\n<li>immediateFlush，boolean，是否立即flush，还是等待缓存到一定大小后在flush。</li>\n<li>layout，Layout，log event输出的格式。</li>\n<li>port，integer，远程服务器坚挺log event的应用的端口号。</li>\n<li>protocol，String，发送log event所使用的协议，”TCP” 或”UDP”。</li>\n<li>reconnectionDelay，integer，当连接断开时，延迟等待的ms数。</li>\n<li>name，String ，Appender的名称。</li>\n<li>protocol，String，通讯协议 默认TCP。可选值 “TCP” (default)， “SSL” or “UDP”.</li>\n<li>SSL，SslConfiguration，包含密钥存储库和信任存储库的配置.</li>\n<li>filter，Filter，一个过滤器来确定事件应该由这个Appender。 不止一个过滤器 可以通过使用一个CompositeFilter。</li>\n<li>immediateFail，boolean，设置为true时，日志事件不会等待尝试重新连接，将立即如果失败 套接字是不可用的。</li>\n<li>immediateFlush，boolean， 当该值设置成真时，默认情况下，每个写将冲洗。 这将保证写的数据 到磁盘，但可能会影响性能。</li>\n<li>layout，Layout，LogEvent ，布局使用格式。 缺省值是SerializedLayout。</li>\n<li>reconnectionDelay，integer ，如果设置为值大于0，一个错误后SocketManager将尝试重新连接 在指定的毫秒数后的服务器。 如果连接失败 将抛出一个异常(可以被应用程序如果ignoreExceptions是 设置为假)。</li>\n<li>ignoreExceptions，boolean，默认值是真正的添加事件时，遇到了引起异常 内部记录，然后忽略。 当设置为假将传播到异常 调用者。 你必须设置这个假当包装这个AppenderFailoverAppender。</li>\n</ol>\n</li>\n<li><h5 id=\"SMTPAppender-发送邮件\"><a href=\"#SMTPAppender-发送邮件\" class=\"headerlink\" title=\"SMTPAppender (发送邮件)\"></a>SMTPAppender (发送邮件)</h5><ol>\n<li>smtpHost= mtp.163.com：邮件服务器地址</li>\n<li>smtpPort=30 ：端口号</li>\n<li>from= <strong>*@</strong>.com：发送方邮箱</li>\n<li>replyTo = <strong>*@</strong>.com： 接收方方邮箱</li>\n<li>smtpUsername = <a href=\"mailto:285635652@qq.com\" target=\"_blank\" rel=\"noopener\">285635652@qq.com</a>：发送方邮箱账号</li>\n<li>smtpPassword = <strong><strong>**</strong></strong>：发送方邮箱密码</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>log4j.additivity.[appenderName]=false (用于独立输出日志，Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。)默认为true</p>\n</blockquote>\n<h3 id=\"Layouts\"><a href=\"#Layouts\" class=\"headerlink\" title=\"Layouts\"></a>Layouts</h3><ul>\n<li><h5 id=\"HTMLLayout（以HTML表格形式布局）\"><a href=\"#HTMLLayout（以HTML表格形式布局）\" class=\"headerlink\" title=\"HTMLLayout（以HTML表格形式布局）\"></a>HTMLLayout（以HTML表格形式布局）</h5></li>\n<li><h5 id=\"PatternLayout（可以灵活地指定布局模式）\"><a href=\"#PatternLayout（可以灵活地指定布局模式）\" class=\"headerlink\" title=\"PatternLayout（可以灵活地指定布局模式）\"></a>PatternLayout（可以灵活地指定布局模式）</h5></li>\n<li><h5 id=\"SimpleLayout（包含日志信息的级别和信息字符串）\"><a href=\"#SimpleLayout（包含日志信息的级别和信息字符串）\" class=\"headerlink\" title=\"SimpleLayout（包含日志信息的级别和信息字符串）\"></a>SimpleLayout（包含日志信息的级别和信息字符串）</h5></li>\n<li><h5 id=\"TTCCLayout（包含日志产生的时间、线程、类别等信息）\"><a href=\"#TTCCLayout（包含日志产生的时间、线程、类别等信息）\" class=\"headerlink\" title=\"TTCCLayout（包含日志产生的时间、线程、类别等信息）\"></a>TTCCLayout（包含日志产生的时间、线程、类别等信息）</h5></li>\n</ul>\n<h2 id=\"3-Spring-运用-Log4j\"><a href=\"#3-Spring-运用-Log4j\" class=\"headerlink\" title=\"3.Spring 运用 Log4j\"></a>3.Spring 运用 Log4j</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># LOG4J配置</span><br><span class=\"line\">log4j.rootCategory=INFO， stdout， file</span><br><span class=\"line\">log4j.logger.errorfile=error，errorfile</span><br><span class=\"line\"></span><br><span class=\"line\"># 控制台输出</span><br><span class=\"line\">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss，SSS&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class=\"line\"></span><br><span class=\"line\"># root日志输出</span><br><span class=\"line\">log4j.appender.file=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.file.file=logs/all.log</span><br><span class=\"line\">log4j.appender.file.DatePattern=&apos;.&apos;yyyy-MM-dd</span><br><span class=\"line\">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.file.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss，SSS&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class=\"line\"></span><br><span class=\"line\"># error日志输出</span><br><span class=\"line\">log4j.appender.errorfile=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.errorfile.file=logs/error.log</span><br><span class=\"line\">log4j.appender.errorfile.DatePattern=&apos;.&apos;yyyy-MM-dd</span><br><span class=\"line\">log4j.appender.errorfile.Threshold = ERROR</span><br><span class=\"line\">log4j.appender.errorfile.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.errorfile.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss，SSS&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class=\"line\"></span><br><span class=\"line\">#自定义业务分组 team mytest输出目标</span><br><span class=\"line\">log4j.logger.team=INFO，mytest</span><br><span class=\"line\">#自定义日志输出</span><br><span class=\"line\">#输出的各种Appender</span><br><span class=\"line\">log4j.appender.mytest=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">#父类节点不输出 分级</span><br><span class=\"line\">log4j.additivity.team=false</span><br><span class=\"line\">#输出的日志地址</span><br><span class=\"line\">log4j.appender.mytest.file=logs/mytest.log</span><br><span class=\"line\">#记录的时间单位 天 </span><br><span class=\"line\">log4j.appender.mytest.DatePattern=&apos;.&apos;yyyy-MM-dd</span><br><span class=\"line\">#布局</span><br><span class=\"line\">log4j.appender.mytest.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">#输出内容</span><br><span class=\"line\">log4j.appender.mytest.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss，SSS&#125; %5p %c&#123;1&#125;:%L ---- %m%n</span><br></pre></td></tr></table></figure>\n<h4 id=\"讲解\"><a href=\"#讲解\" class=\"headerlink\" title=\"讲解\"></a>讲解</h4><ol>\n<li>rootCategory 主节点 [日志级别]，[输出目标]，[输出目标]，[…]</li>\n<li>category 子节点 特别会集成主节点的设置 日志级别</li>\n<li>log4j.appender.[输出目标] 日志的输出设置 包含输出格式、布局、方式等</li>\n<li>优先级：DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</li>\n<li>PatternLayout 布局 ConversionPattern相关设置<br>%m 输出代码中指定的消息<br>%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL<br>%r 输出自应用启动到输出该log信息耗费的毫秒数<br>%c 输出所属的类目，通常就是所在类的全名<br>%t 输出产生该日志事件的线程名<br>%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”<br>%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM ddHH:mm:ss，SSS}，输出类似：2002年10月18日 22：10：28，921<br>%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。<br>[QC]是log信息的开头，可以为任意字符，一般为项目简称。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1533619453&amp;di=71e7053f6a5104d2ee0501827d562550&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fstatic.open-open.com%2Fnews%2FuploadImg%2F20160530%2F20160530232653_508.jpg\" alt=\"Log4j\"></p>\n<blockquote>\n<p>在工作开发中遇到一个需求需要通过某一些条件逻辑进行分组细化日志，用配置的一些条件进行不同的日志管理和处理，由于之前的日志没有细化会导致在很多日志中无法更快和更精准的定位某一个模块的错误，如大海捞针效率极低，细分后方便开发和维护人员对日志更快更精准的排查修改BUG。</p>\n</blockquote>\n<h2 id=\"1-Log4j-介绍\"><a href=\"#1-Log4j-介绍\" class=\"headerlink\" title=\"1.Log4j 介绍\"></a>1.Log4j 介绍</h2><p>   Log4j有三个主要的组件：Loggers(记录器)，Appenders (输出源)和Layouts(布局)。这里可简单理解为日志类别，日志要输出的地方和日志以何种形式输出。综合使用这三个组件可以轻松地记录信息的类型和级别，并可以在运行时控制日志输出的样式和位置。</p>\n<h2 id=\"2-Log4j-组件\"><a href=\"#2-Log4j-组件\" class=\"headerlink\" title=\"2.Log4j 组件\"></a>2.Log4j 组件</h2><h3 id=\"Appender-配置\"><a href=\"#Appender-配置\" class=\"headerlink\" title=\"Appender 配置\"></a>Appender 配置</h3><ul>\n<li><h5 id=\"ConsoleAppender-控制台\"><a href=\"#ConsoleAppender-控制台\" class=\"headerlink\" title=\"ConsoleAppender (控制台)\"></a>ConsoleAppender (控制台)</h5><ol>\n<li>Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。</li>\n<li>ImmediateFlush=true：消息都会被立即输出，设为false则不输出，默认值是true。</li>\n<li>Target=System.err：默认值是System.out。</li>\n</ol>\n</li>\n<li><h5 id=\"FileAppender-文件\"><a href=\"#FileAppender-文件\" class=\"headerlink\" title=\"FileAppender (文件)\"></a>FileAppender (文件)</h5><ol>\n<li>Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。</li>\n<li>File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。</li>\n</ol>\n</li>\n<li><h5 id=\"DailyRollingFileAppender-按照日期格式生成\"><a href=\"#DailyRollingFileAppender-按照日期格式生成\" class=\"headerlink\" title=\"DailyRollingFileAppender (按照日期格式生成)\"></a>DailyRollingFileAppender (按照日期格式生成)</h5><ol>\n<li>DatePattern=’.’yyyy-MM：根据时间格式按照年月日为单位生成log文件<br>‘.’yyyy-MM：每月<br>‘.’yyyy-ww：每周<br>‘.’yyyy-MM-dd：每天<br>‘.’yyyy-MM-dd-a：每天两次<br>‘.’yyyy-MM-dd-HH：每小时<br>‘.’yyyy-MM-dd-HH-mm：每分钟</li>\n</ol>\n</li>\n<li><h5 id=\"RollingFileAppender-文件大小到达指定尺寸的时候产生一个新的文件\"><a href=\"#RollingFileAppender-文件大小到达指定尺寸的时候产生一个新的文件\" class=\"headerlink\" title=\"RollingFileAppender (文件大小到达指定尺寸的时候产生一个新的文件)\"></a>RollingFileAppender (文件大小到达指定尺寸的时候产生一个新的文件)</h5><ol>\n<li>MaxFileSize=100KB：后缀可以是KB， MB 或者GB。在日志文件到达该大小时，将会自动滚动，即将原来的内容移到logging.log4j.1文件中。</li>\n<li>MaxBackupIndex=2：指定可以产生的滚动文件的最大数，例如，设为2则可以产生logging.log4j.1，logging.log4j.2两个滚动文件和一个logging.log4j文</li>\n</ol>\n</li>\n<li><h5 id=\"SocketAppender-发送远程服务-Tip-可配合logstash使用\"><a href=\"#SocketAppender-发送远程服务-Tip-可配合logstash使用\" class=\"headerlink\" title=\"SocketAppender (发送远程服务 Tip:可配合logstash使用)\"></a>SocketAppender (发送远程服务 Tip:可配合logstash使用)</h5><ol>\n<li>host，String，指定服务器的主机名。（必需）</li>\n<li>immediateFlush，boolean，是否立即flush，还是等待缓存到一定大小后在flush。</li>\n<li>layout，Layout，log event输出的格式。</li>\n<li>port，integer，远程服务器坚挺log event的应用的端口号。</li>\n<li>protocol，String，发送log event所使用的协议，”TCP” 或”UDP”。</li>\n<li>reconnectionDelay，integer，当连接断开时，延迟等待的ms数。</li>\n<li>name，String ，Appender的名称。</li>\n<li>protocol，String，通讯协议 默认TCP。可选值 “TCP” (default)， “SSL” or “UDP”.</li>\n<li>SSL，SslConfiguration，包含密钥存储库和信任存储库的配置.</li>\n<li>filter，Filter，一个过滤器来确定事件应该由这个Appender。 不止一个过滤器 可以通过使用一个CompositeFilter。</li>\n<li>immediateFail，boolean，设置为true时，日志事件不会等待尝试重新连接，将立即如果失败 套接字是不可用的。</li>\n<li>immediateFlush，boolean， 当该值设置成真时，默认情况下，每个写将冲洗。 这将保证写的数据 到磁盘，但可能会影响性能。</li>\n<li>layout，Layout，LogEvent ，布局使用格式。 缺省值是SerializedLayout。</li>\n<li>reconnectionDelay，integer ，如果设置为值大于0，一个错误后SocketManager将尝试重新连接 在指定的毫秒数后的服务器。 如果连接失败 将抛出一个异常(可以被应用程序如果ignoreExceptions是 设置为假)。</li>\n<li>ignoreExceptions，boolean，默认值是真正的添加事件时，遇到了引起异常 内部记录，然后忽略。 当设置为假将传播到异常 调用者。 你必须设置这个假当包装这个AppenderFailoverAppender。</li>\n</ol>\n</li>\n<li><h5 id=\"SMTPAppender-发送邮件\"><a href=\"#SMTPAppender-发送邮件\" class=\"headerlink\" title=\"SMTPAppender (发送邮件)\"></a>SMTPAppender (发送邮件)</h5><ol>\n<li>smtpHost= mtp.163.com：邮件服务器地址</li>\n<li>smtpPort=30 ：端口号</li>\n<li>from= <strong>*@</strong>.com：发送方邮箱</li>\n<li>replyTo = <strong>*@</strong>.com： 接收方方邮箱</li>\n<li>smtpUsername = <a href=\"mailto:285635652@qq.com\" target=\"_blank\" rel=\"noopener\">285635652@qq.com</a>：发送方邮箱账号</li>\n<li>smtpPassword = <strong><strong>**</strong></strong>：发送方邮箱密码</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>log4j.additivity.[appenderName]=false (用于独立输出日志，Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。)默认为true</p>\n</blockquote>\n<h3 id=\"Layouts\"><a href=\"#Layouts\" class=\"headerlink\" title=\"Layouts\"></a>Layouts</h3><ul>\n<li><h5 id=\"HTMLLayout（以HTML表格形式布局）\"><a href=\"#HTMLLayout（以HTML表格形式布局）\" class=\"headerlink\" title=\"HTMLLayout（以HTML表格形式布局）\"></a>HTMLLayout（以HTML表格形式布局）</h5></li>\n<li><h5 id=\"PatternLayout（可以灵活地指定布局模式）\"><a href=\"#PatternLayout（可以灵活地指定布局模式）\" class=\"headerlink\" title=\"PatternLayout（可以灵活地指定布局模式）\"></a>PatternLayout（可以灵活地指定布局模式）</h5></li>\n<li><h5 id=\"SimpleLayout（包含日志信息的级别和信息字符串）\"><a href=\"#SimpleLayout（包含日志信息的级别和信息字符串）\" class=\"headerlink\" title=\"SimpleLayout（包含日志信息的级别和信息字符串）\"></a>SimpleLayout（包含日志信息的级别和信息字符串）</h5></li>\n<li><h5 id=\"TTCCLayout（包含日志产生的时间、线程、类别等信息）\"><a href=\"#TTCCLayout（包含日志产生的时间、线程、类别等信息）\" class=\"headerlink\" title=\"TTCCLayout（包含日志产生的时间、线程、类别等信息）\"></a>TTCCLayout（包含日志产生的时间、线程、类别等信息）</h5></li>\n</ul>\n<h2 id=\"3-Spring-运用-Log4j\"><a href=\"#3-Spring-运用-Log4j\" class=\"headerlink\" title=\"3.Spring 运用 Log4j\"></a>3.Spring 运用 Log4j</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># LOG4J配置</span><br><span class=\"line\">log4j.rootCategory=INFO， stdout， file</span><br><span class=\"line\">log4j.logger.errorfile=error，errorfile</span><br><span class=\"line\"></span><br><span class=\"line\"># 控制台输出</span><br><span class=\"line\">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss，SSS&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class=\"line\"></span><br><span class=\"line\"># root日志输出</span><br><span class=\"line\">log4j.appender.file=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.file.file=logs/all.log</span><br><span class=\"line\">log4j.appender.file.DatePattern=&apos;.&apos;yyyy-MM-dd</span><br><span class=\"line\">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.file.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss，SSS&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class=\"line\"></span><br><span class=\"line\"># error日志输出</span><br><span class=\"line\">log4j.appender.errorfile=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">log4j.appender.errorfile.file=logs/error.log</span><br><span class=\"line\">log4j.appender.errorfile.DatePattern=&apos;.&apos;yyyy-MM-dd</span><br><span class=\"line\">log4j.appender.errorfile.Threshold = ERROR</span><br><span class=\"line\">log4j.appender.errorfile.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.errorfile.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss，SSS&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class=\"line\"></span><br><span class=\"line\">#自定义业务分组 team mytest输出目标</span><br><span class=\"line\">log4j.logger.team=INFO，mytest</span><br><span class=\"line\">#自定义日志输出</span><br><span class=\"line\">#输出的各种Appender</span><br><span class=\"line\">log4j.appender.mytest=org.apache.log4j.DailyRollingFileAppender</span><br><span class=\"line\">#父类节点不输出 分级</span><br><span class=\"line\">log4j.additivity.team=false</span><br><span class=\"line\">#输出的日志地址</span><br><span class=\"line\">log4j.appender.mytest.file=logs/mytest.log</span><br><span class=\"line\">#记录的时间单位 天 </span><br><span class=\"line\">log4j.appender.mytest.DatePattern=&apos;.&apos;yyyy-MM-dd</span><br><span class=\"line\">#布局</span><br><span class=\"line\">log4j.appender.mytest.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">#输出内容</span><br><span class=\"line\">log4j.appender.mytest.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss，SSS&#125; %5p %c&#123;1&#125;:%L ---- %m%n</span><br></pre></td></tr></table></figure>\n<h4 id=\"讲解\"><a href=\"#讲解\" class=\"headerlink\" title=\"讲解\"></a>讲解</h4><ol>\n<li>rootCategory 主节点 [日志级别]，[输出目标]，[输出目标]，[…]</li>\n<li>category 子节点 特别会集成主节点的设置 日志级别</li>\n<li>log4j.appender.[输出目标] 日志的输出设置 包含输出格式、布局、方式等</li>\n<li>优先级：DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</li>\n<li>PatternLayout 布局 ConversionPattern相关设置<br>%m 输出代码中指定的消息<br>%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL<br>%r 输出自应用启动到输出该log信息耗费的毫秒数<br>%c 输出所属的类目，通常就是所在类的全名<br>%t 输出产生该日志事件的线程名<br>%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”<br>%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM ddHH:mm:ss，SSS}，输出类似：2002年10月18日 22：10：28，921<br>%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。<br>[QC]是log信息的开头，可以为任意字符，一般为项目简称。</li>\n</ol>\n"},{"title":"SpringCloud 服务中心之 Eureka","date":"2018-08-01T08:43:15.000Z","_content":"![Eureka](/images/SpringCloud.jpg)\n\n>SpringCloud微服务架构基于SpringBoot进行开发组件，即插即用非常方便，用了Spring Boot根本停不下来。SpringCloud包含了服务和注册中心(Zookeeper Eureka Consul)、熔断器(Hystrix)、动态路由(Zuul)、配置中心(Spring cloud config)、负责均衡(Ribbon)、REST服务调用(Fegin)等集成组件。让我们一步步通过项目来学习SpringCloud！\n\n ## 1. Eureka 服务发现和注册\nEureka 是 Netflix 旗下微服务开发组件，用于服务发现和注册中心，分为服务端和客户端，服务端作为注册中心作为其他客户端的提供注册服务，客户端将需要暴露的接口服务注册到服务端中，通过周期性向服务端发送心跳保证自身健康可用性。\n\n\n## 2. EurekaServer 注册中心搭建\n首先建立项目使用maven来构建项目，pom.xml依赖关系如下本项目用最新的版本进行教程，相关的官方教程可查看[Spring Cloud Eureka](http://projects.spring.io/spring-cloud/#quick-start)\n##### pom.xml maven依赖配置\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<artifactId>EurekaServer</artifactId>\n\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n</properties>\n\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.1.RELEASE</version>\n</parent>\n\n<dependencyManagement>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-dependencies</artifactId>\n        <version>Finchley.SR1</version>\n        <type>pom</type>\n        <scope>import</scope>\n    </dependency>\n</dependencies>\n</dependencyManagement>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n</dependencies>\n<!--项目构建maven插件-->\n<build>\n<plugins>\n    <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n    </plugin>\n</plugins>\n</build>\n</project>\n```\n##### SpringBoot 启动配置项\n``` java\npackage com;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@SpringBootApplication\n@EnableEurekaServer\n@EnableWebSecurity\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class，args);\n    }\n}\n```\n##### WebSecurityConfig 安全认证配置\n``` java\npackage com.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.csrf().disable(); //关闭csrf\n        http.authorizeRequests().anyRequest().authenticated().and().httpBasic(); //开启认证\n    }\n}\n```\n##### application.yml 基本配置项\n``` yml\n#Eureka 服务中心设置 \neureka:\n  client:\n    #自身不注册\n    register-with-eureka: false\n    #是否开启检索服务\n    fetch-registry: false\n#security安全校验  \nspring:\n  security:\n    user:\n      name: root\n      password: 123123\n#服务器端口设置\nserver:\n  port: 8888\n```\n启动项目通过 http://localhost:8888 查看Eureka注册中心管理页面，为了安全性加入了security安全校验，输入账号密码进入管理页面。\n![Eureka Server Center](/images/eureka.png)\n\n## 3.  EurekaClient 服务搭建\n##### pom.xml maven依赖配置\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <artifactId>EurekaClient</artifactId>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.1.RELEASE</version>\n    </parent>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>Finchley.SR1</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n##### SpringBoot 启动配置项\n``` java\npackage com;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@EnableEurekaClient\n@RestController\npublic class Application {\n\n    @RequestMapping(\"/test1\")\n    public String myTestService(){\n        return \"测试1\";\n    }\n\n    @RequestMapping(\"/test2\")\n    public String myTestService2(){\n        return \"测试2\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class，args);\n    }\n}\n```\n##### application.yml配置\n``` yml\n#  设置服务名\nspring:\n  application:\n    name: EurekaClient1\n#  设置注册中心地址 root:123123为注册中心设置的账号密码\neureka:\n  client:\n    service-url:\n      defaultZone: http://root:123123@localhost:8888/eureka\n```","source":"_posts/SprintCloud微服务-Eureka.md","raw":"---\ntitle: SpringCloud 服务中心之 Eureka\ndate: 2018-08-01 16:43:15\ncategories: [Spring]\ntags:\n    - Spring\n    - Java\n---\n![Eureka](/images/SpringCloud.jpg)\n\n>SpringCloud微服务架构基于SpringBoot进行开发组件，即插即用非常方便，用了Spring Boot根本停不下来。SpringCloud包含了服务和注册中心(Zookeeper Eureka Consul)、熔断器(Hystrix)、动态路由(Zuul)、配置中心(Spring cloud config)、负责均衡(Ribbon)、REST服务调用(Fegin)等集成组件。让我们一步步通过项目来学习SpringCloud！\n\n ## 1. Eureka 服务发现和注册\nEureka 是 Netflix 旗下微服务开发组件，用于服务发现和注册中心，分为服务端和客户端，服务端作为注册中心作为其他客户端的提供注册服务，客户端将需要暴露的接口服务注册到服务端中，通过周期性向服务端发送心跳保证自身健康可用性。\n\n\n## 2. EurekaServer 注册中心搭建\n首先建立项目使用maven来构建项目，pom.xml依赖关系如下本项目用最新的版本进行教程，相关的官方教程可查看[Spring Cloud Eureka](http://projects.spring.io/spring-cloud/#quick-start)\n##### pom.xml maven依赖配置\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<artifactId>EurekaServer</artifactId>\n\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n</properties>\n\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.0.1.RELEASE</version>\n</parent>\n\n<dependencyManagement>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-dependencies</artifactId>\n        <version>Finchley.SR1</version>\n        <type>pom</type>\n        <scope>import</scope>\n    </dependency>\n</dependencies>\n</dependencyManagement>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n</dependencies>\n<!--项目构建maven插件-->\n<build>\n<plugins>\n    <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n    </plugin>\n</plugins>\n</build>\n</project>\n```\n##### SpringBoot 启动配置项\n``` java\npackage com;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@SpringBootApplication\n@EnableEurekaServer\n@EnableWebSecurity\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class，args);\n    }\n}\n```\n##### WebSecurityConfig 安全认证配置\n``` java\npackage com.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.csrf().disable(); //关闭csrf\n        http.authorizeRequests().anyRequest().authenticated().and().httpBasic(); //开启认证\n    }\n}\n```\n##### application.yml 基本配置项\n``` yml\n#Eureka 服务中心设置 \neureka:\n  client:\n    #自身不注册\n    register-with-eureka: false\n    #是否开启检索服务\n    fetch-registry: false\n#security安全校验  \nspring:\n  security:\n    user:\n      name: root\n      password: 123123\n#服务器端口设置\nserver:\n  port: 8888\n```\n启动项目通过 http://localhost:8888 查看Eureka注册中心管理页面，为了安全性加入了security安全校验，输入账号密码进入管理页面。\n![Eureka Server Center](/images/eureka.png)\n\n## 3.  EurekaClient 服务搭建\n##### pom.xml maven依赖配置\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <artifactId>EurekaClient</artifactId>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.1.RELEASE</version>\n    </parent>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>Finchley.SR1</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n##### SpringBoot 启动配置项\n``` java\npackage com;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@EnableEurekaClient\n@RestController\npublic class Application {\n\n    @RequestMapping(\"/test1\")\n    public String myTestService(){\n        return \"测试1\";\n    }\n\n    @RequestMapping(\"/test2\")\n    public String myTestService2(){\n        return \"测试2\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class，args);\n    }\n}\n```\n##### application.yml配置\n``` yml\n#  设置服务名\nspring:\n  application:\n    name: EurekaClient1\n#  设置注册中心地址 root:123123为注册中心设置的账号密码\neureka:\n  client:\n    service-url:\n      defaultZone: http://root:123123@localhost:8888/eureka\n```","slug":"SprintCloud微服务-Eureka","published":1,"updated":"2019-03-27T02:16:16.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldu130017ysqugqxmelps","content":"<p><img src=\"/images/SpringCloud.jpg\" alt=\"Eureka\"></p>\n<blockquote>\n<p>SpringCloud微服务架构基于SpringBoot进行开发组件，即插即用非常方便，用了Spring Boot根本停不下来。SpringCloud包含了服务和注册中心(Zookeeper Eureka Consul)、熔断器(Hystrix)、动态路由(Zuul)、配置中心(Spring cloud config)、负责均衡(Ribbon)、REST服务调用(Fegin)等集成组件。让我们一步步通过项目来学习SpringCloud！</p>\n</blockquote>\n<h2 id=\"1-Eureka-服务发现和注册\"><a href=\"#1-Eureka-服务发现和注册\" class=\"headerlink\" title=\"1. Eureka 服务发现和注册\"></a>1. Eureka 服务发现和注册</h2><p>Eureka 是 Netflix 旗下微服务开发组件，用于服务发现和注册中心，分为服务端和客户端，服务端作为注册中心作为其他客户端的提供注册服务，客户端将需要暴露的接口服务注册到服务端中，通过周期性向服务端发送心跳保证自身健康可用性。</p>\n<h2 id=\"2-EurekaServer-注册中心搭建\"><a href=\"#2-EurekaServer-注册中心搭建\" class=\"headerlink\" title=\"2. EurekaServer 注册中心搭建\"></a>2. EurekaServer 注册中心搭建</h2><p>首先建立项目使用maven来构建项目，pom.xml依赖关系如下本项目用最新的版本进行教程，相关的官方教程可查看<a href=\"http://projects.spring.io/spring-cloud/#quick-start\" target=\"_blank\" rel=\"noopener\">Spring Cloud Eureka</a></p>\n<h5 id=\"pom-xml-maven依赖配置\"><a href=\"#pom-xml-maven依赖配置\" class=\"headerlink\" title=\"pom.xml maven依赖配置\"></a>pom.xml maven依赖配置</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>EurekaServer<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>Finchley.SR1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--项目构建maven插件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"SpringBoot-启动配置项\"><a href=\"#SpringBoot-启动配置项\" class=\"headerlink\" title=\"SpringBoot 启动配置项\"></a>SpringBoot 启动配置项</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class，args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"WebSecurityConfig-安全认证配置\"><a href=\"#WebSecurityConfig-安全认证配置\" class=\"headerlink\" title=\"WebSecurityConfig 安全认证配置\"></a>WebSecurityConfig 安全认证配置</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        http.csrf().disable(); <span class=\"comment\">//关闭csrf</span></span><br><span class=\"line\">        http.authorizeRequests().anyRequest().authenticated().and().httpBasic(); <span class=\"comment\">//开启认证</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"application-yml-基本配置项\"><a href=\"#application-yml-基本配置项\" class=\"headerlink\" title=\"application.yml 基本配置项\"></a>application.yml 基本配置项</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Eureka 服务中心设置 </span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\">    <span class=\"comment\">#自身不注册</span></span><br><span class=\"line\"><span class=\"attr\">    register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">#是否开启检索服务</span></span><br><span class=\"line\"><span class=\"attr\">    fetch-registry:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">#security安全校验  </span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  security:</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">      password:</span> <span class=\"number\">123123</span></span><br><span class=\"line\"><span class=\"comment\">#服务器端口设置</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8888</span></span><br></pre></td></tr></table></figure>\n<p>启动项目通过 <a href=\"http://localhost:8888\" target=\"_blank\" rel=\"noopener\">http://localhost:8888</a> 查看Eureka注册中心管理页面，为了安全性加入了security安全校验，输入账号密码进入管理页面。<br><img src=\"/images/eureka.png\" alt=\"Eureka Server Center\"></p>\n<h2 id=\"3-EurekaClient-服务搭建\"><a href=\"#3-EurekaClient-服务搭建\" class=\"headerlink\" title=\"3.  EurekaClient 服务搭建\"></a>3.  EurekaClient 服务搭建</h2><h5 id=\"pom-xml-maven依赖配置-1\"><a href=\"#pom-xml-maven依赖配置-1\" class=\"headerlink\" title=\"pom.xml maven依赖配置\"></a>pom.xml maven依赖配置</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>EurekaClient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>Finchley.SR1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"SpringBoot-启动配置项-1\"><a href=\"#SpringBoot-启动配置项-1\" class=\"headerlink\" title=\"SpringBoot 启动配置项\"></a>SpringBoot 启动配置项</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test1\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">myTestService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"测试1\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test2\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">myTestService2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"测试2\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class，args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"application-yml配置\"><a href=\"#application-yml配置\" class=\"headerlink\" title=\"application.yml配置\"></a>application.yml配置</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  设置服务名</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">EurekaClient1</span></span><br><span class=\"line\"><span class=\"comment\">#  设置注册中心地址 root:123123为注册中心设置的账号密码</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://root:123123@localhost:8888/eureka</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/SpringCloud.jpg\" alt=\"Eureka\"></p>\n<blockquote>\n<p>SpringCloud微服务架构基于SpringBoot进行开发组件，即插即用非常方便，用了Spring Boot根本停不下来。SpringCloud包含了服务和注册中心(Zookeeper Eureka Consul)、熔断器(Hystrix)、动态路由(Zuul)、配置中心(Spring cloud config)、负责均衡(Ribbon)、REST服务调用(Fegin)等集成组件。让我们一步步通过项目来学习SpringCloud！</p>\n</blockquote>\n<h2 id=\"1-Eureka-服务发现和注册\"><a href=\"#1-Eureka-服务发现和注册\" class=\"headerlink\" title=\"1. Eureka 服务发现和注册\"></a>1. Eureka 服务发现和注册</h2><p>Eureka 是 Netflix 旗下微服务开发组件，用于服务发现和注册中心，分为服务端和客户端，服务端作为注册中心作为其他客户端的提供注册服务，客户端将需要暴露的接口服务注册到服务端中，通过周期性向服务端发送心跳保证自身健康可用性。</p>\n<h2 id=\"2-EurekaServer-注册中心搭建\"><a href=\"#2-EurekaServer-注册中心搭建\" class=\"headerlink\" title=\"2. EurekaServer 注册中心搭建\"></a>2. EurekaServer 注册中心搭建</h2><p>首先建立项目使用maven来构建项目，pom.xml依赖关系如下本项目用最新的版本进行教程，相关的官方教程可查看<a href=\"http://projects.spring.io/spring-cloud/#quick-start\" target=\"_blank\" rel=\"noopener\">Spring Cloud Eureka</a></p>\n<h5 id=\"pom-xml-maven依赖配置\"><a href=\"#pom-xml-maven依赖配置\" class=\"headerlink\" title=\"pom.xml maven依赖配置\"></a>pom.xml maven依赖配置</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>EurekaServer<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>Finchley.SR1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--项目构建maven插件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"SpringBoot-启动配置项\"><a href=\"#SpringBoot-启动配置项\" class=\"headerlink\" title=\"SpringBoot 启动配置项\"></a>SpringBoot 启动配置项</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class，args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"WebSecurityConfig-安全认证配置\"><a href=\"#WebSecurityConfig-安全认证配置\" class=\"headerlink\" title=\"WebSecurityConfig 安全认证配置\"></a>WebSecurityConfig 安全认证配置</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        http.csrf().disable(); <span class=\"comment\">//关闭csrf</span></span><br><span class=\"line\">        http.authorizeRequests().anyRequest().authenticated().and().httpBasic(); <span class=\"comment\">//开启认证</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"application-yml-基本配置项\"><a href=\"#application-yml-基本配置项\" class=\"headerlink\" title=\"application.yml 基本配置项\"></a>application.yml 基本配置项</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Eureka 服务中心设置 </span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\">    <span class=\"comment\">#自身不注册</span></span><br><span class=\"line\"><span class=\"attr\">    register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">#是否开启检索服务</span></span><br><span class=\"line\"><span class=\"attr\">    fetch-registry:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\">#security安全校验  </span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  security:</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">      password:</span> <span class=\"number\">123123</span></span><br><span class=\"line\"><span class=\"comment\">#服务器端口设置</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8888</span></span><br></pre></td></tr></table></figure>\n<p>启动项目通过 <a href=\"http://localhost:8888\" target=\"_blank\" rel=\"noopener\">http://localhost:8888</a> 查看Eureka注册中心管理页面，为了安全性加入了security安全校验，输入账号密码进入管理页面。<br><img src=\"/images/eureka.png\" alt=\"Eureka Server Center\"></p>\n<h2 id=\"3-EurekaClient-服务搭建\"><a href=\"#3-EurekaClient-服务搭建\" class=\"headerlink\" title=\"3.  EurekaClient 服务搭建\"></a>3.  EurekaClient 服务搭建</h2><h5 id=\"pom-xml-maven依赖配置-1\"><a href=\"#pom-xml-maven依赖配置-1\" class=\"headerlink\" title=\"pom.xml maven依赖配置\"></a>pom.xml maven依赖配置</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>EurekaClient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>Finchley.SR1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"SpringBoot-启动配置项-1\"><a href=\"#SpringBoot-启动配置项-1\" class=\"headerlink\" title=\"SpringBoot 启动配置项\"></a>SpringBoot 启动配置项</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test1\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">myTestService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"测试1\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test2\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">myTestService2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"测试2\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class，args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"application-yml配置\"><a href=\"#application-yml配置\" class=\"headerlink\" title=\"application.yml配置\"></a>application.yml配置</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  设置服务名</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">EurekaClient1</span></span><br><span class=\"line\"><span class=\"comment\">#  设置注册中心地址 root:123123为注册中心设置的账号密码</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    service-url:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://root:123123@localhost:8888/eureka</span></span><br></pre></td></tr></table></figure>"},{"title":"Winsw 把 java 项目做成服务","date":"2018-08-16T12:04:17.000Z","_content":"\n>jar项目需要通过命令行jar -jar 执行脚本启动显示控制台，由于强迫症可以使用javaw -jar来执行可以在后台执行，但通过java编译启动在window环境下进程名都为java.exe一旦项目多了当你要更新部署更新关闭项目时候就懵逼了有可能就会误操作，通过Google发现有个开源的软件\nwinsw 可以把任何软件做为window 的服务来管理，这样在services.msc 服务管理里可以很方便的进行管理更新部署。\n\n## 1.Winsw 环境\nWinsw是个开源项目，Github地址为:https://github.com/kohsuke/winsw 依赖环境为NET2 或 NET4， 可通过配置文件进行修改。\n\n## 2.JAVA 项目注册服务\n根据作者的介绍注册的服务依赖于配置文件 *.xml，这里需要注意的是xml的文件名称必须和winsw.exe同名。默认是按软件的名称来匹配配置文件。例如你把winsw.exe重复名为test.exe那配置文件必须为test.xml不然不无法使用。\n``` xml\n<service>\n  <id>MyTest</id>\n  <name>MyTest</name>\n  <description>测试jar项目服务</description>\n  <env name=\"JENKINS_HOME\" value=\"%BASE%\"/>\n  <executable>java</executable>\n  <arguments>-Xrs -Xmx256m -jar \"%BASE%\\test.jar\" --httpPort=8080</arguments>\n  <logmode>rotate</logmode>\n</service>\n```\n配置文件解释:\n- id：服务名称 (唯一)\n- name：显示服务名称\n- description：服务描述\n- env：环境变量 JENKINS_HOME 赋值给 %BASE%\n- executable：执行命令 这里我们是用java启动\n- arguments：执行的一些参数\n- logmode：日志模式\n这里 executable arguments 就相当于你在控制台执行的脚本，根据你的需求进行改变命令和参数。\n通过控制台进入winsw软件目录执行`` winsw.exe install`` 注册服务， winsw为软件名称可以自行修改。执行成功可以在控制看到\n![注册成功](/images/winsw.png)\n\n如果发现错误请查看 `[软件名称].wrapper.log` 日志排查，是否配置文件名和软件名不一致或者配置的地址不存在等。然后你可以通过 services.msc 对你的服务进行操作了启动，停止。注册的服务默认是AutoStart每次重启电脑都会自动启动。\n\n配置文件的相关其他设置可以参考: https://github.com/kohsuke/winsw/blob/master/doc/xmlConfigFile.md\n","source":"_posts/Winsw把java项目做成服务.md","raw":"---\ntitle: Winsw 把 java 项目做成服务\ndate: 2018-08-16 20:04:17\ncategories: [技术]\ntags: \n\t- Java\n---\n\n>jar项目需要通过命令行jar -jar 执行脚本启动显示控制台，由于强迫症可以使用javaw -jar来执行可以在后台执行，但通过java编译启动在window环境下进程名都为java.exe一旦项目多了当你要更新部署更新关闭项目时候就懵逼了有可能就会误操作，通过Google发现有个开源的软件\nwinsw 可以把任何软件做为window 的服务来管理，这样在services.msc 服务管理里可以很方便的进行管理更新部署。\n\n## 1.Winsw 环境\nWinsw是个开源项目，Github地址为:https://github.com/kohsuke/winsw 依赖环境为NET2 或 NET4， 可通过配置文件进行修改。\n\n## 2.JAVA 项目注册服务\n根据作者的介绍注册的服务依赖于配置文件 *.xml，这里需要注意的是xml的文件名称必须和winsw.exe同名。默认是按软件的名称来匹配配置文件。例如你把winsw.exe重复名为test.exe那配置文件必须为test.xml不然不无法使用。\n``` xml\n<service>\n  <id>MyTest</id>\n  <name>MyTest</name>\n  <description>测试jar项目服务</description>\n  <env name=\"JENKINS_HOME\" value=\"%BASE%\"/>\n  <executable>java</executable>\n  <arguments>-Xrs -Xmx256m -jar \"%BASE%\\test.jar\" --httpPort=8080</arguments>\n  <logmode>rotate</logmode>\n</service>\n```\n配置文件解释:\n- id：服务名称 (唯一)\n- name：显示服务名称\n- description：服务描述\n- env：环境变量 JENKINS_HOME 赋值给 %BASE%\n- executable：执行命令 这里我们是用java启动\n- arguments：执行的一些参数\n- logmode：日志模式\n这里 executable arguments 就相当于你在控制台执行的脚本，根据你的需求进行改变命令和参数。\n通过控制台进入winsw软件目录执行`` winsw.exe install`` 注册服务， winsw为软件名称可以自行修改。执行成功可以在控制看到\n![注册成功](/images/winsw.png)\n\n如果发现错误请查看 `[软件名称].wrapper.log` 日志排查，是否配置文件名和软件名不一致或者配置的地址不存在等。然后你可以通过 services.msc 对你的服务进行操作了启动，停止。注册的服务默认是AutoStart每次重启电脑都会自动启动。\n\n配置文件的相关其他设置可以参考: https://github.com/kohsuke/winsw/blob/master/doc/xmlConfigFile.md\n","slug":"Winsw把java项目做成服务","published":1,"updated":"2019-03-27T02:16:16.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtqldu16001cysqucpxn1gci","content":"<blockquote>\n<p>jar项目需要通过命令行jar -jar 执行脚本启动显示控制台，由于强迫症可以使用javaw -jar来执行可以在后台执行，但通过java编译启动在window环境下进程名都为java.exe一旦项目多了当你要更新部署更新关闭项目时候就懵逼了有可能就会误操作，通过Google发现有个开源的软件<br>winsw 可以把任何软件做为window 的服务来管理，这样在services.msc 服务管理里可以很方便的进行管理更新部署。</p>\n</blockquote>\n<h2 id=\"1-Winsw-环境\"><a href=\"#1-Winsw-环境\" class=\"headerlink\" title=\"1.Winsw 环境\"></a>1.Winsw 环境</h2><p>Winsw是个开源项目，Github地址为:<a href=\"https://github.com/kohsuke/winsw\" target=\"_blank\" rel=\"noopener\">https://github.com/kohsuke/winsw</a> 依赖环境为NET2 或 NET4， 可通过配置文件进行修改。</p>\n<h2 id=\"2-JAVA-项目注册服务\"><a href=\"#2-JAVA-项目注册服务\" class=\"headerlink\" title=\"2.JAVA 项目注册服务\"></a>2.JAVA 项目注册服务</h2><p>根据作者的介绍注册的服务依赖于配置文件 *.xml，这里需要注意的是xml的文件名称必须和winsw.exe同名。默认是按软件的名称来匹配配置文件。例如你把winsw.exe重复名为test.exe那配置文件必须为test.xml不然不无法使用。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>MyTest<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>MyTest<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>测试jar项目服务<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">env</span> <span class=\"attr\">name</span>=<span class=\"string\">\"JENKINS_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%BASE%\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executable</span>&gt;</span>java<span class=\"tag\">&lt;/<span class=\"name\">executable</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">arguments</span>&gt;</span>-Xrs -Xmx256m -jar \"%BASE%\\test.jar\" --httpPort=8080<span class=\"tag\">&lt;/<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">logmode</span>&gt;</span>rotate<span class=\"tag\">&lt;/<span class=\"name\">logmode</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>配置文件解释:</p>\n<ul>\n<li>id：服务名称 (唯一)</li>\n<li>name：显示服务名称</li>\n<li>description：服务描述</li>\n<li>env：环境变量 JENKINS_HOME 赋值给 %BASE%</li>\n<li>executable：执行命令 这里我们是用java启动</li>\n<li>arguments：执行的一些参数</li>\n<li>logmode：日志模式<br>这里 executable arguments 就相当于你在控制台执行的脚本，根据你的需求进行改变命令和参数。<br>通过控制台进入winsw软件目录执行<code>winsw.exe install</code> 注册服务， winsw为软件名称可以自行修改。执行成功可以在控制看到<br><img src=\"/images/winsw.png\" alt=\"注册成功\"></li>\n</ul>\n<p>如果发现错误请查看 <code>[软件名称].wrapper.log</code> 日志排查，是否配置文件名和软件名不一致或者配置的地址不存在等。然后你可以通过 services.msc 对你的服务进行操作了启动，停止。注册的服务默认是AutoStart每次重启电脑都会自动启动。</p>\n<p>配置文件的相关其他设置可以参考: <a href=\"https://github.com/kohsuke/winsw/blob/master/doc/xmlConfigFile.md\" target=\"_blank\" rel=\"noopener\">https://github.com/kohsuke/winsw/blob/master/doc/xmlConfigFile.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>jar项目需要通过命令行jar -jar 执行脚本启动显示控制台，由于强迫症可以使用javaw -jar来执行可以在后台执行，但通过java编译启动在window环境下进程名都为java.exe一旦项目多了当你要更新部署更新关闭项目时候就懵逼了有可能就会误操作，通过Google发现有个开源的软件<br>winsw 可以把任何软件做为window 的服务来管理，这样在services.msc 服务管理里可以很方便的进行管理更新部署。</p>\n</blockquote>\n<h2 id=\"1-Winsw-环境\"><a href=\"#1-Winsw-环境\" class=\"headerlink\" title=\"1.Winsw 环境\"></a>1.Winsw 环境</h2><p>Winsw是个开源项目，Github地址为:<a href=\"https://github.com/kohsuke/winsw\" target=\"_blank\" rel=\"noopener\">https://github.com/kohsuke/winsw</a> 依赖环境为NET2 或 NET4， 可通过配置文件进行修改。</p>\n<h2 id=\"2-JAVA-项目注册服务\"><a href=\"#2-JAVA-项目注册服务\" class=\"headerlink\" title=\"2.JAVA 项目注册服务\"></a>2.JAVA 项目注册服务</h2><p>根据作者的介绍注册的服务依赖于配置文件 *.xml，这里需要注意的是xml的文件名称必须和winsw.exe同名。默认是按软件的名称来匹配配置文件。例如你把winsw.exe重复名为test.exe那配置文件必须为test.xml不然不无法使用。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>MyTest<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>MyTest<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>测试jar项目服务<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">env</span> <span class=\"attr\">name</span>=<span class=\"string\">\"JENKINS_HOME\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%BASE%\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executable</span>&gt;</span>java<span class=\"tag\">&lt;/<span class=\"name\">executable</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">arguments</span>&gt;</span>-Xrs -Xmx256m -jar \"%BASE%\\test.jar\" --httpPort=8080<span class=\"tag\">&lt;/<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">logmode</span>&gt;</span>rotate<span class=\"tag\">&lt;/<span class=\"name\">logmode</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>配置文件解释:</p>\n<ul>\n<li>id：服务名称 (唯一)</li>\n<li>name：显示服务名称</li>\n<li>description：服务描述</li>\n<li>env：环境变量 JENKINS_HOME 赋值给 %BASE%</li>\n<li>executable：执行命令 这里我们是用java启动</li>\n<li>arguments：执行的一些参数</li>\n<li>logmode：日志模式<br>这里 executable arguments 就相当于你在控制台执行的脚本，根据你的需求进行改变命令和参数。<br>通过控制台进入winsw软件目录执行<code>winsw.exe install</code> 注册服务， winsw为软件名称可以自行修改。执行成功可以在控制看到<br><img src=\"/images/winsw.png\" alt=\"注册成功\"></li>\n</ul>\n<p>如果发现错误请查看 <code>[软件名称].wrapper.log</code> 日志排查，是否配置文件名和软件名不一致或者配置的地址不存在等。然后你可以通过 services.msc 对你的服务进行操作了启动，停止。注册的服务默认是AutoStart每次重启电脑都会自动启动。</p>\n<p>配置文件的相关其他设置可以参考: <a href=\"https://github.com/kohsuke/winsw/blob/master/doc/xmlConfigFile.md\" target=\"_blank\" rel=\"noopener\">https://github.com/kohsuke/winsw/blob/master/doc/xmlConfigFile.md</a></p>\n"},{"layout":"post","title":"Hexo+GitHub 第一次搭建笔记","date":"2018-05-24T06:48:00.000Z","comments":1,"_content":"\n![Hexo](/images/hexo.jpg)\n\n> Hexo+GitHub 搭建踩坑行动，平时有什么代码心得或者遇到一些奇葩BUG、都没有记下来，后来遇到类似的问题居然又忘记了，所以想自己搭建一个博客记录下一些平时遇到的问题和需要解决的一些技术问题记录下来以便以后回来还可以查阅，就用Hexo搭建一个静态的博客。\n\n## 1.Hexo 环境准备\n * [Node.js](http://nodejs.cn/) hexo依赖环境\n * [Git Bash](https://git-scm.com/) 根据OS下载安装包 用于发布和更新微博\n \n##### 安装 Hexo\n``` bash\n#1.安装hexo环境\nnpm install hexo-cli -g  \n#2.初始化hexo blog 文件夹和相关带代码 bolgName为文件夹名称\nhexo init [blogName]\n#3.进入博客文件夹\ncd blog\n#4.进行依赖更新安装\nnpm install\n ```\n \n\n##### 常用指令\n```bash\n#新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。\n$ hexo init [folder]\n#新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 \n#default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。\n$ hexo new [layout] <title>\n#生成静态文件。\n$ hexo g\n#发表草稿\n$ hexo publish [layout] <filename>\n# 启动服务器。默认情况下，访问网址为： http://localhost:4000/\n$ hexo s\n# 部署网站\n$ hexo deploy\n# -p， --port\t重设端口\n# -s， --static\t只使用静态文件\n# -l， --log\t启动日记记录，使用覆盖记录格式\n ```\n \n ## 2.GitHub Page 准备\n* 登录Github创建一个reqo，名称为 `` [yourname].github.io `` (这里注意下yourname最好跟你库的用户名一样)\n\n* 本地使用git设置username 和email \n        \n```\ngit config --global user.name [username]\ngit config --global user.email [email]\n```\n\n* GitHub SSH KEY 设置\n![GitHub SSH key设置](/images/ssh-key.jpg) \n\n``` bash\n    ssh-keygen -t rsa -C [email]\n```\n秘钥 `` C:\\Users\\serwer\\.ssh\\id_rsa.pub `` 复制添加到Github SSH Key中\n\n在 **Git Bash** 中验证是否添加成功：``ssh -T git@github.com``\n\n* 配置_config.yml 发布静态文件到github，修改_config.yml进行github发布设置\n\n``` yml\ndeploy:\n  type: git\n  repo: git@github.com:[username]/[username].github.io.git\n  branch: master\n ```\n 通过 **Git Bash** `` hexo d `` 进行发布更新到github 然后访问你的reqo page即可看到属于你自己的静态微博    \n \n 可能遇到的问题：\n  ![缺少发布插件](/images/error.jpg)\n  \n  解决方法:`` npm install --save hexo-deployer-git `` 安装hexo git发布插件然后执行``hexo d`` \n\n \n    ","source":"_posts/hexo.md","raw":"---\nlayout: post\ntitle: \"Hexo+GitHub 第一次搭建笔记\"\ndate: 2018-05-24 14:48\ncategories: [技术]\ncomments: true\ntags: \n\t- 心得 \n---\n\n![Hexo](/images/hexo.jpg)\n\n> Hexo+GitHub 搭建踩坑行动，平时有什么代码心得或者遇到一些奇葩BUG、都没有记下来，后来遇到类似的问题居然又忘记了，所以想自己搭建一个博客记录下一些平时遇到的问题和需要解决的一些技术问题记录下来以便以后回来还可以查阅，就用Hexo搭建一个静态的博客。\n\n## 1.Hexo 环境准备\n * [Node.js](http://nodejs.cn/) hexo依赖环境\n * [Git Bash](https://git-scm.com/) 根据OS下载安装包 用于发布和更新微博\n \n##### 安装 Hexo\n``` bash\n#1.安装hexo环境\nnpm install hexo-cli -g  \n#2.初始化hexo blog 文件夹和相关带代码 bolgName为文件夹名称\nhexo init [blogName]\n#3.进入博客文件夹\ncd blog\n#4.进行依赖更新安装\nnpm install\n ```\n \n\n##### 常用指令\n```bash\n#新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。\n$ hexo init [folder]\n#新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 \n#default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。\n$ hexo new [layout] <title>\n#生成静态文件。\n$ hexo g\n#发表草稿\n$ hexo publish [layout] <filename>\n# 启动服务器。默认情况下，访问网址为： http://localhost:4000/\n$ hexo s\n# 部署网站\n$ hexo deploy\n# -p， --port\t重设端口\n# -s， --static\t只使用静态文件\n# -l， --log\t启动日记记录，使用覆盖记录格式\n ```\n \n ## 2.GitHub Page 准备\n* 登录Github创建一个reqo，名称为 `` [yourname].github.io `` (这里注意下yourname最好跟你库的用户名一样)\n\n* 本地使用git设置username 和email \n        \n```\ngit config --global user.name [username]\ngit config --global user.email [email]\n```\n\n* GitHub SSH KEY 设置\n![GitHub SSH key设置](/images/ssh-key.jpg) \n\n``` bash\n    ssh-keygen -t rsa -C [email]\n```\n秘钥 `` C:\\Users\\serwer\\.ssh\\id_rsa.pub `` 复制添加到Github SSH Key中\n\n在 **Git Bash** 中验证是否添加成功：``ssh -T git@github.com``\n\n* 配置_config.yml 发布静态文件到github，修改_config.yml进行github发布设置\n\n``` yml\ndeploy:\n  type: git\n  repo: git@github.com:[username]/[username].github.io.git\n  branch: master\n ```\n 通过 **Git Bash** `` hexo d `` 进行发布更新到github 然后访问你的reqo page即可看到属于你自己的静态微博    \n \n 可能遇到的问题：\n  ![缺少发布插件](/images/error.jpg)\n  \n  解决方法:`` npm install --save hexo-deployer-git `` 安装hexo git发布插件然后执行``hexo d`` \n\n \n    ","slug":"hexo","published":1,"updated":"2019-03-27T02:16:16.139Z","photos":[],"link":"","_id":"cjtqldu17001eysquob9j9sdy","content":"<p><img src=\"/images/hexo.jpg\" alt=\"Hexo\"></p>\n<blockquote>\n<p>Hexo+GitHub 搭建踩坑行动，平时有什么代码心得或者遇到一些奇葩BUG、都没有记下来，后来遇到类似的问题居然又忘记了，所以想自己搭建一个博客记录下一些平时遇到的问题和需要解决的一些技术问题记录下来以便以后回来还可以查阅，就用Hexo搭建一个静态的博客。</p>\n</blockquote>\n<h2 id=\"1-Hexo-环境准备\"><a href=\"#1-Hexo-环境准备\" class=\"headerlink\" title=\"1.Hexo 环境准备\"></a>1.Hexo 环境准备</h2><ul>\n<li><a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">Node.js</a> hexo依赖环境</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git Bash</a> 根据OS下载安装包 用于发布和更新微博</li>\n</ul>\n<h5 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.安装hexo环境</span></span><br><span class=\"line\">npm install hexo-cli -g  </span><br><span class=\"line\"><span class=\"comment\">#2.初始化hexo blog 文件夹和相关带代码 bolgName为文件夹名称</span></span><br><span class=\"line\">hexo init [blogName]</span><br><span class=\"line\"><span class=\"comment\">#3.进入博客文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\"><span class=\"comment\">#4.进行依赖更新安装</span></span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h5 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</span></span><br><span class=\"line\">$ hexo init [folder]</span><br><span class=\"line\"><span class=\"comment\">#新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 </span></span><br><span class=\"line\"><span class=\"comment\">#default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</span></span><br><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br><span class=\"line\"><span class=\"comment\">#生成静态文件。</span></span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\"><span class=\"comment\">#发表草稿</span></span><br><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br><span class=\"line\"><span class=\"comment\"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/</span></span><br><span class=\"line\">$ hexo s</span><br><span class=\"line\"><span class=\"comment\"># 部署网站</span></span><br><span class=\"line\">$ hexo deploy</span><br><span class=\"line\"><span class=\"comment\"># -p， --port\t重设端口</span></span><br><span class=\"line\"><span class=\"comment\"># -s， --static\t只使用静态文件</span></span><br><span class=\"line\"><span class=\"comment\"># -l， --log\t启动日记记录，使用覆盖记录格式</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-GitHub-Page-准备\"><a href=\"#2-GitHub-Page-准备\" class=\"headerlink\" title=\"2.GitHub Page 准备\"></a>2.GitHub Page 准备</h2><ul>\n<li><p>登录Github创建一个reqo，名称为 <code>[yourname].github.io</code> (这里注意下yourname最好跟你库的用户名一样)</p>\n</li>\n<li><p>本地使用git设置username 和email </p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name [username]</span><br><span class=\"line\">git config --global user.email [email]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>GitHub SSH KEY 设置<br><img src=\"/images/ssh-key.jpg\" alt=\"GitHub SSH key设置\"> </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C [email]</span><br></pre></td></tr></table></figure>\n<p>秘钥 <code>C:\\Users\\serwer\\.ssh\\id_rsa.pub</code> 复制添加到Github SSH Key中</p>\n<p>在 <strong>Git Bash</strong> 中验证是否添加成功：<code>ssh -T git@github.com</code></p>\n<ul>\n<li>配置_config.yml 发布静态文件到github，修改_config.yml进行github发布设置</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">git@github.com:[username]/[username].github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p> 通过 <strong>Git Bash</strong> <code>hexo d</code> 进行发布更新到github 然后访问你的reqo page即可看到属于你自己的静态微博    </p>\n<p> 可能遇到的问题：<br>  <img src=\"/images/error.jpg\" alt=\"缺少发布插件\"></p>\n<p>  解决方法:<code>npm install --save hexo-deployer-git</code> 安装hexo git发布插件然后执行<code>hexo d</code> </p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/hexo.jpg\" alt=\"Hexo\"></p>\n<blockquote>\n<p>Hexo+GitHub 搭建踩坑行动，平时有什么代码心得或者遇到一些奇葩BUG、都没有记下来，后来遇到类似的问题居然又忘记了，所以想自己搭建一个博客记录下一些平时遇到的问题和需要解决的一些技术问题记录下来以便以后回来还可以查阅，就用Hexo搭建一个静态的博客。</p>\n</blockquote>\n<h2 id=\"1-Hexo-环境准备\"><a href=\"#1-Hexo-环境准备\" class=\"headerlink\" title=\"1.Hexo 环境准备\"></a>1.Hexo 环境准备</h2><ul>\n<li><a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">Node.js</a> hexo依赖环境</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git Bash</a> 根据OS下载安装包 用于发布和更新微博</li>\n</ul>\n<h5 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.安装hexo环境</span></span><br><span class=\"line\">npm install hexo-cli -g  </span><br><span class=\"line\"><span class=\"comment\">#2.初始化hexo blog 文件夹和相关带代码 bolgName为文件夹名称</span></span><br><span class=\"line\">hexo init [blogName]</span><br><span class=\"line\"><span class=\"comment\">#3.进入博客文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\"><span class=\"comment\">#4.进行依赖更新安装</span></span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h5 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</span></span><br><span class=\"line\">$ hexo init [folder]</span><br><span class=\"line\"><span class=\"comment\">#新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 </span></span><br><span class=\"line\"><span class=\"comment\">#default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</span></span><br><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br><span class=\"line\"><span class=\"comment\">#生成静态文件。</span></span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\"><span class=\"comment\">#发表草稿</span></span><br><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br><span class=\"line\"><span class=\"comment\"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/</span></span><br><span class=\"line\">$ hexo s</span><br><span class=\"line\"><span class=\"comment\"># 部署网站</span></span><br><span class=\"line\">$ hexo deploy</span><br><span class=\"line\"><span class=\"comment\"># -p， --port\t重设端口</span></span><br><span class=\"line\"><span class=\"comment\"># -s， --static\t只使用静态文件</span></span><br><span class=\"line\"><span class=\"comment\"># -l， --log\t启动日记记录，使用覆盖记录格式</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-GitHub-Page-准备\"><a href=\"#2-GitHub-Page-准备\" class=\"headerlink\" title=\"2.GitHub Page 准备\"></a>2.GitHub Page 准备</h2><ul>\n<li><p>登录Github创建一个reqo，名称为 <code>[yourname].github.io</code> (这里注意下yourname最好跟你库的用户名一样)</p>\n</li>\n<li><p>本地使用git设置username 和email </p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name [username]</span><br><span class=\"line\">git config --global user.email [email]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>GitHub SSH KEY 设置<br><img src=\"/images/ssh-key.jpg\" alt=\"GitHub SSH key设置\"> </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C [email]</span><br></pre></td></tr></table></figure>\n<p>秘钥 <code>C:\\Users\\serwer\\.ssh\\id_rsa.pub</code> 复制添加到Github SSH Key中</p>\n<p>在 <strong>Git Bash</strong> 中验证是否添加成功：<code>ssh -T git@github.com</code></p>\n<ul>\n<li>配置_config.yml 发布静态文件到github，修改_config.yml进行github发布设置</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">git@github.com:[username]/[username].github.io.git</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p> 通过 <strong>Git Bash</strong> <code>hexo d</code> 进行发布更新到github 然后访问你的reqo page即可看到属于你自己的静态微博    </p>\n<p> 可能遇到的问题：<br>  <img src=\"/images/error.jpg\" alt=\"缺少发布插件\"></p>\n<p>  解决方法:<code>npm install --save hexo-deployer-git</code> 安装hexo git发布插件然后执行<code>hexo d</code> </p>\n"},{"layout":"post","title":"MySql 主从集群配置","date":"2019-03-25T01:07:05.000Z","_content":"\n![](/images/MySQL.jpg)\n>记录安装MySql 过程，并搭建主从模式集群。主从模式在项目中的运用例如读写分离，提高吞吐量在大量需要读操作时可以把压力分散到各个从库不影响主库写操作，如发生主库异常宕机也可以通过从库的数据进行恢复或者顶替主库。\n## MySQL 安装\n官方网站下载最靠谱，不要在奇奇怪怪的网站下可能会有乱七八糟的插件之类的，唯一指定网站 https://www.mysql.com/ ，本人下载的ZIP包解压，进入文件夹进行数据库配置，默认配置为dafult.ini如果没有则创建`my.ini`配置文件。\n\n\n## MySQL 同步原理\n![](/images/MySqlReplication.jpg)\n+ `Master`端需要开启`bin.log`，在每次数据发生改变会往`bin.log`增量写入数据并更新`Pos`，以备下一次增量写入标记`Pos`。\n+ `Slave`端的`I/O`读取`master.info`文件，获取`binlog`文件名和位置点并向`Master`端的`I/O`线程发起读取请求。\n+ `Master`端的`I/O`线程会根据`Slave`端的`I/O线`程请求信息来读取`binlog`日志信息与及读取到最新的`binlog`文件名和`Pos`一同返回给`Slave`的`I/O`线程。\n+ `Slave`端的`I/O`线程会把获取到的`binlog`日志写入`relay`日志（中继日志）文件中，并且更新`master.info`文件信息(包含最后一次读取`Pos`用于下次同步更新的位置点)。\n+ `Slave`端的`SQL`线程会定期读取`relay`日志，把二进制的日志解析成`SQL`语句并执行同步数据到从库。\n\n## Master 节点配置\n``` ini\n[mysql]\n# 设置mysql客户端默认字符集UTF8\ndefault-character-set=utf8 \n[mysqld]\n#设置3306端口\nport = 3306 \n# 设置mysql的安装目录\nbasedir=D:\\\\Program Files (x86)\\\\mysql-8.0.15-winx64-master\n# 设置mysql数据库的数据的存放目录\ndatadir=D:\\\\Program Files (x86)\\\\mysql-8.0.15-winx64-master\\\\data\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为UTF8\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n# 服务唯一ID\nserver-id=1\n# 开启Log二进制日志\nlog-bin=master-bin\n# 二进制日志记录方式 混合模式\nbinlog_format=mixed\n```\n\n配置完毕进入`bin`文件夹下打开控制台进行安装初始化\n``` cmd\n# 初始化\nmysqld --initialize --console\n# 注册服务\nmysqld --install [服务名]\n# 启动服务\nnet start [服务名]\n```\n __特别注意 `mysqld --initialize --console` 执行会给你初始化密码，使用命令 `mysql -uroot -p` 登录MySQL__\n\n在`master`库中执行以下脚本\n``` sql\n# 创建用于同步数据的用户\nCREATE USER 'slave3307'@'127.0.0.1' IDENTIFIED  BY '123123';\n# 赋予权限\nGRANT REPLICATION SLAVE,FILE ON *.* TO 'slave3307'@'127.0.0.1';\n# 刷新权限\nFLUSH PRIVILEGES;\n```\n\n## SLAVE 节点配置\n``` ini\n[mysql]\n# 设置mysql客户端默认字符集UTF8\ndefault-character-set=utf8 \n[mysqld]\n#设置3307端口\nport = 3307 \n# 设置mysql的安装目录\nbasedir=D:\\\\Program Files (x86)\\\\mysql-8.0.15-winx64-slave\n# 设置mysql数据库的数据的存放目录\ndatadir=D:\\\\Program Files (x86)\\\\mysql-8.0.15-winx64-slave\\\\data\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为UTF8\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n# 服务唯一ID\nserver-id=2\n# 只读设置\nread_only=1\n# 需要同步的数据库名称，如有多个需配置多条\nreplicate-do-db=mastersql\n```\n\n> `read_only` 这里设置为只读模式，不会影响到`slave`的同步复制功能，可以限制普通用户写入操作防止修改数据导致主从数据不一致，但是无法限制`super`用户的修改数据权限，所以同步复制需要新建一个普通用户用于链接同步。\n\n#### 同步配置\n在`5.7`版本之前需要在`my.ini`配置文件`[mysqld]`下添加\n``` ini\n# 主节点地址\nmaster-host=127.0.0.1\n# 主节点端口\nmaster-port=3306\n# 主节点复制账号\nmaster-user= slave3307\n# 主节点复制密码\nmaster-password= 123123\n# 重连时间\nmaster-connect-retry=60\n```\n`5.7`版本之后的主从配置直接通过动态配置无需修改`ini`\n``` sql\n# 改变同步配置\nchange master to master_host='127.0.0.1',master_port=3306, master_user='slave3307', master_password='123123',master_log_file='binlog.000003',master_log_pos=7676;\n# 开启同步\nstart slave;\n# 查看同步状态\nshow slave status;\n```\n执行`show slave status`语句可以查看当前同步状态，`Slave_IO_Running`和`Slave_SQL_Running`是否为`Yes`，证明同步是否开启成功。`Seconds_Behind_Master`为从库与主库同步位置差异一般为0。执行`stop slave`可停止同步进行修改同步设置然后使用`start slave`重新开启。\n\n\n##### 语句解释\n- `master_host`和`master_port` 为主库地址信息\n- `master_port`和`master_password` 同步的账号密码，我们已配置用户为`slave3307`密码为`123`。\n- 在`master`库中执行`show master status;`获取`master_log_file` 主库日志和`master_log_pos`当前日志位置，这里可以根据实际情况来设置`master_log_pos`的起始位置。\n![主库日志](/images/masterStatus.png)\n\n同步开启后可以尝试在主库下创建一个新数据库`mastersql`,然后新建一张表`mytest`。切换到从库你会发现从库也会自动创建`mastersql`数据库并有一张同名的表`mytest`，说明同步成功。\n\n","source":"_posts/Mysql安装记录.md","raw":"---\nlayout: post\ntitle: MySql 主从集群配置\ndate: 2019-03-25 09:07:05\ncategories: [数据库]\ntags:\n\t- 数据库\n---\n\n![](/images/MySQL.jpg)\n>记录安装MySql 过程，并搭建主从模式集群。主从模式在项目中的运用例如读写分离，提高吞吐量在大量需要读操作时可以把压力分散到各个从库不影响主库写操作，如发生主库异常宕机也可以通过从库的数据进行恢复或者顶替主库。\n## MySQL 安装\n官方网站下载最靠谱，不要在奇奇怪怪的网站下可能会有乱七八糟的插件之类的，唯一指定网站 https://www.mysql.com/ ，本人下载的ZIP包解压，进入文件夹进行数据库配置，默认配置为dafult.ini如果没有则创建`my.ini`配置文件。\n\n\n## MySQL 同步原理\n![](/images/MySqlReplication.jpg)\n+ `Master`端需要开启`bin.log`，在每次数据发生改变会往`bin.log`增量写入数据并更新`Pos`，以备下一次增量写入标记`Pos`。\n+ `Slave`端的`I/O`读取`master.info`文件，获取`binlog`文件名和位置点并向`Master`端的`I/O`线程发起读取请求。\n+ `Master`端的`I/O`线程会根据`Slave`端的`I/O线`程请求信息来读取`binlog`日志信息与及读取到最新的`binlog`文件名和`Pos`一同返回给`Slave`的`I/O`线程。\n+ `Slave`端的`I/O`线程会把获取到的`binlog`日志写入`relay`日志（中继日志）文件中，并且更新`master.info`文件信息(包含最后一次读取`Pos`用于下次同步更新的位置点)。\n+ `Slave`端的`SQL`线程会定期读取`relay`日志，把二进制的日志解析成`SQL`语句并执行同步数据到从库。\n\n## Master 节点配置\n``` ini\n[mysql]\n# 设置mysql客户端默认字符集UTF8\ndefault-character-set=utf8 \n[mysqld]\n#设置3306端口\nport = 3306 \n# 设置mysql的安装目录\nbasedir=D:\\\\Program Files (x86)\\\\mysql-8.0.15-winx64-master\n# 设置mysql数据库的数据的存放目录\ndatadir=D:\\\\Program Files (x86)\\\\mysql-8.0.15-winx64-master\\\\data\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为UTF8\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n# 服务唯一ID\nserver-id=1\n# 开启Log二进制日志\nlog-bin=master-bin\n# 二进制日志记录方式 混合模式\nbinlog_format=mixed\n```\n\n配置完毕进入`bin`文件夹下打开控制台进行安装初始化\n``` cmd\n# 初始化\nmysqld --initialize --console\n# 注册服务\nmysqld --install [服务名]\n# 启动服务\nnet start [服务名]\n```\n __特别注意 `mysqld --initialize --console` 执行会给你初始化密码，使用命令 `mysql -uroot -p` 登录MySQL__\n\n在`master`库中执行以下脚本\n``` sql\n# 创建用于同步数据的用户\nCREATE USER 'slave3307'@'127.0.0.1' IDENTIFIED  BY '123123';\n# 赋予权限\nGRANT REPLICATION SLAVE,FILE ON *.* TO 'slave3307'@'127.0.0.1';\n# 刷新权限\nFLUSH PRIVILEGES;\n```\n\n## SLAVE 节点配置\n``` ini\n[mysql]\n# 设置mysql客户端默认字符集UTF8\ndefault-character-set=utf8 \n[mysqld]\n#设置3307端口\nport = 3307 \n# 设置mysql的安装目录\nbasedir=D:\\\\Program Files (x86)\\\\mysql-8.0.15-winx64-slave\n# 设置mysql数据库的数据的存放目录\ndatadir=D:\\\\Program Files (x86)\\\\mysql-8.0.15-winx64-slave\\\\data\n# 允许最大连接数\nmax_connections=200\n# 服务端使用的字符集默认为UTF8\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n# 服务唯一ID\nserver-id=2\n# 只读设置\nread_only=1\n# 需要同步的数据库名称，如有多个需配置多条\nreplicate-do-db=mastersql\n```\n\n> `read_only` 这里设置为只读模式，不会影响到`slave`的同步复制功能，可以限制普通用户写入操作防止修改数据导致主从数据不一致，但是无法限制`super`用户的修改数据权限，所以同步复制需要新建一个普通用户用于链接同步。\n\n#### 同步配置\n在`5.7`版本之前需要在`my.ini`配置文件`[mysqld]`下添加\n``` ini\n# 主节点地址\nmaster-host=127.0.0.1\n# 主节点端口\nmaster-port=3306\n# 主节点复制账号\nmaster-user= slave3307\n# 主节点复制密码\nmaster-password= 123123\n# 重连时间\nmaster-connect-retry=60\n```\n`5.7`版本之后的主从配置直接通过动态配置无需修改`ini`\n``` sql\n# 改变同步配置\nchange master to master_host='127.0.0.1',master_port=3306, master_user='slave3307', master_password='123123',master_log_file='binlog.000003',master_log_pos=7676;\n# 开启同步\nstart slave;\n# 查看同步状态\nshow slave status;\n```\n执行`show slave status`语句可以查看当前同步状态，`Slave_IO_Running`和`Slave_SQL_Running`是否为`Yes`，证明同步是否开启成功。`Seconds_Behind_Master`为从库与主库同步位置差异一般为0。执行`stop slave`可停止同步进行修改同步设置然后使用`start slave`重新开启。\n\n\n##### 语句解释\n- `master_host`和`master_port` 为主库地址信息\n- `master_port`和`master_password` 同步的账号密码，我们已配置用户为`slave3307`密码为`123`。\n- 在`master`库中执行`show master status;`获取`master_log_file` 主库日志和`master_log_pos`当前日志位置，这里可以根据实际情况来设置`master_log_pos`的起始位置。\n![主库日志](/images/masterStatus.png)\n\n同步开启后可以尝试在主库下创建一个新数据库`mastersql`,然后新建一张表`mytest`。切换到从库你会发现从库也会自动创建`mastersql`数据库并有一张同名的表`mytest`，说明同步成功。\n\n","slug":"Mysql安装记录","published":1,"updated":"2019-03-27T02:16:16.132Z","comments":1,"photos":[],"link":"","_id":"cjtqldu1a001hysqu6wh7hdhe","content":"<p><img src=\"/images/MySQL.jpg\" alt=\"\"></p>\n<blockquote>\n<p>记录安装MySql 过程，并搭建主从模式集群。主从模式在项目中的运用例如读写分离，提高吞吐量在大量需要读操作时可以把压力分散到各个从库不影响主库写操作，如发生主库异常宕机也可以通过从库的数据进行恢复或者顶替主库。</p>\n</blockquote>\n<h2 id=\"MySQL-安装\"><a href=\"#MySQL-安装\" class=\"headerlink\" title=\"MySQL 安装\"></a>MySQL 安装</h2><p>官方网站下载最靠谱，不要在奇奇怪怪的网站下可能会有乱七八糟的插件之类的，唯一指定网站 <a href=\"https://www.mysql.com/\" target=\"_blank\" rel=\"noopener\">https://www.mysql.com/</a> ，本人下载的ZIP包解压，进入文件夹进行数据库配置，默认配置为dafult.ini如果没有则创建<code>my.ini</code>配置文件。</p>\n<h2 id=\"MySQL-同步原理\"><a href=\"#MySQL-同步原理\" class=\"headerlink\" title=\"MySQL 同步原理\"></a>MySQL 同步原理</h2><p><img src=\"/images/MySqlReplication.jpg\" alt=\"\"></p>\n<ul>\n<li><code>Master</code>端需要开启<code>bin.log</code>，在每次数据发生改变会往<code>bin.log</code>增量写入数据并更新<code>Pos</code>，以备下一次增量写入标记<code>Pos</code>。</li>\n<li><code>Slave</code>端的<code>I/O</code>读取<code>master.info</code>文件，获取<code>binlog</code>文件名和位置点并向<code>Master</code>端的<code>I/O</code>线程发起读取请求。</li>\n<li><code>Master</code>端的<code>I/O</code>线程会根据<code>Slave</code>端的<code>I/O线</code>程请求信息来读取<code>binlog</code>日志信息与及读取到最新的<code>binlog</code>文件名和<code>Pos</code>一同返回给<code>Slave</code>的<code>I/O</code>线程。</li>\n<li><code>Slave</code>端的<code>I/O</code>线程会把获取到的<code>binlog</code>日志写入<code>relay</code>日志（中继日志）文件中，并且更新<code>master.info</code>文件信息(包含最后一次读取<code>Pos</code>用于下次同步更新的位置点)。</li>\n<li><code>Slave</code>端的<code>SQL</code>线程会定期读取<code>relay</code>日志，把二进制的日志解析成<code>SQL</code>语句并执行同步数据到从库。</li>\n</ul>\n<h2 id=\"Master-节点配置\"><a href=\"#Master-节点配置\" class=\"headerlink\" title=\"Master 节点配置\"></a>Master 节点配置</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[mysql]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端默认字符集UTF8</span></span><br><span class=\"line\"><span class=\"attr\">default-character-set</span>=utf8 </span><br><span class=\"line\"><span class=\"section\">[mysqld]</span></span><br><span class=\"line\"><span class=\"comment\">#设置3306端口</span></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">3306</span> </span><br><span class=\"line\"><span class=\"comment\"># 设置mysql的安装目录</span></span><br><span class=\"line\"><span class=\"attr\">basedir</span>=D:\\\\Program Files (x86)\\\\mysql-<span class=\"number\">8.0</span>.<span class=\"number\">15</span>-winx64-master</span><br><span class=\"line\"><span class=\"comment\"># 设置mysql数据库的数据的存放目录</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span>=D:\\\\Program Files (x86)\\\\mysql-<span class=\"number\">8.0</span>.<span class=\"number\">15</span>-winx64-master\\\\data</span><br><span class=\"line\"><span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">max_connections</span>=<span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"comment\"># 服务端使用的字符集默认为UTF8</span></span><br><span class=\"line\"><span class=\"attr\">character-set-server</span>=utf8</span><br><span class=\"line\"><span class=\"comment\"># 创建新表时将使用的默认存储引擎</span></span><br><span class=\"line\"><span class=\"attr\">default-storage-engine</span>=INNODB</span><br><span class=\"line\"><span class=\"comment\"># 服务唯一ID</span></span><br><span class=\"line\"><span class=\"attr\">server-id</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># 开启Log二进制日志</span></span><br><span class=\"line\"><span class=\"attr\">log-bin</span>=master-bin</span><br><span class=\"line\"><span class=\"comment\"># 二进制日志记录方式 混合模式</span></span><br><span class=\"line\"><span class=\"attr\">binlog_format</span>=mixed</span><br></pre></td></tr></table></figure>\n<p>配置完毕进入<code>bin</code>文件夹下打开控制台进行安装初始化<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 初始化</span><br><span class=\"line\">mysqld --initialize --console</span><br><span class=\"line\"># 注册服务</span><br><span class=\"line\">mysqld --install [服务名]</span><br><span class=\"line\"># 启动服务</span><br><span class=\"line\"><span class=\"built_in\">net</span> <span class=\"built_in\">start</span> [服务名]</span><br></pre></td></tr></table></figure></p>\n<p> <strong>特别注意 <code>mysqld --initialize --console</code> 执行会给你初始化密码，使用命令 <code>mysql -uroot -p</code> 登录MySQL</strong></p>\n<p>在<code>master</code>库中执行以下脚本<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建用于同步数据的用户</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'slave3307'</span>@<span class=\"string\">'127.0.0.1'</span> <span class=\"keyword\">IDENTIFIED</span>  <span class=\"keyword\">BY</span> <span class=\"string\">'123123'</span>;</span><br><span class=\"line\"># 赋予权限</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">SLAVE</span>,<span class=\"keyword\">FILE</span> <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'slave3307'</span>@<span class=\"string\">'127.0.0.1'</span>;</span><br><span class=\"line\"># 刷新权限</span><br><span class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"SLAVE-节点配置\"><a href=\"#SLAVE-节点配置\" class=\"headerlink\" title=\"SLAVE 节点配置\"></a>SLAVE 节点配置</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[mysql]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端默认字符集UTF8</span></span><br><span class=\"line\"><span class=\"attr\">default-character-set</span>=utf8 </span><br><span class=\"line\"><span class=\"section\">[mysqld]</span></span><br><span class=\"line\"><span class=\"comment\">#设置3307端口</span></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">3307</span> </span><br><span class=\"line\"><span class=\"comment\"># 设置mysql的安装目录</span></span><br><span class=\"line\"><span class=\"attr\">basedir</span>=D:\\\\Program Files (x86)\\\\mysql-<span class=\"number\">8.0</span>.<span class=\"number\">15</span>-winx64-slave</span><br><span class=\"line\"><span class=\"comment\"># 设置mysql数据库的数据的存放目录</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span>=D:\\\\Program Files (x86)\\\\mysql-<span class=\"number\">8.0</span>.<span class=\"number\">15</span>-winx64-slave\\\\data</span><br><span class=\"line\"><span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">max_connections</span>=<span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"comment\"># 服务端使用的字符集默认为UTF8</span></span><br><span class=\"line\"><span class=\"attr\">character-set-server</span>=utf8</span><br><span class=\"line\"><span class=\"comment\"># 创建新表时将使用的默认存储引擎</span></span><br><span class=\"line\"><span class=\"attr\">default-storage-engine</span>=INNODB</span><br><span class=\"line\"><span class=\"comment\"># 服务唯一ID</span></span><br><span class=\"line\"><span class=\"attr\">server-id</span>=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># 只读设置</span></span><br><span class=\"line\"><span class=\"attr\">read_only</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># 需要同步的数据库名称，如有多个需配置多条</span></span><br><span class=\"line\"><span class=\"attr\">replicate-do-db</span>=mastersql</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>read_only</code> 这里设置为只读模式，不会影响到<code>slave</code>的同步复制功能，可以限制普通用户写入操作防止修改数据导致主从数据不一致，但是无法限制<code>super</code>用户的修改数据权限，所以同步复制需要新建一个普通用户用于链接同步。</p>\n</blockquote>\n<h4 id=\"同步配置\"><a href=\"#同步配置\" class=\"headerlink\" title=\"同步配置\"></a>同步配置</h4><p>在<code>5.7</code>版本之前需要在<code>my.ini</code>配置文件<code>[mysqld]</code>下添加<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主节点地址</span></span><br><span class=\"line\"><span class=\"attr\">master-host</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"comment\"># 主节点端口</span></span><br><span class=\"line\"><span class=\"attr\">master-port</span>=<span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"comment\"># 主节点复制账号</span></span><br><span class=\"line\"><span class=\"attr\">master-user</span>= slave3307</span><br><span class=\"line\"><span class=\"comment\"># 主节点复制密码</span></span><br><span class=\"line\"><span class=\"attr\">master-password</span>= <span class=\"number\">123123</span></span><br><span class=\"line\"><span class=\"comment\"># 重连时间</span></span><br><span class=\"line\"><span class=\"attr\">master-connect-retry</span>=<span class=\"number\">60</span></span><br></pre></td></tr></table></figure></p>\n<p><code>5.7</code>版本之后的主从配置直接通过动态配置无需修改<code>ini</code><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 改变同步配置</span><br><span class=\"line\"><span class=\"keyword\">change</span> <span class=\"keyword\">master</span> <span class=\"keyword\">to</span> master_host=<span class=\"string\">'127.0.0.1'</span>,master_port=<span class=\"number\">3306</span>, master_user=<span class=\"string\">'slave3307'</span>, master_password=<span class=\"string\">'123123'</span>,master_log_file=<span class=\"string\">'binlog.000003'</span>,master_log_pos=<span class=\"number\">7676</span>;</span><br><span class=\"line\"># 开启同步</span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">slave</span>;</span><br><span class=\"line\"># 查看同步状态</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">slave</span> <span class=\"keyword\">status</span>;</span><br></pre></td></tr></table></figure></p>\n<p>执行<code>show slave status</code>语句可以查看当前同步状态，<code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>是否为<code>Yes</code>，证明同步是否开启成功。<code>Seconds_Behind_Master</code>为从库与主库同步位置差异一般为0。执行<code>stop slave</code>可停止同步进行修改同步设置然后使用<code>start slave</code>重新开启。</p>\n<h5 id=\"语句解释\"><a href=\"#语句解释\" class=\"headerlink\" title=\"语句解释\"></a>语句解释</h5><ul>\n<li><code>master_host</code>和<code>master_port</code> 为主库地址信息</li>\n<li><code>master_port</code>和<code>master_password</code> 同步的账号密码，我们已配置用户为<code>slave3307</code>密码为<code>123</code>。</li>\n<li>在<code>master</code>库中执行<code>show master status;</code>获取<code>master_log_file</code> 主库日志和<code>master_log_pos</code>当前日志位置，这里可以根据实际情况来设置<code>master_log_pos</code>的起始位置。<br><img src=\"/images/masterStatus.png\" alt=\"主库日志\"></li>\n</ul>\n<p>同步开启后可以尝试在主库下创建一个新数据库<code>mastersql</code>,然后新建一张表<code>mytest</code>。切换到从库你会发现从库也会自动创建<code>mastersql</code>数据库并有一张同名的表<code>mytest</code>，说明同步成功。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/MySQL.jpg\" alt=\"\"></p>\n<blockquote>\n<p>记录安装MySql 过程，并搭建主从模式集群。主从模式在项目中的运用例如读写分离，提高吞吐量在大量需要读操作时可以把压力分散到各个从库不影响主库写操作，如发生主库异常宕机也可以通过从库的数据进行恢复或者顶替主库。</p>\n</blockquote>\n<h2 id=\"MySQL-安装\"><a href=\"#MySQL-安装\" class=\"headerlink\" title=\"MySQL 安装\"></a>MySQL 安装</h2><p>官方网站下载最靠谱，不要在奇奇怪怪的网站下可能会有乱七八糟的插件之类的，唯一指定网站 <a href=\"https://www.mysql.com/\" target=\"_blank\" rel=\"noopener\">https://www.mysql.com/</a> ，本人下载的ZIP包解压，进入文件夹进行数据库配置，默认配置为dafult.ini如果没有则创建<code>my.ini</code>配置文件。</p>\n<h2 id=\"MySQL-同步原理\"><a href=\"#MySQL-同步原理\" class=\"headerlink\" title=\"MySQL 同步原理\"></a>MySQL 同步原理</h2><p><img src=\"/images/MySqlReplication.jpg\" alt=\"\"></p>\n<ul>\n<li><code>Master</code>端需要开启<code>bin.log</code>，在每次数据发生改变会往<code>bin.log</code>增量写入数据并更新<code>Pos</code>，以备下一次增量写入标记<code>Pos</code>。</li>\n<li><code>Slave</code>端的<code>I/O</code>读取<code>master.info</code>文件，获取<code>binlog</code>文件名和位置点并向<code>Master</code>端的<code>I/O</code>线程发起读取请求。</li>\n<li><code>Master</code>端的<code>I/O</code>线程会根据<code>Slave</code>端的<code>I/O线</code>程请求信息来读取<code>binlog</code>日志信息与及读取到最新的<code>binlog</code>文件名和<code>Pos</code>一同返回给<code>Slave</code>的<code>I/O</code>线程。</li>\n<li><code>Slave</code>端的<code>I/O</code>线程会把获取到的<code>binlog</code>日志写入<code>relay</code>日志（中继日志）文件中，并且更新<code>master.info</code>文件信息(包含最后一次读取<code>Pos</code>用于下次同步更新的位置点)。</li>\n<li><code>Slave</code>端的<code>SQL</code>线程会定期读取<code>relay</code>日志，把二进制的日志解析成<code>SQL</code>语句并执行同步数据到从库。</li>\n</ul>\n<h2 id=\"Master-节点配置\"><a href=\"#Master-节点配置\" class=\"headerlink\" title=\"Master 节点配置\"></a>Master 节点配置</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[mysql]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端默认字符集UTF8</span></span><br><span class=\"line\"><span class=\"attr\">default-character-set</span>=utf8 </span><br><span class=\"line\"><span class=\"section\">[mysqld]</span></span><br><span class=\"line\"><span class=\"comment\">#设置3306端口</span></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">3306</span> </span><br><span class=\"line\"><span class=\"comment\"># 设置mysql的安装目录</span></span><br><span class=\"line\"><span class=\"attr\">basedir</span>=D:\\\\Program Files (x86)\\\\mysql-<span class=\"number\">8.0</span>.<span class=\"number\">15</span>-winx64-master</span><br><span class=\"line\"><span class=\"comment\"># 设置mysql数据库的数据的存放目录</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span>=D:\\\\Program Files (x86)\\\\mysql-<span class=\"number\">8.0</span>.<span class=\"number\">15</span>-winx64-master\\\\data</span><br><span class=\"line\"><span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">max_connections</span>=<span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"comment\"># 服务端使用的字符集默认为UTF8</span></span><br><span class=\"line\"><span class=\"attr\">character-set-server</span>=utf8</span><br><span class=\"line\"><span class=\"comment\"># 创建新表时将使用的默认存储引擎</span></span><br><span class=\"line\"><span class=\"attr\">default-storage-engine</span>=INNODB</span><br><span class=\"line\"><span class=\"comment\"># 服务唯一ID</span></span><br><span class=\"line\"><span class=\"attr\">server-id</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># 开启Log二进制日志</span></span><br><span class=\"line\"><span class=\"attr\">log-bin</span>=master-bin</span><br><span class=\"line\"><span class=\"comment\"># 二进制日志记录方式 混合模式</span></span><br><span class=\"line\"><span class=\"attr\">binlog_format</span>=mixed</span><br></pre></td></tr></table></figure>\n<p>配置完毕进入<code>bin</code>文件夹下打开控制台进行安装初始化<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 初始化</span><br><span class=\"line\">mysqld --initialize --console</span><br><span class=\"line\"># 注册服务</span><br><span class=\"line\">mysqld --install [服务名]</span><br><span class=\"line\"># 启动服务</span><br><span class=\"line\"><span class=\"built_in\">net</span> <span class=\"built_in\">start</span> [服务名]</span><br></pre></td></tr></table></figure></p>\n<p> <strong>特别注意 <code>mysqld --initialize --console</code> 执行会给你初始化密码，使用命令 <code>mysql -uroot -p</code> 登录MySQL</strong></p>\n<p>在<code>master</code>库中执行以下脚本<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建用于同步数据的用户</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'slave3307'</span>@<span class=\"string\">'127.0.0.1'</span> <span class=\"keyword\">IDENTIFIED</span>  <span class=\"keyword\">BY</span> <span class=\"string\">'123123'</span>;</span><br><span class=\"line\"># 赋予权限</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">SLAVE</span>,<span class=\"keyword\">FILE</span> <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'slave3307'</span>@<span class=\"string\">'127.0.0.1'</span>;</span><br><span class=\"line\"># 刷新权限</span><br><span class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"SLAVE-节点配置\"><a href=\"#SLAVE-节点配置\" class=\"headerlink\" title=\"SLAVE 节点配置\"></a>SLAVE 节点配置</h2><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[mysql]</span></span><br><span class=\"line\"><span class=\"comment\"># 设置mysql客户端默认字符集UTF8</span></span><br><span class=\"line\"><span class=\"attr\">default-character-set</span>=utf8 </span><br><span class=\"line\"><span class=\"section\">[mysqld]</span></span><br><span class=\"line\"><span class=\"comment\">#设置3307端口</span></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">3307</span> </span><br><span class=\"line\"><span class=\"comment\"># 设置mysql的安装目录</span></span><br><span class=\"line\"><span class=\"attr\">basedir</span>=D:\\\\Program Files (x86)\\\\mysql-<span class=\"number\">8.0</span>.<span class=\"number\">15</span>-winx64-slave</span><br><span class=\"line\"><span class=\"comment\"># 设置mysql数据库的数据的存放目录</span></span><br><span class=\"line\"><span class=\"attr\">datadir</span>=D:\\\\Program Files (x86)\\\\mysql-<span class=\"number\">8.0</span>.<span class=\"number\">15</span>-winx64-slave\\\\data</span><br><span class=\"line\"><span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\"><span class=\"attr\">max_connections</span>=<span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"comment\"># 服务端使用的字符集默认为UTF8</span></span><br><span class=\"line\"><span class=\"attr\">character-set-server</span>=utf8</span><br><span class=\"line\"><span class=\"comment\"># 创建新表时将使用的默认存储引擎</span></span><br><span class=\"line\"><span class=\"attr\">default-storage-engine</span>=INNODB</span><br><span class=\"line\"><span class=\"comment\"># 服务唯一ID</span></span><br><span class=\"line\"><span class=\"attr\">server-id</span>=<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># 只读设置</span></span><br><span class=\"line\"><span class=\"attr\">read_only</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># 需要同步的数据库名称，如有多个需配置多条</span></span><br><span class=\"line\"><span class=\"attr\">replicate-do-db</span>=mastersql</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>read_only</code> 这里设置为只读模式，不会影响到<code>slave</code>的同步复制功能，可以限制普通用户写入操作防止修改数据导致主从数据不一致，但是无法限制<code>super</code>用户的修改数据权限，所以同步复制需要新建一个普通用户用于链接同步。</p>\n</blockquote>\n<h4 id=\"同步配置\"><a href=\"#同步配置\" class=\"headerlink\" title=\"同步配置\"></a>同步配置</h4><p>在<code>5.7</code>版本之前需要在<code>my.ini</code>配置文件<code>[mysqld]</code>下添加<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主节点地址</span></span><br><span class=\"line\"><span class=\"attr\">master-host</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"comment\"># 主节点端口</span></span><br><span class=\"line\"><span class=\"attr\">master-port</span>=<span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"comment\"># 主节点复制账号</span></span><br><span class=\"line\"><span class=\"attr\">master-user</span>= slave3307</span><br><span class=\"line\"><span class=\"comment\"># 主节点复制密码</span></span><br><span class=\"line\"><span class=\"attr\">master-password</span>= <span class=\"number\">123123</span></span><br><span class=\"line\"><span class=\"comment\"># 重连时间</span></span><br><span class=\"line\"><span class=\"attr\">master-connect-retry</span>=<span class=\"number\">60</span></span><br></pre></td></tr></table></figure></p>\n<p><code>5.7</code>版本之后的主从配置直接通过动态配置无需修改<code>ini</code><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 改变同步配置</span><br><span class=\"line\"><span class=\"keyword\">change</span> <span class=\"keyword\">master</span> <span class=\"keyword\">to</span> master_host=<span class=\"string\">'127.0.0.1'</span>,master_port=<span class=\"number\">3306</span>, master_user=<span class=\"string\">'slave3307'</span>, master_password=<span class=\"string\">'123123'</span>,master_log_file=<span class=\"string\">'binlog.000003'</span>,master_log_pos=<span class=\"number\">7676</span>;</span><br><span class=\"line\"># 开启同步</span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">slave</span>;</span><br><span class=\"line\"># 查看同步状态</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">slave</span> <span class=\"keyword\">status</span>;</span><br></pre></td></tr></table></figure></p>\n<p>执行<code>show slave status</code>语句可以查看当前同步状态，<code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>是否为<code>Yes</code>，证明同步是否开启成功。<code>Seconds_Behind_Master</code>为从库与主库同步位置差异一般为0。执行<code>stop slave</code>可停止同步进行修改同步设置然后使用<code>start slave</code>重新开启。</p>\n<h5 id=\"语句解释\"><a href=\"#语句解释\" class=\"headerlink\" title=\"语句解释\"></a>语句解释</h5><ul>\n<li><code>master_host</code>和<code>master_port</code> 为主库地址信息</li>\n<li><code>master_port</code>和<code>master_password</code> 同步的账号密码，我们已配置用户为<code>slave3307</code>密码为<code>123</code>。</li>\n<li>在<code>master</code>库中执行<code>show master status;</code>获取<code>master_log_file</code> 主库日志和<code>master_log_pos</code>当前日志位置，这里可以根据实际情况来设置<code>master_log_pos</code>的起始位置。<br><img src=\"/images/masterStatus.png\" alt=\"主库日志\"></li>\n</ul>\n<p>同步开启后可以尝试在主库下创建一个新数据库<code>mastersql</code>,然后新建一张表<code>mytest</code>。切换到从库你会发现从库也会自动创建<code>mastersql</code>数据库并有一张同名的表<code>mytest</code>，说明同步成功。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjtqldtyw0000ysqurz71kitr","category_id":"cjtqldtzb0002ysqu0tk0g1gh","_id":"cjtqldtzo000dysquihbk6rri"},{"post_id":"cjtqldtzi0006ysqu34wkntyf","category_id":"cjtqldtzb0002ysqu0tk0g1gh","_id":"cjtqldtzs000iysqud6rq4isw"},{"post_id":"cjtqldtz80001ysquof3cys6h","category_id":"cjtqldtzj0007ysqurha3clxk","_id":"cjtqldu01000mysqu7p1qui0n"},{"post_id":"cjtqldtzn000cysqud968bvn8","category_id":"cjtqldtzb0002ysqu0tk0g1gh","_id":"cjtqldu03000qysqu56icz590"},{"post_id":"cjtqldtzr000hysqu6359nzp0","category_id":"cjtqldtzj0007ysqurha3clxk","_id":"cjtqldu05000tysqunsvpssbv"},{"post_id":"cjtqldu02000pysqu8chc3g39","category_id":"cjtqldtzb0002ysqu0tk0g1gh","_id":"cjtqldu100010ysqu2gumc0lt"},{"post_id":"cjtqldtzg0005ysqu5zqb27l6","category_id":"cjtqldtzj0007ysqurha3clxk","_id":"cjtqldu120015ysquklfcykco"},{"post_id":"cjtqldtzt000kysqu4up2u2kq","category_id":"cjtqldu05000sysqu5oub32c2","_id":"cjtqldu140018ysquyrdcd9ha"},{"post_id":"cjtqldu110014ysquhz17u1bk","category_id":"cjtqldu100011ysqu0abs9hal","_id":"cjtqldu19001fysquu4ymlzhg"},{"post_id":"cjtqldu04000rysqucre0c0bx","category_id":"cjtqldu100011ysqu0abs9hal","_id":"cjtqldu1b001iysquybr6y47a"},{"post_id":"cjtqldu16001cysqucpxn1gci","category_id":"cjtqldtzj0007ysqurha3clxk","_id":"cjtqldu1d001mysqusriyaumx"},{"post_id":"cjtqldu17001eysquob9j9sdy","category_id":"cjtqldtzj0007ysqurha3clxk","_id":"cjtqldu1e001nysqu63fueuoj"},{"post_id":"cjtqldu06000wysqu4yp2pfks","category_id":"cjtqldu15001aysqu3n40a8yf","_id":"cjtqldu1f001qysqu67e3blyz"},{"post_id":"cjtqldu0u000zysqudbpipyfi","category_id":"cjtqldu15001aysqu3n40a8yf","_id":"cjtqldu1f001sysqu4rtjq0np"},{"post_id":"cjtqldu130017ysqugqxmelps","category_id":"cjtqldu1e001oysqunn0lg3sw","_id":"cjtqldu1h001wysqujxfg8ksb"},{"post_id":"cjtqldu1a001hysqu6wh7hdhe","category_id":"cjtqldu1f001tysquc1qfx9px","_id":"cjtqldu1j0020ysqul6oshatn"},{"post_id":"cjtqldtzk000aysqub0hd2abo","category_id":"cjtqldu100011ysqu0abs9hal","_id":"cjtqlfh230001ikqu1rbld7vt"},{"post_id":"cjtqldtze0004ysqurzi5034j","category_id":"cjtqljpn30009ikquh7y228cm","_id":"cjtqljpn4000aikqud53yczbz"}],"PostTag":[{"post_id":"cjtqldtzg0005ysqu5zqb27l6","tag_id":"cjtqldtzd0003ysquu22p6cye","_id":"cjtqldtzk0009ysqu8wocfxag"},{"post_id":"cjtqldtyw0000ysqurz71kitr","tag_id":"cjtqldtzd0003ysquu22p6cye","_id":"cjtqldtzm000bysqu512rqcy8"},{"post_id":"cjtqldtzi0006ysqu34wkntyf","tag_id":"cjtqldtzd0003ysquu22p6cye","_id":"cjtqldtzq000gysquth0ct83l"},{"post_id":"cjtqldtz80001ysquof3cys6h","tag_id":"cjtqldtzj0008ysqucfrko4v8","_id":"cjtqldtzs000jysquvrpbbl6e"},{"post_id":"cjtqldtzn000cysqud968bvn8","tag_id":"cjtqldtzd0003ysquu22p6cye","_id":"cjtqldu02000oysque2qht8hn"},{"post_id":"cjtqldu02000pysqu8chc3g39","tag_id":"cjtqldtzd0003ysquu22p6cye","_id":"cjtqldu06000vysqusb67vik7"},{"post_id":"cjtqldtze0004ysqurzi5034j","tag_id":"cjtqldtzj0008ysqucfrko4v8","_id":"cjtqldu0l000yysqu2onak1eq"},{"post_id":"cjtqldtze0004ysqurzi5034j","tag_id":"cjtqldu01000nysqunmycktzz","_id":"cjtqldu100012ysquurpoxrfd"},{"post_id":"cjtqldu110014ysquhz17u1bk","tag_id":"cjtqldtzj0008ysqucfrko4v8","_id":"cjtqldu150019ysqu4q9hd9iy"},{"post_id":"cjtqldtzr000hysqu6359nzp0","tag_id":"cjtqldu01000nysqunmycktzz","_id":"cjtqldu17001dysquvkjk7wbh"},{"post_id":"cjtqldu16001cysqucpxn1gci","tag_id":"cjtqldtzj0008ysqucfrko4v8","_id":"cjtqldu19001gysquhd7wyffe"},{"post_id":"cjtqldtzt000kysqu4up2u2kq","tag_id":"cjtqldu15001bysquoz61ge9h","_id":"cjtqldu1d001lysqugpjclp24"},{"post_id":"cjtqldu04000rysqucre0c0bx","tag_id":"cjtqldu1c001kysquegnoupbq","_id":"cjtqldu1f001rysquil86wjwi"},{"post_id":"cjtqldu06000wysqu4yp2pfks","tag_id":"cjtqldu1e001pysquwygifvyf","_id":"cjtqldu1g001vysqudf7cg8a4"},{"post_id":"cjtqldu0u000zysqudbpipyfi","tag_id":"cjtqldu1e001pysquwygifvyf","_id":"cjtqldu1i001yysquj7v098qh"},{"post_id":"cjtqldu0u000zysqudbpipyfi","tag_id":"cjtqldtzj0008ysqucfrko4v8","_id":"cjtqldu1j001zysqu9rzhzuzi"},{"post_id":"cjtqldu130017ysqugqxmelps","tag_id":"cjtqldu1h001xysquzm5eibkl","_id":"cjtqldu1j0022ysqu0lgpxt1t"},{"post_id":"cjtqldu130017ysqugqxmelps","tag_id":"cjtqldtzj0008ysqucfrko4v8","_id":"cjtqldu1k0023ysqufk5763qo"},{"post_id":"cjtqldu17001eysquob9j9sdy","tag_id":"cjtqldu1j0021ysqul6gpiil9","_id":"cjtqldu1l0025ysqu3rx9bebt"},{"post_id":"cjtqldu1a001hysqu6wh7hdhe","tag_id":"cjtqldu1k0024ysqu1ulz3izt","_id":"cjtqldu1l0026ysqu7vcij4b7"},{"post_id":"cjtqldtzk000aysqub0hd2abo","tag_id":"cjtqldtzj0008ysqucfrko4v8","_id":"cjtqlgb070006ikqu0lbetlkh"}],"Tag":[{"name":"Linux","_id":"cjtqldtzd0003ysquu22p6cye"},{"name":"Java","_id":"cjtqldtzj0008ysqucfrko4v8"},{"name":"技术","_id":"cjtqldu01000nysqunmycktzz"},{"name":"-- Java基础 -- 源码","_id":"cjtqldu06000uysqu7qrez6wh"},{"name":"Python","_id":"cjtqldu15001bysquoz61ge9h"},{"name":"中间件","_id":"cjtqldu1c001kysquegnoupbq"},{"name":"Redis","_id":"cjtqldu1e001pysquwygifvyf"},{"name":"Spring","_id":"cjtqldu1h001xysquzm5eibkl"},{"name":"心得","_id":"cjtqldu1j0021ysqul6gpiil9"},{"name":"数据库","_id":"cjtqldu1k0024ysqu1ulz3izt"},{"name":"-- Java","_id":"cjtqlfh220000ikquj59figv3"},{"name":"-Java","_id":"cjtqlg7d00004ikquiupo5kpn"}]}}