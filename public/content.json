{"meta":{"title":"老陈皮加工厂","subtitle":null,"description":null,"author":"老陈皮","url":"http://laochenpi.top"},"pages":[],"posts":[{"title":"Docker环境搭建","slug":"Docker环境搭建","date":"2018-08-20T06:11:30.000Z","updated":"2018-08-20T09:32:45.029Z","comments":true,"path":"2018/08/20/Docker环境搭建/","link":"","permalink":"http://laochenpi.top/2018/08/20/Docker环境搭建/","excerpt":"","text":"开发-&gt;部署测试-&gt;发布正式 在整体流程中每个人的开发环境可能各不相同、编译环境、运行环境。单机服务调整控制环境版本等可以保证发布一致性，但是如果当业务越来越庞大集群处理时需要部署多台机器时，可能每台机器的大大小小差异都会导致发布失败，处理起来非常麻烦。docker虚拟化来处理能保证发布环境一致性，可移植。通过docker 镜像你可以在任何版本linux服务器上进行发布。每个镜像就相当于个一个系统相互不影响独立环境。 1.Docker 介绍Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。 Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。 总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。 2.Docker安装我的VPS用的Centos 7 那就用本版本记录搭建过程，docker的版本用CE社区版123456#下载yum-utils工具用于管理yum-config-manager可以配置源yum install yum-utils#添加docker-ce源yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo#查询docker-ce版本yum list docker-ce --showduplicates | sort -r 安装docker,默认是安装最高版本测试可以用，但是生产环境为了稳定尽量指定版本。stable稳定版 12#指定安装18.06.0 版本yum install dock-ce-18.06.0.ce 启动docker服务，测试运行1234#启动dockersystemctl start docker#运行一个容器docker run hello-world","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://laochenpi.top/tags/笔记/"},{"name":"docker","slug":"docker","permalink":"http://laochenpi.top/tags/docker/"}]},{"title":"Winsw把java项目做成服务","slug":"Winsw把java项目做成服务","date":"2018-08-16T12:04:17.000Z","updated":"2018-08-17T01:07:24.635Z","comments":true,"path":"2018/08/16/Winsw把java项目做成服务/","link":"","permalink":"http://laochenpi.top/2018/08/16/Winsw把java项目做成服务/","excerpt":"","text":"jar项目需要通过命令行jar -jar 执行脚本启动显示控制台,由于强迫症可以使用javaw -jar来执行可以在后台执行，但通过java编译启动在window环境下进程名都为java.exe一旦项目多了当你要更新部署更新关闭项目时候就懵逼了有可能就会误操作，通过Google发现有个开源的软件winsw 可以把任何软件做为window 的服务来管理，这样在services.msc 服务管理里可以很方便的进行管理更新部署。 1.Winsw 环境Winsw是个开源项目,Github地址为:https://github.com/kohsuke/winsw 依赖环境为NET2 或 NET4, 可通过配置文件进行修改。 2.JAVA项目注册服务根据作者的介绍注册的服务依赖于配置文件 *.xml，这里需要注意的是xml的文件名称必须和winsw.exe同名。默认是按软件的名称来匹配配置文件。例如你把winsw.exe重复名为test.exe那配置文件必须为test.xml不然不无法使用。123456789&lt;service&gt; &lt;id&gt;MyTest&lt;/id&gt; &lt;name&gt;MyTest&lt;/name&gt; &lt;description&gt;测试jar项目服务&lt;/description&gt; &lt;env name=\"JENKINS_HOME\" value=\"%BASE%\"/&gt; &lt;executable&gt;java&lt;/executable&gt; &lt;arguments&gt;-Xrs -Xmx256m -jar \"%BASE%\\test.jar\" --httpPort=8080&lt;/arguments&gt; &lt;logmode&gt;rotate&lt;/logmode&gt;&lt;/service&gt; 配置文件解释: id：服务名称 (唯一) name：显示服务名称 description：服务描述 env：环境变量 JENKINS_HOME 赋值给 %BASE% executable：执行命令 这里我们是用java启动 arguments：执行的一些参数 logmode：日志模式这里 executable arguments 就相当于你在控制台执行的脚本，根据你的需求进行改变命令和参数。通过控制台进入winsw软件目录执行winsw.exe install 注册服务, winsw为软件名称可以自行修改。执行成功可以在控制看到 如果发现错误请查看 [软件名称].wrapper.log 日志排查，是否配置文件名和软件名不一致或者配置的地址不存在等。然后你可以通过 services.msc 对你的服务进行操作了启动，停止。注册的服务默认是AutoStart每次重启电脑都会自动启动。 配置文件的相关其他设置可以参考: https://github.com/kohsuke/winsw/blob/master/doc/xmlConfigFile.md","categories":[],"tags":[{"name":"心得","slug":"心得","permalink":"http://laochenpi.top/tags/心得/"},{"name":"Java","slug":"Java","permalink":"http://laochenpi.top/tags/Java/"}]},{"title":"SpringCloud服务中心之Eureka","slug":"SprintCloud微服务-Eureka","date":"2018-08-01T08:43:15.000Z","updated":"2018-08-20T09:46:08.991Z","comments":true,"path":"2018/08/01/SprintCloud微服务-Eureka/","link":"","permalink":"http://laochenpi.top/2018/08/01/SprintCloud微服务-Eureka/","excerpt":"","text":"SpringCloud微服务架构基于SpringBoot进行开发组件，即插即用非常方便，用了Spring Boot根本停不下来。SpringCloud包含了服务和注册中心(Zookeeper Eureka Consul)、熔断器(Hystrix)、动态路由(Zuul)、配置中心(Spring cloud config)、负责均衡(Ribbon)、REST服务调用(Fegin)等集成组件。让我们一步步通过项目来学习SpringCloud！ 1. Eureka 服务发现和注册Eureka 是 Netflix 旗下微服务开发组件，用于服务发现和注册中心，分为服务端和客户端，服务端作为注册中心作为其他客户端的提供注册服务，客户端将需要暴露的接口服务注册到服务端中，通过周期性向服务端发送心跳保证自身健康可用性。 2. EurekaServer 注册中心搭建首先建立项目使用maven来构建项目，pom.xml依赖关系如下本项目用最新的版本进行教程，相关的官方教程可查看Spring Cloud Eureka pom.xml maven依赖配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;artifactId&gt;EurekaServer&lt;/artifactId&gt;&lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt;&lt;/properties&gt;&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;&lt;/parent&gt;&lt;dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Finchley.SR1&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt;&lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;&lt;!--项目构建maven插件--&gt;&lt;build&gt;&lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt;&lt;/plugins&gt;&lt;/build&gt;&lt;/project&gt; SpringBoot 启动配置项1234567891011121314package com;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;@SpringBootApplication@EnableEurekaServer@EnableWebSecuritypublic class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class,args); &#125;&#125; WebSecurityConfig 安全认证配置123456789101112131415package com.config;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;@Configurationpublic class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123; @Override protected void configure(HttpSecurity http) throws Exception &#123; http.csrf().disable(); //关闭csrf http.authorizeRequests().anyRequest().authenticated().and().httpBasic(); //开启认证 &#125;&#125; application.yml 基本配置项12345678910111213141516#Eureka 服务中心设置 eureka: client: #自身不注册 register-with-eureka: false #是否开启检索服务 fetch-registry: false#security安全校验 spring: security: user: name: root password: 123123#服务器端口设置server: port: 8888 启动项目通过 http://localhost:8888 查看Eureka注册中心管理页面，为了安全性加入了security安全校验，输入账号密码进入管理页面。 3. EurekaClient 服务搭建pom.xml maven依赖配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;EurekaClient&lt;/artifactId&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.1.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Finchley.SR1&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; SpringBoot 启动配置项1234567891011121314151617181920212223242526package com;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@SpringBootApplication@EnableEurekaClient@RestControllerpublic class Application &#123; @RequestMapping(\"/test1\") public String myTestService()&#123; return \"测试1\"; &#125; @RequestMapping(\"/test2\") public String myTestService2()&#123; return \"测试2\"; &#125; public static void main(String[] args) &#123; SpringApplication.run(Application.class,args); &#125;&#125; application.yml配置123456789# 设置服务名spring: application: name: EurekaClient1# 设置注册中心地址 root:123123为注册中心设置的账号密码eureka: client: service-url: defaultZone: http://root:123123@localhost:8888/eureka","categories":[],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://laochenpi.top/tags/Spring/"}]},{"title":"Hexo部署到VPS自动发布","slug":"Hexo部署到VPS自动发布","date":"2018-07-26T07:02:30.000Z","updated":"2018-08-20T09:26:52.664Z","comments":true,"path":"2018/07/26/Hexo部署到VPS自动发布/","link":"","permalink":"http://laochenpi.top/2018/07/26/Hexo部署到VPS自动发布/","excerpt":"","text":"Hexo部署到github访问的速度较慢，所以想着把Hexo直接丢在自己VPS上去，部署一套git环境以后方便自动发布更新 1.Git 安装1234#通常使用的方法下载gityum -y install git#查看版本 这种下载一般不是最新的版本yum --version 发现并不是最新版本逼死强迫症啊，只能通过下载最新git源码自行编译安装。Git 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。在有 yum 的系统上（比如 Fedora）或者有 apt-get 的系统上（比如 Debian 体系），可以用 下面的命令安装： 12345678910111213141516171819202122#卸载旧版本gityum remove git#安装依赖环境yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel#安装编译工具yum install gcc perl-ExtUtils-MakeMaker#下载最新版gitwget https://github.com/git/git/archive/v2.18.0.tar.gz#解压tar -zxvf v2.18.0.tar.gz#进入解压文件夹cd git-2.18.0#编译代码 perfix这里为赋值变量make prefix=/usr/local/git all#安装软件 make prefix=/usr/local/git install#清除编译数据make clean all#环境变量配置echo export PATH=$PATH:/usr/local/git/bin &gt;&gt;/etc/bashrc#生效环境变量source /etc/bashrc /etc/profile，/etc/bashrc 是系统全局环境变量设定 ~/.profile，~/.bashrc用户家目录下的私有环境变量设定 2.创建git仓库创建一个git库用来存放Hexo生成的html静态文件和相关资源，然后通过post-receive 钩子函数进行自动执行脚本讲生成的资源checkout发布到nginx达到自动发布更新的功能。1234567891011121314#创建git用户adduser git#设置密码passwd git#创建Hexo博客库 目录自行选择mkdir laochenpiBlog &amp;&amp; chown git:git laochenpiBlog#laochenpiBlog目录下创建blog.git --bare裸仓库 没有工作空间git init --bare blog.git &amp;&amp; chown git:git -R blog.git #laochenpiBlog 目录下创建静态网页库 mkdir blog.site &amp;&amp; chown git:git blog.site#进入钩子函数目录cd hooks/#创建钩子函数文件touch post-service &amp;&amp; chown git:git post-receive &amp;&amp; chmod 755 post-service 为Hexo编写自动化脚本在仓库hooks创建脚本 vi post-receive ,脚本会在git有收发的时候就会调用执行1git --work-tree=/var/laochenpiBlog/blog.site --git-dir=/var/laochenpiBlog/blog.git checkout -f 3.Hexo配置发布测试终于把Git环境弄好了，现在就需要修改配置文件_config.yml 中的发布项1234567#Deployment## repo 为你的vps创建的库地址## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo : git@45.77.87.214:/var/laochenpiBlog/blog.git branch: master 修改完毕，见证奇迹的时候到了，找到自己博客目录下用 git bash 发布 12#清除缓存 重编译 发布hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 输入密码发布完毕，然后远程上你的VPS查看下你的 blog.site 是否自动 check out了最新发布的内容了。 4.Git 免密发布每次发布都需要输入密码实在是太麻烦了而且在有可能泄露密码引起安全问题，有什么比较方面安全的方式呢，通过google一波发现可以通过秘钥的形式实现无密码发布登录。 秘钥方式通过RSA加密生成公有秘钥，然后把公有秘钥提交到VPS 上的秘钥认证文件中 authroized_keys，修改 OpenSSH 客户端的配置 sshd_config 实现RSA秘钥认证方式。 那么我们开始吧！ 服务器端修改 OpenSSH 认证 vi /etc/ssh/sshd_config开启公钥认证 PubkeyAuthentication yes认证Keys文件目录 用户/.ssh/文件名 AuthorizedKeysFile .ssh/authorized_keysRSA加密认证 RSAAuthentication yes 这里要提示一点 Centos 7 和 Centos 6 遇到的问题，Centos 7 由于OpenSSH版本原因 RSAAuthentication 已经弃用，无需添加修改.123456#用户提交的git用户的秘钥文件夹创建和权限分配#——————————————————————————————————————#创建认证文件authorized_keystouch /home/git/.ssh/authorized_keys#.ssh权限 700 authorize_keys 权限600chmod 700 /home/git/.ssh &amp;&amp; chmod 600 /home/git/.ssh/authorize_keys 这里要注意 .ssh 和 authorize_keys 的权限问题，可能在加密认证的时候由于权限导致失败,SSH登录日志可以用 tail /var/log/secure 查看，sshd -t进行查看配置是否正常 需要在~目录下执行，执行systemctl restart sshd 重启 SSH服务 客户端ssh-keygen -t rsa -C userName 生成秘钥文件，地址一般在 ~/.ssh 中。id_rsa 加密公钥 id_rsa.pub 加密公钥 多用户用cat 追加秘钥到认证文件中 12#上传认证秘钥到服务器上 对应用户的authorized_keys中cat ~/.ssh/id_rsa.pub | ssh git@45.77.87.214 \"cat - &gt;&gt; /home/git/.ssh/authorized_keys\" 配置完毕后使用 ssh -vvT git@45.77.87.214 看看是不是不用密码就可以登录VPS了，然后发布就再也不用密码了，一条命令就OK。 5. Nginx配置映射终于到最后一步了，就差最后一步配置 Nginx 服务映射静态文件了。123456#Centos yum源安装yum install nginx#启动nginx服务systemctl start nginx#查看服务状态systemctl status nginx -l 这里有可能出现的问题：1.无法从外网访问 检查下80端口是否开启,添加80端口firewall-cmd --permanent --zone=public --add-port=80/tcp --permanent 和 firewall-cmd --reload 重载配置2.服务可能没有启动成功，排查下配置问题 修改80端口默认映射库地址，nginx -t查看nginx配置文件地址 12345678#停止Nginx服务systemctl stop nginx#修改Nginx的配置文件rootvi /etc/nginx/nginx_conf#修改 root 配置hexo静态文件地址，即之前创建的静态文件地址root [hexo静态文件地址]#修改完毕退出 重启Nginx服务systemctl start nginx 修改完毕启动好服务然后通过外网访问你 VPS IP地址即可访问，大功告成以后可以在任意地方通过git提交的方式进行自动发布。请记得随时备份自己的重要文件以免丢失！ 遇到的问题已配置秘钥但是SSH还是需要密码，相信很多小伙伴都遇到过，下面是可能原因 查看sshd_config 配置文件是否正确开启了3个认证配置，更改后重启OpenSSH服务 查看下ssh登录日志 排查下原因，可能是认证文件目录权限问题，.shh 700 authorized_key 600 过大或者过小的权限都有可能导致认证是失败。 authorized_key 中秘钥千万千万不要直接从客户端直接复制过来，可能会有空格和其他转义一些特殊情况导致秘钥不正确。可通过 cat或scp 命令远程进行上传秘钥保证正确性。 Centos 7 版本的 OpenSSH RSAAuthentication已经弃用无需设置、添加该设置可能导致启动异常。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://laochenpi.top/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://laochenpi.top/tags/Linux/"}]},{"title":"Linux-文件权限管理","slug":"Linux-文件权限管理","date":"2018-07-25T07:07:09.000Z","updated":"2018-07-26T09:32:07.118Z","comments":true,"path":"2018/07/25/Linux-文件权限管理/","link":"","permalink":"http://laochenpi.top/2018/07/25/Linux-文件权限管理/","excerpt":"","text":"为了保证文件系统的安全隐私，对文件进行权限控制，防止非法用户查看、修改、删除等操作。只有在指定用户或用户组才能进行操作，例如一些隐私文件或者文件夹不想被其他人进行访问查看可对文件进行权限控制。 1. ls 命令查询文件属性12345678910111213[root@vultr ~]# ls -altotal 44dr-xr-x--- 4 root root 4096 Jul 19 05:05 .dr-xr-xr-x 18 root root 4096 Jun 5 21:42 ..-rw------- 1 root root 4369 Jul 25 07:02 .bash_history-rw-r--r-- 1 root root 18 Dec 29 2013 .bash_logout-rw-r--r-- 1 root root 176 Dec 29 2013 .bash_profile-rw-r--r-- 1 root root 176 Dec 29 2013 .bashrcdrwx------ 3 root root 4096 Jul 18 07:35 .cache-rw-r--r-- 1 root root 100 Dec 29 2013 .cshrcdrwxr----- 3 root root 4096 Jun 5 21:45 .pki-rw-r--r-- 1 root root 129 Dec 29 2013 .tcshrc[权限] [连接数][所有者][用户组][文件容量][修改时间] [文件名] [权限]第一个字符代表文件是 “目录、文件或链接文件等” [d] 代表是目录，例如 .pki [-] 代表是文件，例如 .tcshrc [l] 代表为链接文件(linkfile) [b] 代表设备文件里的可以供存储的接口设备 [c] 代表设备文件里的串行端口，例如键盘、鼠标接下来的3个为位一组，均为 “rwx” 3个参数组合 [r] 代表read 可读 [w] 代表write 可写 [x] 代表execute 可执行 [-] 代表没有权限 第一组代表 “文件所有者的权限”，第二组代表 “同用户组的权限”，第三组代表 “其他非本用户组的权限” [连接数] 文件的硬链接个数 [所有者] 文件的所有者账号 [用户组] 文件的所有用户组 [文件容量] 文件的容量 单位/B [修改时间] 文件的创建时间或最近的一次修改时间 [文件名] 文件的名称 带 “.” 则表示当前文件为隐藏文件 3.改变文件属性和权限命令 chgrp 改变文件所属用户组改变的用户组必须存在于/etc/group，对于不存在的用户组改变会执行失败 1234#示例 [-R] 递归 文件或者目录下所有的的文件chgrp [-R] [文件或目录]#更新install.log用户组为userchgrp user install.log chown 改变文件所有者改变的用户必须存在于/etc/passwd，对于不存在的用户改变会执行失败 123456#示例 [-R] 递归 文件或者目录下所有的的文件chown [-R] [文件或目录]#更新install.log用户所属为testchown test install.log#可用.[用户组] 改变用户组 将install.log所属用户组改为groupTestchown .groupTest install.log chmod 改变文件的权限改变rwx 读写执 3个权限，3个身份owner，group，others，组合9个权限。 数字类型改变权限:权限rwx按分数 r : 4 w : 2 x : 1，改变权限的组合方式按分数来决定权限rwxrwxrwx 对应777，rw–wx— 对应610 1234#示例 [-R] 递归 文件或者目录下所有的的文件chmod [-R] [分数组合] [文件或目录]#改变install.log的权限 763代表了 rwxrw---xchown 763 install.log 符号类型改变权限:权限rwx按符号 u(user)，g(group)，o(others)，a(all)，+(加入)，-(除去)，=(设置)组合。 123456#用户拥有读写，用户组读，其他执行 u=rw-,g=r--,o=--xchmod u=rw-,g=r--,o=--x install.log#所有身份都去除写权限 chmod a-r install.log#所有身份都添加执行权限chmod a+x install.log 2.RWX 对于文件和目录的差别对于文件来说： r (read) 可以读取文件的实际内容 w (write) 可以编辑、新增、或修改文件的内容，但是不能删除文件 x (execute) 可以执行，可执行并非由文件的后缀来决定例如常见的.exe .bat .com 等，而是由x 属性来决定 对于文件目录来说： r (read contents in directory) 可以查询该目录下的文件名数据既可使用ls查询 w (modify contents of directory) 可以新建新的文件和目录、删除已存在的文件和目录（无视改文件的权限控制）、转义目录内的文件和文件夹 x (access directory) 可以进入该目录文件 既可使用cd进入该目录","categories":[{"name":"Linux","slug":"Linux","permalink":"http://laochenpi.top/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://laochenpi.top/tags/Linux/"},{"name":"技术","slug":"技术","permalink":"http://laochenpi.top/tags/技术/"}]},{"title":"Linux 关机重启命令","slug":"Linux-关机重启命令","date":"2018-07-25T05:50:04.000Z","updated":"2018-07-26T03:07:29.185Z","comments":true,"path":"2018/07/25/Linux-关机重启命令/","link":"","permalink":"http://laochenpi.top/2018/07/25/Linux-关机重启命令/","excerpt":"","text":"记录学习鸟哥的私房菜之开启重启shell笔记,主要有命令shutdown,reboot,halt,poweroff 1.Shutdown 命令介绍 可以自由的选择关机模式：关机、重启或者进入单用户操作模式即可 可以设置关机时间：设置在特定时间或经过多少时长后关闭，也可以立刻关闭 可以自定义关机消息：在关闭服务可以通知其他登录的用户 可以发送警告命令：在执行一些测试脚本或者可以影响到其他的登录用户的操作时，可以发送警告信息进行提示，但不是真的关机 12345678910#脚本参数 shutdown [-t秒] [-arkhncfF] 时间 [警告消息]-t sec： -t 后单位/秒 经过多少秒后执行-k ：不是真关机仅发出警告信息-r ：服务关闭后，关闭并重启-h : 服务关闭后，立刻关机-c ：取消已经在进行中的关闭操作-f ：关机启动后，启动略过fsck磁盘检查-F ：关机启动后 ，强制进行fsck磁盘检查# 3600秒后进行关闭并提示警告语shutdown -t 3600 'Computer will shutdown after 30 min'","categories":[{"name":"Linux","slug":"Linux","permalink":"http://laochenpi.top/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://laochenpi.top/tags/Linux/"},{"name":"技术","slug":"技术","permalink":"http://laochenpi.top/tags/技术/"}]},{"title":"Log4j 自定义多文件分离","slug":"Log4j-学习笔记","date":"2018-07-20T09:32:59.000Z","updated":"2018-08-06T04:11:38.154Z","comments":true,"path":"2018/07/20/Log4j-学习笔记/","link":"","permalink":"http://laochenpi.top/2018/07/20/Log4j-学习笔记/","excerpt":"","text":"在工作开发中遇到一个需求需要通过某一些条件逻辑进行分组细化日志，用配置的一些条件进行不同的日志管理和处理，由于之前的日志没有细化会导致在很多日志中无法更快和更精准的定位某一个模块的错误，如大海捞针效率极低，细分后方便开发和维护人员对日志更快更精准的排查修改BUG。 1.Log4j 介绍 Log4j有三个主要的组件：Loggers(记录器)，Appenders (输出源)和Layouts(布局)。这里可简单理解为日志类别，日志要输出的地方和日志以何种形式输出。综合使用这三个组件可以轻松地记录信息的类型和级别，并可以在运行时控制日志输出的样式和位置。 2.Log4j 组件Appender 配置 ConsoleAppender (控制台) Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。 ImmediateFlush=true：消息都会被立即输出，设为false则不输出，默认值是true。 Target=System.err：默认值是System.out。 FileAppender (文件) Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。 File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。 DailyRollingFileAppender (按照日期格式生成) DatePattern=’.’yyyy-MM：根据时间格式按照年月日为单位生成log文件‘.’yyyy-MM：每月‘.’yyyy-ww：每周‘.’yyyy-MM-dd：每天‘.’yyyy-MM-dd-a：每天两次‘.’yyyy-MM-dd-HH：每小时‘.’yyyy-MM-dd-HH-mm：每分钟 RollingFileAppender (文件大小到达指定尺寸的时候产生一个新的文件) MaxFileSize=100KB：后缀可以是KB, MB 或者GB。在日志文件到达该大小时，将会自动滚动，即将原来的内容移到logging.log4j.1文件中。 MaxBackupIndex=2：指定可以产生的滚动文件的最大数，例如，设为2则可以产生logging.log4j.1，logging.log4j.2两个滚动文件和一个logging.log4j文 SocketAppender (发送远程服务 Tip:可配合logstash使用) host，String，指定服务器的主机名。（必需） immediateFlush，boolean，是否立即flush，还是等待缓存到一定大小后在flush。 layout，Layout，log event输出的格式。 port，integer，远程服务器坚挺log event的应用的端口号。 protocol，String，发送log event所使用的协议，”TCP” 或”UDP”。 reconnectionDelay，integer，当连接断开时，延迟等待的ms数。 name，String ，Appender的名称。 protocol，String，通讯协议 默认TCP。可选值 “TCP” (default), “SSL” or “UDP”. SSL，SslConfiguration，包含密钥存储库和信任存储库的配置. filter，Filter，一个过滤器来确定事件应该由这个Appender。 不止一个过滤器 可以通过使用一个CompositeFilter。 immediateFail，boolean，设置为true时,日志事件不会等待尝试重新连接,将立即如果失败 套接字是不可用的。 immediateFlush，boolean， 当该值设置成真时,默认情况下,每个写将冲洗。 这将保证写的数据 到磁盘,但可能会影响性能。 layout，Layout，LogEvent ，布局使用格式。 缺省值是SerializedLayout。 reconnectionDelay，integer ，如果设置为值大于0,一个错误后SocketManager将尝试重新连接 在指定的毫秒数后的服务器。 如果连接失败 将抛出一个异常(可以被应用程序如果ignoreExceptions是 设置为假)。 ignoreExceptions，boolean，默认值是真正的添加事件时,遇到了引起异常 内部记录,然后忽略。 当设置为假将传播到异常 调用者。 你必须设置这个假当包装这个AppenderFailoverAppender。 SMTPAppender (发送邮件) smtpHost= mtp.163.com：邮件服务器地址 smtpPort=30 ：端口号 from= *@.com：发送方邮箱 replyTo = *@.com： 接收方方邮箱 smtpUsername = 285635652@qq.com：发送方邮箱账号 smtpPassword = **：发送方邮箱密码 log4j.additivity.[appenderName]=false (用于独立输出日志，Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。)默认为true Layouts HTMLLayout（以HTML表格形式布局） PatternLayout（可以灵活地指定布局模式） SimpleLayout（包含日志信息的级别和信息字符串） TTCCLayout（包含日志产生的时间、线程、类别等信息） 3.Spring 运用 Log4j123456789101112131415161718192021222324252627282930313233343536373839# LOG4J配置log4j.rootCategory=INFO, stdout, filelog4j.logger.errorfile=error,errorfile# 控制台输出log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; %5p %c&#123;1&#125;:%L - %m%n# root日志输出log4j.appender.file=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.file.file=logs/all.loglog4j.appender.file.DatePattern=&apos;.&apos;yyyy-MM-ddlog4j.appender.file.layout=org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; %5p %c&#123;1&#125;:%L - %m%n# error日志输出log4j.appender.errorfile=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.errorfile.file=logs/error.loglog4j.appender.errorfile.DatePattern=&apos;.&apos;yyyy-MM-ddlog4j.appender.errorfile.Threshold = ERRORlog4j.appender.errorfile.layout=org.apache.log4j.PatternLayoutlog4j.appender.errorfile.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; %5p %c&#123;1&#125;:%L - %m%n#自定义业务分组 team mytest输出目标log4j.logger.team=INFO,mytest#自定义日志输出#输出的各种Appenderlog4j.appender.mytest=org.apache.log4j.DailyRollingFileAppender#父类节点不输出 分级log4j.additivity.team=false#输出的日志地址log4j.appender.mytest.file=logs/mytest.log#记录的时间单位 天 log4j.appender.mytest.DatePattern=&apos;.&apos;yyyy-MM-dd#布局log4j.appender.mytest.layout=org.apache.log4j.PatternLayout#输出内容log4j.appender.mytest.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; %5p %c&#123;1&#125;:%L ---- %m%n 讲解 rootCategory 主节点 [日志级别],[输出目标],[输出目标],[…] category 子节点 特别会集成主节点的设置 日志级别 log4j.appender.[输出目标] 日志的输出设置 包含输出格式、布局、方式等 优先级：DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL PatternLayout 布局 ConversionPattern相关设置%m 输出代码中指定的消息%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL%r 输出自应用启动到输出该log信息耗费的毫秒数%c 输出所属的类目，通常就是所在类的全名%t 输出产生该日志事件的线程名%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM ddHH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。[QC]是log信息的开头，可以为任意字符，一般为项目简称。","categories":[],"tags":[{"name":"Log4j","slug":"Log4j","permalink":"http://laochenpi.top/tags/Log4j/"},{"name":"心得","slug":"心得","permalink":"http://laochenpi.top/tags/心得/"}]},{"title":"CentOs FireWall 脚本","slug":"CentOs-Firewalld-脚本","date":"2018-07-19T06:20:43.000Z","updated":"2018-07-31T05:58:42.409Z","comments":true,"path":"2018/07/19/CentOs-Firewalld-脚本/","link":"","permalink":"http://laochenpi.top/2018/07/19/CentOs-Firewalld-脚本/","excerpt":"","text":"经过之前自己搭建了Shadowsocks接触Linux慢慢想深入学习下一些常用Shell,之前在配置Shadowsocks遇到启动服务但是PC客户端连接没有网络,通过查阅一些教程发现Centos7默认开启了防火墙Firewall导致如果没有开放Shadowsocks的相关端口是无法访问的，现在记录下Firewall的一些相关命令 1.Firewalld 简介CentOs7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念,有图形界面和工具界面，由于我在服务器上使用，图形界面请参照官方文档，本文以字符界面做介绍,firewalld的字符界面管理工具是 firewall-cmd 默认配置文件有两个：/usr/lib/firewalld/ （用户配置地址） 和 /etc/firewalld/ （系统配置，尽量不要修改） 2.Zone 概念Firewall 能将不同的网络连接归类到不同的信任级别，Zone 提供了以下几个级别 drop: 丢弃所有进入的包，而不给出任何响应 block: 拒绝所有外部发起的连接，允许内部发起的连接 public: 允许指定的进入连接 external: 同上，对伪装的进入连接，一般用于路由转发 dmz: 允许受限制的进入连接 work: 允许受信任的计算机被限制的进入连接，类似 workgroup home: 同上，类似 homegroup internal: 同上，范围针对所有互联网用户 trusted: 信任所有连接 3.过滤规则过滤规则的优先级遵循如下顺序source&gt;interface&gt;firewalld.conf source: 根据源地址过滤 interface: 根据网卡过滤 service: 根据服务名过滤 port: 根据端口过滤 icmp-block: icmp 报文过滤，按照 icmp 类型配置 masquerade: ip 地址伪装 forward-port: 端口转发 rule: 自定义规则 4.使用方法firewall-cmd [指令]–zone 作用域–permanent 永久修改–reload 重载生效–timeout=seconds 持续时间,一般用于调试 使用实例:1234567891011121314151617181920212223242526#查看开放的Zonefirewall-cmd --get-active-zones#查看firewalld状态firewall-cmd --state#查看firewalld开放的端口firewall-cmd --zone=dmz --list-ports#重新加载配置 (无需重启)firewall-cmd --reload#重新加载配置 (重启服务器加载)firewall-cmd --complete-reload #添加一个端口允许访问 (临时添加)firewall-cmd --zone=dwz --add-port=8080/tcp#添加一个端口允许访问 (永久添加)firewall-cmd --zone=dwz --add-port=8080/tcp --permanent#添加一个端口允许访问 (持续300秒)firewall-cmd --zone=dwz --add-port=8080/tcp --timeout=300#添加一个服务允许访问firewall-cmd --zone=dwz --add-service=smtp#启用firewalldsystemctl start firewalld#停止firewalldsystemctl stop firewalld#重启firewalldsystemctrl restart firewalld#禁用firewalldsystemctrl disable firewalld","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://laochenpi.top/tags/Linux/"}]},{"title":"Linux搭建Shadowsocks","slug":"Linxu搭建SS","date":"2018-07-13T08:25:43.000Z","updated":"2018-07-25T07:30:38.891Z","comments":true,"path":"2018/07/13/Linxu搭建SS/","link":"","permalink":"http://laochenpi.top/2018/07/13/Linxu搭建SS/","excerpt":"","text":"作为一个码农没有科学上网怎么能行,刚好Vultr新注册送钱买一个云主机玩玩,以CentOs7做一个教程,之前在网上找的搭建方法很多错误导致一直不成功现在自己整理并通过测试，踩了很多坑 1.Shadowsocks 环境准备12345678910#安装epel扩展源yum install epel-release#安装Pipyum -y install python-pip#升级Pippip install --upgrade pip #清除yum缓存yum clean all#安装shadowsocks客户端pip install shadowsocks 2.Shadowsocks 配置123456789101112131415161718192021222324252627#创建shadowsocks配置vi /etc/shadowsocks.json#单用户 &#123; \"server\":\"server_ip\", \"server_port\":25, \"local_address\": \"127.0.0.1\", \"local_port\":1080, \"password\":\"password\", \"timeout\":300, \"method\":\"aes-256-cfb\", \"fast_open\": false &#125;#多用户&#123; \"server\":\"server_ip\", \"port_password\":&#123; \"port_1\":\"pwd1\", \"port_2\":\"pwd2\", \"port_3\":\"pwd3\" &#125;, \"local_address\":\"127.0.0.1\", \"local_port\":1080, \"timeout\":300, \"method\":\"aes-256-cfb\"&#125; 参数详解: server 服务器地址 127.0.0.1 或者0.0.0.0 server_port 服务端口号 外部连接需要填写的服务端口号 local_port 本地端口号 password 连接密码 timeout 超时时间 method 加密方式 3.Shadowsocks 启动1234#启动ssserver -c /etc/shadowsocks.json -d start#停止ssserver -c /etc/shadowsocks.json -d stop 由于每次都需要服务器重启都需要手动去启动不便，可以注册成服务自动启动123456789101112131415#创建服务脚本 servicename 填写shadowsocksvi /etc/systemd/system/[servicename].service#编辑脚本[Unit]Description=Shadowsocks[Service]TimeoutStartSec=0ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json startExecStop=/usr/bin/ssserver -c /etc/shadowsocks.json stop[Install]WantedBy=multi-user.target 这里会遇到一个坑：ExecStart 这里填写的启动脚本 少了一个start不知道是不是我本身脚本问题 参数详解: Description服务描述 ExecStart 服务启动执行脚本 ExecStop 服务停止执行脚本 WantedBy 系统以该形式运行时，服务方可启动 4.Systemctl 命令注册服务 systemctl enable shadowsocks所有服务 systemctl list-units --type=service服务状态 systemctl status shadowsocks -l启动服务 systemctl start shadowsocks停止服务 systemctl stop shadowsocks重启服务 systemctl restart shadowsocks 5.Shadowsocks 客户端安装环境支持 Shadowsocks for Win Microsoft .NET Framework 4.6.2 Microsoft Visual C++ 2015 Redistributable (x86) 安装完毕配置启动即可 贴士提示 CentOs7需要配置下防火墙端口白名单1234#添加端口号8388(设置的server-port) --permanent永久生效firewall-cmd --zone=public --add-port=8388/tcp --permanent #重载配置firewall-cmd --reload","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://laochenpi.top/tags/Linux/"},{"name":"技术","slug":"技术","permalink":"http://laochenpi.top/tags/技术/"}]},{"title":"Python验证码识别","slug":"Python 第三方库 PIL","date":"2018-05-25T08:27:08.000Z","updated":"2018-07-19T06:53:14.303Z","comments":true,"path":"2018/05/25/Python 第三方库 PIL/","link":"","permalink":"http://laochenpi.top/2018/05/25/Python 第三方库 PIL/","excerpt":"","text":"Python 第三方库 PIL Pytesseract tesseract-ocr 进行爬虫验证码识别 1.Python 第三方库依赖 通过cmd控制台进入python pip目录执行pip install requests 进行安装 其他的第三方库都可以通过这种形式进行安装12345678910#进入Python脚本文件夹cd C:\\Users\\serwer\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts#安装 requests 请求http库pip install requests #安装 pytesseract 基础识别库pip install pytesseract#安装 Image图片处理 为更好识别验证码pip install Image#显示requests相关信息pip show requests 可以通过配置pip环境变量达到在任意文件夹目录进行pip脚本执行 2.OCR图形识别软件 （Google维护的开源的OCR）Tesseract-ocr github地址 window 可选择Tesseract-ocr-setup-3.05.01.exe 123456789101112131415161718192021222324252627282930313233343536373839import requestsimport pytesseractfrom PIL import ImageimagePath = &quot;D:\\\\1.gif&quot;imageUrl = &quot;http://112.112.9.205:88/ValiateNum.ashx&quot;def getAuthCodeImage(): r = requests.get(imageUrl, stream=True) with open(imagePath, &apos;wb&apos;) as fd: for chunk in r.iter_content(1024): fd.write(chunk) fd.closedef disposeImage(): image = Image.open(imagePath) table = [] for i in range(256): if i &lt; 140: table.append(0) else: table.append(1) image = image.convert(&apos;L&apos;) image = image.resize((300,100),Image.BILINEAR) image = image.point(table,&apos;1&apos;) image.save(&quot;D:\\\\1.png&quot;,&quot;png&quot;)def discernCode(): im=Image.open(&quot;D:\\\\1.png&quot;) code = pytesseract.image_to_string(im) print(code)#获取验证码并保存getAuthCodeImage()#验证码图片处理 灰阶处理disposeImage()#识别验证码discernCode()","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://laochenpi.top/tags/技术/"},{"name":"python","slug":"python","permalink":"http://laochenpi.top/tags/python/"}]},{"title":"Logstash同步数据库","slug":"Logstah同步Es","date":"2018-05-25T08:27:08.000Z","updated":"2018-07-24T09:11:29.202Z","comments":true,"path":"2018/05/25/Logstah同步Es/","link":"","permalink":"http://laochenpi.top/2018/05/25/Logstah同步Es/","excerpt":"","text":"由于业务需求需要同步某些数据库的表数据更新修改删除需同步ES保证同步性，在进行curd用AOP可实现同步，但是考虑到解耦分离后续系统水平拓展，查询资料可以用Logstash进行同步Es,Logstash 是开源的服务器端数据处理管道，能够同时 从多个来源采集数据、转换数据，然后将数据发送到Elasticsearch. 1.Logstash依赖环境 JDK1.8 下载地址 Ruby环境 下载地址 logstash 6.3.1 下载地址 2.Logstash同步配置文件 Logstash由三个组件构造成，分别是input、filter以及output。我们可以吧Logstash三个组件的工作流理解为：input收集数据，filter处理数据，output输出数据。至于怎么收集、去哪收集、怎么处理、处理什么、怎么发生以及发送到哪等等一些列的问题就是我们接下啦要讨论的一个重点。123456789101112131415161718192021222324252627282930313233343536input &#123; jdbc&#123; #数据库驱动jar包 jdbc_driver_library =&gt; &quot;\\policySyn\\ojdbc6.jar&quot; #数据库地址 jdbc_connection_string =&gt; &quot;jdbc:oracle:thin:@192.168.105.16:1523:gnnt&quot; #数据库用户名密码 jdbc_user =&gt; &quot;plane_tick&quot; jdbc_password =&gt; &quot;ora123&quot; #数据库驱动类 jdbc_driver_class =&gt; &quot;Java::oracle.jdbc.driver.OracleDriver&quot; jdbc_paging_enabled =&gt; &quot;true&quot; jdbc_page_size =&gt; &quot;50000&quot; #执行sql绝对路径 或相对路径 statement_filepath =&gt; &quot;\\policySyn\\syn.sql&quot; #更新时间记录和存放 record_last_run =&gt; &quot;true&quot; last_run_metadata_path =&gt; &quot;\\policySyn\\synDate.txt&quot; #定时更新频率 20分钟一次 schedule =&gt; &quot;* * * * *&quot; #索引类型 type =&gt; &quot;policyteam_dev&quot; &#125;&#125;//同步目的地output &#123; elasticsearch&#123; hosts =&gt; &quot;http://192.168.105.13:9200&quot; index =&gt; &quot;policyteam_dev&quot; document_id =&gt; &quot;%&#123;zcbh&#125;&quot; &#125; stdout &#123; codec =&gt; json_lines &#125;&#125; 3.启动同步脚本进入Logstash目录bin文件夹下执行脚本12#config为执行配置文件绝对路径或相对路径logstash -f [config]","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://laochenpi.top/tags/技术/"},{"name":"logstash,ELK","slug":"logstash-ELK","permalink":"http://laochenpi.top/tags/logstash-ELK/"}]},{"title":"Hexo+GitHub第一次搭建笔记","slug":"hexo","date":"2018-05-24T06:48:00.000Z","updated":"2018-07-19T06:53:23.210Z","comments":true,"path":"2018/05/24/hexo/","link":"","permalink":"http://laochenpi.top/2018/05/24/hexo/","excerpt":"","text":"Hexo+GitHub 搭建踩坑行动,平时有什么代码心得或者遇到一些奇葩BUG、都没有记下来,后来遇到类似的问题居然又忘记了,所以想自己搭建一个博客记录下一些平时遇到的问题和需要解决的一些技术问题记录下来以便以后回来还可以查阅,就用Hexo搭建一个静态的博客。 1.Hexo 环境准备 Node.js hexo依赖环境 Git Bash 根据OS下载安装包 用于发布和更新微博 安装Hexo12345678#1.安装hexo环境npm install hexo-cli -g #2.初始化hexo blog 文件夹和相关带代码 bolgName为文件夹名称hexo init [blogName]#3.进入博客文件夹cd blog#4.进行依赖更新安装npm install 常用指令12345678910111213141516#新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。$ hexo init [folder]#新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 #default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。$ hexo new [layout] &lt;title&gt;#生成静态文件。$ hexo g#发表草稿$ hexo publish [layout] &lt;filename&gt;# 启动服务器。默认情况下，访问网址为： http://localhost:4000/$ hexo s# 部署网站$ hexo deploy# -p, --port 重设端口# -s, --static 只使用静态文件# -l, --log 启动日记记录，使用覆盖记录格式 2.GitHub Page准备 登录Github创建一个reqo,名称为 [yourname].github.io (这里注意下yourname最好跟你库的用户名一样) 本地使用git设置username 和email 12git config --global user.name [username]git config --global user.email [email] GitHub SSH KEY 设置 1ssh-keygen -t rsa -C [email] 秘钥 C:\\Users\\serwer\\.ssh\\id_rsa.pub 复制添加到Github SSH Key中 在 Git Bash 中验证是否添加成功：ssh -T git@github.com 配置_config.yml 发布静态文件到github,修改_config.yml进行github发布设置 1234deploy: type: git repo: git@github.com:[username]/[username].github.io.git branch: master 通过 Git Bash hexo d 进行发布更新到github 然后访问你的reqo page即可看到属于你自己的静态微博 可能遇到的问题： 解决方法:npm install --save hexo-deployer-git 安装hexo git发布插件然后执行hexo d","categories":[{"name":"技术","slug":"技术","permalink":"http://laochenpi.top/categories/技术/"}],"tags":[{"name":"技术","slug":"技术","permalink":"http://laochenpi.top/tags/技术/"},{"name":"Github","slug":"Github","permalink":"http://laochenpi.top/tags/Github/"},{"name":"Node.js","slug":"Node-js","permalink":"http://laochenpi.top/tags/Node-js/"}]}]}